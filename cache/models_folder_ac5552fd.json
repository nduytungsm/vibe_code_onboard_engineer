{
  "content_hash": "59c867d515cac3118158ea8f8276d60d",
  "timestamp": "2025-09-26T11:09:17.319759+07:00",
  "result": {
    "path": "models",
    "purpose": "Defines data structures and methods for various components of the application, including user management, notifications, blockchain interactions, and more.",
    "languages": {
      "Go": 30
    },
    "key_modules": [
      "account.go",
      "announcement.go",
      "contract.go",
      "notification.go",
      "useragent.go"
    ],
    "dependencies": [
      "github.com/ethereum/go-ethereum/common",
      "github.com/mitchellh/mapstructure",
      "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
    ],
    "architecture": "The folder follows a modular architecture pattern, where each file represents a specific domain model or functionality, promoting separation of concerns and maintainability.",
    "file_summaries": {
      "models/account.go": {
        "language": "Go",
        "purpose": "Defines data structures and methods for handling user information and token management in an authentication context.",
        "key_types": [
          "GetSMUserInfoRequest",
          "GetSMUserInfoResponse",
          "LinkAccountRequest",
          "RefreshTokenRequest",
          "RevokeTokenRequest"
        ],
        "functions": [
          "ToAuthOptions"
        ],
        "imports": [],
        "complexity": "medium"
      },
      "models/announcement.go": {
        "language": "Go",
        "purpose": "Defines models and structures for handling announcements and related data.",
        "key_types": [
          "Buttons",
          "Announcement",
          "PublicAnnouncementListItem",
          "PublicAnnouncement",
          "ScheduleNewAnnouncementRequest",
          "ScheduleNewSpecialOfferRequest",
          "SpecialOffer"
        ],
        "functions": [
          "Scan",
          "Value",
          "createNotificationData",
          "ToPushNotificationRequest",
          "ToTargetPushNotificationRequest",
          "ToPublicListItem",
          "ToPublicFullContent",
          "ToAnnouncement",
          "ToAnnouncement (ScheduleNewSpecialOfferRequest)"
        ],
        "imports": [
          "database/sql/driver",
          "encoding/json",
          "errors",
          "mime/multipart",
          "strconv",
          "strings",
          "time",
          "github.com/ethereum/go-ethereum/common",
          "github.com/mitchellh/mapstructure",
          "github.com/rs/zerolog/log"
        ],
        "side_effects": [
          "Logs an error if buttons_json_str is not a valid JSON string."
        ],
        "complexity": "medium"
      },
      "models/app.go": {
        "language": "Go",
        "purpose": "Defines data structures for managing code versioning and updates.",
        "key_types": [
          "CodeVersion",
          "UpdateCodeVersionRequest",
          "EnvironmentConfig"
        ],
        "functions": [
          "ToCodeVersion"
        ],
        "imports": [],
        "complexity": "low"
      },
      "models/binance.go": {
        "language": "Go",
        "purpose": "Defines data structures for signing requests and responses in a Binance API context.",
        "key_types": [
          "BinanceSignRequest",
          "BinanceSignResponse"
        ],
        "functions": [],
        "imports": [],
        "complexity": "low"
      },
      "models/blacklist.go": {
        "language": "Go",
        "purpose": "Defines a request structure for getting blacklist sites.",
        "key_types": [
          "GetBlacklistSitesReq",
          "Paging",
          "AgentInfo"
        ],
        "functions": [],
        "imports": [],
        "complexity": "low"
      },
      "models/chain.go": {
        "language": "Go",
        "purpose": "Defines a configuration structure for a blockchain chain model.",
        "key_types": [
          "ChainConfig",
          "Network",
          "Contract",
          "DApp",
          "GasPrice"
        ],
        "functions": [],
        "imports": [],
        "complexity": "low"
      },
      "models/common.go": {
        "language": "Go",
        "purpose": "Defines data structures for common models used in the application.",
        "key_types": [
          "Common",
          "SupportURL",
          "KnownContract",
          "KnownContracts"
        ],
        "functions": [],
        "imports": [
          "encoding/json",
          "time"
        ],
        "complexity": "medium"
      },
      "models/contract.go": {
        "language": "Go",
        "purpose": "Defines data structures and methods for handling smart contract information and metadata.",
        "key_types": [
          "ContractType",
          "ERC721Type",
          "ERC1155Type",
          "Metadata",
          "Contract",
          "ContractResponse",
          "ContractFilter",
          "CreateContractRequest",
          "UpdateContractRequest",
          "GetContractByIDRequest",
          "ERC20Metadata",
          "ERC721Metadata",
          "ERC1155Metadata",
          "DAppURL",
          "DAppURLSlice",
          "StringSlice",
          "InjectScript"
        ],
        "functions": [
          "Scan",
          "Value",
          "MarshalJSON",
          "UnmarshalJSON",
          "Copy",
          "ToMap",
          "ToContract"
        ],
        "imports": [
          "database/sql",
          "database/sql/driver",
          "encoding/json",
          "errors",
          "fmt",
          "strings",
          "time",
          "github.com/mitchellh/mapstructure",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
        ],
        "complexity": "medium"
      },
      "models/default.go": {
        "language": "Go",
        "purpose": "Defines data structures and methods for handling responses and pagination.",
        "key_types": [
          "OkResponse",
          "Paging",
          "Preload",
          "ListResponse"
        ],
        "functions": [
          "GetPage",
          "GetOffset",
          "GetLimit"
        ],
        "imports": [],
        "complexity": "medium"
      },
      "models/device.go": {
        "language": "Go",
        "purpose": "Defines data structures for device management and requests related to devices.",
        "key_types": [
          "Device",
          "GetDeviceByIDRequest",
          "PostDeviceRegistrationRequest",
          "PutWalletDeviceUpdatePushToken",
          "PostImportWalletReq",
          "PutDeviceAddressesReq"
        ],
        "functions": [],
        "imports": [
          "time",
          "github.com/ethereum/go-ethereum/common"
        ],
        "complexity": "medium"
      },
      "models/external_auth.go": {
        "language": "Go",
        "purpose": "Defines data structures for handling OAuth authentication requests and responses.",
        "key_types": [
          "XExchangeAuthCodeReq",
          "XRefreshAccessTokenReq",
          "XAccessTokenInfo",
          "XAccessTokenRes",
          "OAuthConfig"
        ],
        "functions": [],
        "imports": [],
        "complexity": "medium"
      },
      "models/highlight.go": {
        "language": "Go",
        "purpose": "Defines data models and request/response structures for highlights in an application.",
        "key_types": [
          "Highlight",
          "InternalHighlightResponse",
          "GetHighlightRequest",
          "SaveHighlightRequest",
          "SaveHighlightBatchRequest",
          "GetHighlightsListResponse",
          "UpdateHighlightRequest",
          "UpdateHighlightBatchRequest",
          "GetHighlightByIDRequest"
        ],
        "functions": [
          "ToInternalResponse",
          "ToDApp",
          "ToUpdateMap"
        ],
        "imports": [
          "time",
          "github.com/mitchellh/mapstructure"
        ],
        "complexity": "medium"
      },
      "models/ip_locations.go": {
        "language": "Go",
        "purpose": "Defines data models for IP location information and a request structure for fetching location data based on an IP address.",
        "key_types": [
          "IPLocation",
          "GetLocationRequest"
        ],
        "functions": [],
        "imports": [
          "time"
        ],
        "complexity": "low"
      },
      "models/moonpay.go": {
        "language": "Go",
        "purpose": "Defines data structures for Moonpay signing requests and responses.",
        "key_types": [
          "MoonpaySigningRequest",
          "MoonpaySigningResponse"
        ],
        "functions": [],
        "imports": [],
        "complexity": "low"
      },
      "models/network.go": {
        "language": "Go",
        "purpose": "Defines the Network model and related request structures for managing blockchain network data.",
        "key_types": [
          "Network",
          "GasPrice",
          "GetNetworkRequest",
          "GetDAppsRequest",
          "GetContractsRequest",
          "NetworkFilter",
          "NetworkOrderBy",
          "CreateNetworkRequest",
          "UpdateNetworkRequest",
          "GetNetworkByIDRequest"
        ],
        "functions": [
          "GetCacheDApps",
          "GetCacheContracts",
          "ToMap",
          "ToNetWork"
        ],
        "imports": [
          "sync",
          "time",
          "github.com/mitchellh/mapstructure",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
        ],
        "complexity": "medium"
      },
      "models/notification.go": {
        "language": "Go",
        "purpose": "Defines data structures and constants for managing push notifications and their recipients.",
        "key_types": [
          "DeviceStatus",
          "PushRecipient",
          "DevicePlatform",
          "RecipientFilterField",
          "RecipientFilter",
          "Recipient",
          "Payload",
          "PostPushNotificationRequest"
        ],
        "functions": [
          "ParsePlatform"
        ],
        "imports": [
          "strings"
        ],
        "complexity": "medium"
      },
      "models/preference.go": {
        "language": "Go",
        "purpose": "Defines data models for user preferences and filters related to device preferences.",
        "key_types": [
          "Preference",
          "PreferenceFilter",
          "DevicePreferences"
        ],
        "functions": [
          "ToMap"
        ],
        "imports": [
          "time",
          "github.com/mitchellh/mapstructure"
        ],
        "complexity": "medium"
      },
      "models/quickaccess.go": {
        "language": "Go",
        "purpose": "Defines data structures and methods for managing quick access decentralized applications (DApps).",
        "key_types": [
          "QuickAccessDApp",
          "SaveQuickAccessDAppRequest",
          "InternalQuickAccessDAppResponse",
          "GetQuickAccessDAppByIDRequest",
          "SaveQuickAccessDAppBatchRequest",
          "GetQuickAccessListRequest",
          "SearchDAppRequest",
          "GetQuickAccessListResponse",
          "UpdateQuickAccessOrderRequest",
          "UpdateQuickAccessDAppRequest",
          "UpdateQuickAccessDAppBatchRequest"
        ],
        "functions": [
          "ToInternalResponse",
          "ToDApp",
          "ToUpdateMap",
          "ToUpdateMap (UpdateQuickAccessDAppRequest)",
          "ToUpdateMap (UpdateQuickAccessDAppBatchRequest)"
        ],
        "imports": [
          "time",
          "github.com/mitchellh/mapstructure"
        ],
        "complexity": "medium"
      },
      "models/ref_code.go": {
        "language": "Go",
        "purpose": "Defines models and structures for managing referral codes and wallets in a referral system.",
        "key_types": [
          "ReferralCode",
          "ReferralCodeFilter",
          "ReferralCodeOrderBy",
          "ReferralWallet",
          "ReferralWalletFilter",
          "ReferralWalletOrderBy",
          "SubmitSelfGenCode",
          "UpdateRefCodeStatus",
          "GetCodeByOwner",
          "GetReferralWalletsRequest",
          "GenerateCodeRequest",
          "SubmitReferralCodeRequest",
          "GetSubmittedRefCode",
          "VerifyReferralCode"
        ],
        "functions": [
          "ToMap (ReferralCodeFilter)",
          "ToMap (ReferralWalletFilter)",
          "ToReferralCode (SubmitSelfGenCode)"
        ],
        "imports": [
          "strings",
          "time",
          "github.com/mitchellh/mapstructure",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
        ],
        "complexity": "medium"
      },
      "models/releasecandidate.go": {
        "language": "Go",
        "purpose": "Defines request structures for feature management in a device context.",
        "key_types": [
          "CheckAllowFeatureRequest",
          "PostFeatureConfigRequest",
          "PostWhitelistFeaturesRequest",
          "PostSetConfigForDeviceRequest",
          "GetCountWhitelistDevices"
        ],
        "functions": [],
        "imports": [],
        "complexity": "low"
      },
      "models/trusted_domain.go": {
        "language": "Go",
        "purpose": "Defines data structures and request types for managing trusted domains.",
        "key_types": [
          "TrustedDomain",
          "GetTDMByDomainRequest",
          "SaveTrustedDomainBatchRequest",
          "TrustedDomainFilter",
          "TrustedDomainOrderBy",
          "GetListTDMRequest"
        ],
        "functions": [
          "ToMap"
        ],
        "imports": [
          "time",
          "github.com/mitchellh/mapstructure"
        ],
        "complexity": "medium"
      },
      "models/useragent.go": {
        "language": "Go",
        "purpose": "Defines a structure for user agent information and provides a method to check if the agent info is empty.",
        "key_types": [
          "AgentInfo"
        ],
        "functions": [
          "IsEmpty"
        ],
        "imports": [],
        "complexity": "low"
      }
    }
  }
}