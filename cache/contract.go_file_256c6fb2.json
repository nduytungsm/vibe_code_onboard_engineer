{
  "content_hash": "7d32e1b92efa26b312ac98df460733dd",
  "timestamp": "2025-09-24T15:31:30.072811+07:00",
  "result": {
    "language": "Go",
    "purpose": "This file defines a repository interface and its implementation for managing contract data in a database.",
    "key_types": [
      "ContractRepo",
      "contractRepo",
      "md.Contract",
      "md.ContractFilter",
      "md.ContractOrderBy",
      "md.Paging"
    ],
    "functions": [
      "GetContract",
      "GetContractList",
      "CreateContract",
      "DeleteContract",
      "UpdateContract",
      "SaveContract",
      "UpdateContracts",
      "SaveContracts",
      "NewContractRepo"
    ],
    "imports": [
      "context",
      "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
      "gorm.io/gorm",
      "gorm.io/gorm/clause",
      "github.com/axieinfinity/ecosystem-go-common/errors",
      "github.com/axieinfinity/ronin-wallet-manager/models"
    ],
    "side_effects": [
      "Database operations such as create, delete, and update contracts."
    ],
    "risks": [
      "Potential SQL injection if filter conditions are not properly sanitized.",
      "Error handling may expose sensitive information if not managed correctly."
    ],
    "complexity": "medium"
  }
}