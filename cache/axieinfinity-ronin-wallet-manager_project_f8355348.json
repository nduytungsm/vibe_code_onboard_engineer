{
  "content_hash": "4b112a79107dfaef3d2e65165e3054ab",
  "timestamp": "2025-09-26T11:11:26.673677+07:00",
  "result": {
    "purpose": "A wallet management platform designed for handling cryptocurrency transactions and managing user accounts, preferences, and announcements. It integrates with various services like Binance and Moonpay to facilitate seamless financial operations for users.",
    "architecture": "The project follows a microservices architecture, utilizing a modular structure for services, repositories, and handlers, with a focus on separation of concerns and maintainability.",
    "data_models": [
      "User",
      "Account",
      "Announcement",
      "Device",
      "DApp",
      "Network",
      "Preference",
      "TrustedDomain"
    ],
    "external_services": [
      "PostgreSQL",
      "Redis",
      "Binance API",
      "Moonpay API",
      "Sentry for error tracking"
    ],
    "languages": {
      "Bash": 1,
      "Go": 100,
      "JSON": 5,
      "Markdown": 5,
      "SQL": 6,
      "YAML": 10
    },
    "folder_summaries": {
      ".github": {
        "path": ".github",
        "purpose": "Contains templates and configurations for GitHub workflows, including pull request templates.",
        "languages": {
          "Markdown": 1
        },
        "key_modules": [
          "pull_request_template.md"
        ],
        "dependencies": [],
        "architecture": "The folder follows a simple structure for managing GitHub-related templates and configurations, focusing on enhancing collaboration and code review processes.",
        "file_summaries": {
          ".github/pull_request_template.md": {
            "language": "Markdown",
            "purpose": "Template for pull requests to describe changes and checklist items.",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      ".github/workflows": {
        "path": ".github/workflows",
        "purpose": "This folder is responsible for defining GitHub Actions workflows for various automation tasks related to CI/CD processes.",
        "languages": {
          "YAML": 4
        },
        "key_modules": [
          "check.yml",
          "dockerize.yml",
          "golangci-lint.yml",
          "sentry.yml"
        ],
        "dependencies": [
          "axieinfinity/workflows-samples"
        ],
        "architecture": "The folder follows a modular architecture pattern, where each YAML file defines a specific workflow for automation tasks, allowing for easy maintenance and scalability.",
        "file_summaries": {
          ".github/workflows/check.yml": {
            "language": "YAML",
            "purpose": "Defines a GitHub Actions workflow for security scanning on pull requests to the develop branch.",
            "key_types": [],
            "functions": [],
            "imports": [
              "axieinfinity/workflows-samples/.github/workflows/security-basic-scan.yml@ce8adf700c0cd05672ebd7154c828d396631c153"
            ],
            "complexity": "low"
          },
          ".github/workflows/dockerize.yml": {
            "language": "YAML",
            "purpose": "Defines a GitHub Actions workflow for Dockerizing a mobile wallet manager.",
            "key_types": [
              "workflow",
              "job",
              "permissions"
            ],
            "functions": [
              "on",
              "jobs",
              "uses",
              "with",
              "secrets"
            ],
            "imports": [
              "axieinfinity/workflows-samples/.github/workflows/docker-build-submodule.yml"
            ],
            "side_effects": [
              "Triggers on push and pull request events",
              "Uses secrets for secure operations"
            ],
            "risks": [
              "Exposure of sensitive information if secrets are not managed properly"
            ],
            "complexity": "medium"
          },
          ".github/workflows/golangci-lint.yml": {
            "language": "YAML",
            "purpose": "Configuration file for golangci-lint GitHub Actions workflow",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          ".github/workflows/sentry.yml": {
            "language": "YAML",
            "purpose": "Defines a GitHub Actions workflow for Sentry release management.",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "cmd/app": {
        "path": "cmd/app",
        "purpose": "This folder/module is responsible for setting up and running the main application, including an HTTP server and a metrics server.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
          "github.com/axieinfinity/ecosystem-go-common/echo/profiling",
          "github.com/axieinfinity/ecosystem-go-common/validation",
          "github.com/getsentry/sentry-go",
          "github.com/getsentry/sentry-go/echo",
          "github.com/labstack/echo-contrib/echoprometheus",
          "github.com/labstack/echo/v4",
          "github.com/labstack/echo/v4/middleware",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/middleware",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-manager/routes"
        ],
        "architecture": "The folder follows a modular architecture pattern, where the main application logic is encapsulated in a single entry point (main.go) that initializes and manages various components like HTTP and metrics servers.",
        "file_summaries": {
          "cmd/app/main.go": {
            "language": "Go",
            "purpose": "This file sets up an HTTP server and a metrics server, handling graceful shutdown and middleware integration.",
            "key_types": [
              "context.Context",
              "sync.WaitGroup",
              "echo.Echo",
              "config.Schema"
            ],
            "functions": [
              "main",
              "startHTTPServer",
              "startMetricsServer",
              "shutdown"
            ],
            "imports": [
              "context",
              "fmt",
              "os",
              "os/signal",
              "strings",
              "sync",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/echo/profiling",
              "github.com/axieinfinity/ecosystem-go-common/validation",
              "github.com/getsentry/sentry-go",
              "github.com/getsentry/sentry-go/echo",
              "github.com/labstack/echo-contrib/echoprometheus",
              "github.com/labstack/echo/v4",
              "github.com/labstack/echo/v4/middleware",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/routes"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking if enabled",
              "Starts HTTP and metrics servers"
            ],
            "risks": [
              "Potential exposure of sensitive information in logs if not properly configured",
              "Improper handling of shutdown may lead to data loss"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/clean_cronjob": {
        "path": "cmd/clean_cronjob",
        "purpose": "This folder/module is responsible for implementing a cron job that cleans old announcements from a database.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/database/redis",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the cron job functionality and its dependencies, promoting separation of concerns and maintainability.",
        "file_summaries": {
          "cmd/clean_cronjob/main.go": {
            "language": "Go",
            "purpose": "This file implements a cron job that cleans old announcements from a database.",
            "key_types": [
              "context.Context",
              "time.Time",
              "gorm.DB",
              "config.Config",
              "mRd.RedisClient",
              "repositories.AnnouncementRepo",
              "repositories.PreferencesRepo",
              "announcement.Service",
              "tracking.Service"
            ],
            "functions": [
              "main",
              "sentry.Init",
              "postgresql.NewClient",
              "mRd.NewRedisClient",
              "repositories.NewAnnouncementRepo",
              "repositories.NewPreferencesRepo",
              "tracking.NewService",
              "announcement.NewService",
              "svc.CleanOldCronJobs"
            ],
            "imports": [
              "context",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/database/redis",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking",
              "Connects to PostgreSQL database",
              "Connects to Redis database",
              "Cleans old cron jobs from the database"
            ],
            "risks": [
              "Potential failure in Sentry initialization",
              "Database connection failures",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/clean_highlight_dapps": {
        "path": "cmd/clean_highlight_dapps",
        "purpose": "This folder/module is responsible for cleaning expired highlights from a database through a command-line application.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/database/redis",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a command-line application architecture, utilizing a main function to orchestrate the cleaning process, with dependencies on various services for database interactions and error tracking.",
        "file_summaries": {
          "cmd/clean_highlight_dapps/main.go": {
            "language": "Go",
            "purpose": "This file contains the main function for a command-line application that cleans expired highlights from a database.",
            "key_types": [
              "context.Context",
              "time.Time",
              "gorm.DB",
              "config.Config",
              "redis.Client",
              "dapp.CleanService",
              "md.Highlight"
            ],
            "functions": [
              "main",
              "sentry.Init",
              "postgresql.NewClient",
              "repositories.NewQuickAccessDAppRepo",
              "repositories.NewHighlightRepo",
              "redis.NewRedisClient",
              "dapp.NewCleanService",
              "dAppSvc.CleanExpireHighlights"
            ],
            "imports": [
              "context",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/database/redis",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking",
              "Connects to PostgreSQL database",
              "Connects to Redis database",
              "Logs information about the cleaning process"
            ],
            "risks": [
              "Potential exposure of sensitive information in logs",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/clean_old_special_offers": {
        "path": "cmd/clean_old_special_offers",
        "purpose": "Cleans old special offers from a database based on a configured time period.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a command-line application architecture, where the main entry point is responsible for initializing necessary services and executing the cleaning operation.",
        "file_summaries": {
          "cmd/clean_old_special_offers/main.go": {
            "language": "Go",
            "purpose": "Cleans old special offers from a database based on a configured time period.",
            "key_types": [
              "context.Context",
              "time.Time",
              "gorm.DB",
              "config.Config",
              "repositories.AnnouncementRepo"
            ],
            "functions": [
              "main",
              "sentry.Init",
              "postgresql.NewClient",
              "repositories.NewAnnouncementRepo",
              "announcementRepo.ClearSpecialOffers"
            ],
            "imports": [
              "context",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking",
              "Connects to a PostgreSQL database",
              "Clears records from the database"
            ],
            "risks": [
              "Potential database connection failure",
              "Error handling may not cover all edge cases",
              "Sentry initialization failure may lead to untracked errors"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/ip_location": {
        "path": "cmd/ip_location",
        "purpose": "This folder/module is responsible for initializing a Sentry client for error tracking and downloading a new IP location database using Redis.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/database/redis",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/location"
        ],
        "architecture": "The folder follows a modular architecture pattern, focusing on separation of concerns by handling error tracking and database management in a single entry point.",
        "file_summaries": {
          "cmd/ip_location/main.go": {
            "language": "Go",
            "purpose": "This file initializes a Sentry client for error tracking and downloads a new IP location database using Redis.",
            "key_types": [
              "context.Context",
              "time.Time",
              "sentry.ClientOptions",
              "redis.Client",
              "location.Service"
            ],
            "functions": [
              "main",
              "sentry.Init",
              "redis.NewRedisClient",
              "location.NewService",
              "locationService.DownloadNewDB"
            ],
            "imports": [
              "context",
              "time",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/database/redis",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/location"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking",
              "Logs errors and process time"
            ],
            "risks": [
              "Potential exposure of sensitive information in logs",
              "Error handling may not cover all cases"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/trigger_announcement": {
        "path": "cmd/trigger_announcement",
        "purpose": "This folder/module is responsible for triggering announcements in the application.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a modular architecture pattern, where the main entry point initializes services and repositories to handle announcement triggering.",
        "file_summaries": {
          "cmd/trigger_announcement/main.go": {
            "language": "Go",
            "purpose": "This file is the main entry point for triggering announcements in the application.",
            "key_types": [
              "context.Context",
              "error",
              "gorm.DB",
              "announcement.Service",
              "repositories.AnnouncementRepo",
              "repositories.PreferencesRepo"
            ],
            "functions": [
              "main",
              "sentry.Init",
              "postgresql.NewClient",
              "repositories.NewAnnouncementRepo",
              "repositories.NewPreferencesRepo",
              "tracking.NewService",
              "announcement.NewService",
              "announcementSvc.TriggerAnnouncement"
            ],
            "imports": [
              "context",
              "errors",
              "os",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking",
              "Connects to a PostgreSQL database",
              "Triggers an announcement based on environment variable"
            ],
            "risks": [
              "Potential exposure of sensitive information through environment variables",
              "Error handling may not cover all failure cases"
            ],
            "complexity": "medium"
          }
        }
      },
      "config": {
        "path": "config",
        "purpose": "This folder/module is responsible for managing application configuration settings and structures.",
        "languages": {
          "Go": 3,
          "YAML": 1
        },
        "key_modules": [
          "config/config.go",
          "config/config.yml",
          "config/func_print.go",
          "config/func_print_test.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/axieinfinity/ecosystem-go-common/sso",
          "github.com/inhies/go-bytesize",
          "github.com/mitchellh/mapstructure",
          "github.com/rs/zerolog",
          "github.com/spf13/viper",
          "github.com/axieinfinity/ronin-wallet-manager/database/redis",
          "github.com/axieinfinity/ronin-wallet-manager/httpclient",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/binance",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/location",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/moonpay",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/xauth"
        ],
        "architecture": "The folder follows a modular architecture pattern, separating configuration logic into distinct files for initialization, data hiding, and testing.",
        "file_summaries": {
          "config/config.go": {
            "language": "Go",
            "purpose": "This file defines configuration structures and initializes application settings using viper for a service.",
            "key_types": [
              "Schema",
              "Server",
              "Sentry",
              "TLSConfig",
              "Logging",
              "Profiling"
            ],
            "functions": [
              "StringToByteSizeHookFunc",
              "Init"
            ],
            "imports": [
              "fmt",
              "reflect",
              "runtime",
              "strconv",
              "strings",
              "sync",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/axieinfinity/ecosystem-go-common/sso",
              "github.com/inhies/go-bytesize",
              "github.com/mitchellh/mapstructure",
              "github.com/rs/zerolog",
              "github.com/spf13/viper",
              "github.com/axieinfinity/ronin-wallet-manager/database/redis",
              "github.com/axieinfinity/ronin-wallet-manager/httpclient",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/binance",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/location",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/moonpay",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/xauth"
            ],
            "side_effects": [
              "Panic if the configuration file cannot be read",
              "Sets global logging level based on configuration"
            ],
            "risks": [
              "Potential exposure of sensitive configuration data if not properly secured",
              "Panic on configuration read errors could lead to application crashes"
            ],
            "complexity": "medium"
          },
          "config/config.yml": {
            "language": "YAML",
            "purpose": "Configuration file for a mobile wallet manager application, detailing various service settings and parameters.",
            "key_types": [
              "profiler",
              "server",
              "profiling",
              "auth_server",
              "sso_server",
              "sentry",
              "hmac_internal",
              "logging",
              "redis",
              "postgres",
              "api_version",
              "ref_code",
              "moonpay",
              "announcement_config",
              "ip_location_config",
              "binance_config",
              "tracking_config",
              "external_auth_config",
              "hide_all_spotlights_config",
              "enable_quest_coming_soon_config",
              "disable_nft_portfolio_config",
              "enable_moonpay_config",
              "enable_transak_config",
              "hidden_tab_config",
              "blacklist_site_config"
            ],
            "functions": [],
            "imports": [],
            "risks": [
              "Exposure of sensitive information due to redacted keys and URLs.",
              "Potential misconfiguration leading to security vulnerabilities."
            ],
            "complexity": "medium"
          },
          "config/func_print.go": {
            "language": "Go",
            "purpose": "This file contains functions to hide sensitive data in configuration structures.",
            "key_types": [
              "Schema",
              "viper.Viper"
            ],
            "functions": [
              "isSecretField",
              "hideSecret",
              "hideSensitiveDataInSlice",
              "hideSensitiveDataInMap",
              "hideSensitiveDataInStruct",
              "printConfigSafety"
            ],
            "imports": [
              "reflect",
              "strings",
              "github.com/mitchellh/mapstructure",
              "github.com/rs/zerolog/log",
              "github.com/spf13/viper"
            ],
            "side_effects": [
              "Modifies the input data to hide sensitive information."
            ],
            "risks": [
              "Potential exposure of sensitive data if the hiding functions are not correctly implemented."
            ],
            "complexity": "medium"
          },
          "config/func_print_test.go": {
            "language": "Go",
            "purpose": "Unit tests for functions that hide sensitive data in maps and slices.",
            "key_types": [
              "struct",
              "map",
              "slice"
            ],
            "functions": [
              "TestHideSecretInMap",
              "TestHideSecretInSlice"
            ],
            "imports": [
              "fmt",
              "testing"
            ],
            "side_effects": [
              "Prints test data to the console"
            ],
            "risks": [
              "Potential exposure of sensitive data if not handled properly"
            ],
            "complexity": "medium"
          }
        }
      },
      "database/redis": {
        "path": "database/redis",
        "purpose": "This folder/module is responsible for connecting to a Redis database and managing configurations for the connection.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "redis.go"
        ],
        "dependencies": [
          "github.com/prometheus/client_golang/prometheus",
          "github.com/redis/go-redis/extra/redisprometheus/v9",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating Redis connection logic and configuration management within a single Go file.",
        "file_summaries": {
          "database/redis/redis.go": {
            "language": "Go",
            "purpose": "This file provides functionality to connect to a Redis database and manage configurations for the connection.",
            "key_types": [
              "Redis",
              "Cache"
            ],
            "functions": [
              "NewRedisClient"
            ],
            "imports": [
              "context",
              "crypto/tls",
              "crypto/x509",
              "fmt",
              "os",
              "time",
              "github.com/prometheus/client_golang/prometheus",
              "github.com/redis/go-redis/extra/redisprometheus/v9",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log"
            ],
            "side_effects": [
              "Logs connection attempts and errors to Redis server",
              "Reads certificate files from the filesystem if TLS is configured"
            ],
            "risks": [
              "Potential exposure of sensitive information if credentials are logged or mishandled",
              "Insecure TLS configuration if InsecureSkipVerify is set to true"
            ],
            "complexity": "medium"
          }
        }
      },
      "docs": {
        "path": "docs",
        "purpose": "This folder is responsible for documentation and configuration related to the HTTP client settings.",
        "languages": {
          "JSON": 1
        },
        "key_modules": [
          "http-client.env.json"
        ],
        "dependencies": [],
        "architecture": "The folder contains configuration files in a simple structure, focusing on settings for the HTTP client.",
        "file_summaries": {
          "docs/http-client.env.json": {
            "language": "JSON",
            "purpose": "Configuration file for HTTP client settings",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "handlers": {
        "path": "handlers",
        "purpose": "Responsible for handling various operations related to accounts, announcements, devices, external authentication, and other web service functionalities.",
        "languages": {
          "Go": 15
        },
        "key_modules": [
          "account.go",
          "announcement.go",
          "binance.go",
          "blacklist.go",
          "common.go",
          "dapp.go",
          "default.go",
          "device.go",
          "external_auth.go",
          "locationhandler.go",
          "moonpay.go",
          "network.go",
          "releasecandidate.go",
          "trusted_domain.go"
        ],
        "dependencies": [
          "github.com/labstack/echo/v4",
          "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/*",
          "gorm.io/gorm",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log"
        ],
        "architecture": "The folder follows a modular architecture pattern, where each file corresponds to a specific handler for different functionalities, promoting separation of concerns and maintainability.",
        "file_summaries": {
          "handlers/account.go": {
            "language": "Go",
            "purpose": "Handles account-related operations such as getting account info, linking accounts, refreshing tokens, and revoking tokens.",
            "key_types": [
              "AccountHandler",
              "accountHandler",
              "sso.Config",
              "sso.Client",
              "httpclient.Athena",
              "md.GetSMUserInfoResponse",
              "md.LinkAccountRequest",
              "md.OkResponse"
            ],
            "functions": [
              "GetAccountInfo",
              "LinkAccount",
              "RefreshToken",
              "RevokeToken",
              "NewAccountHandler"
            ],
            "imports": [
              "net/http",
              "strconv",
              "strings",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/sso",
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/httpclient",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Logs debug information about token exchange and refresh operations.",
              "Modifies the context response with JSON data."
            ],
            "risks": [
              "Potential exposure of sensitive information if error handling is not properly implemented.",
              "Dependency on external services for authentication may introduce vulnerabilities."
            ],
            "complexity": "medium"
          },
          "handlers/announcement.go": {
            "language": "Go",
            "purpose": "This file defines an announcement handler that manages announcements and user preferences through various HTTP endpoints.",
            "key_types": [
              "AnnouncementHandler",
              "announcementHandler",
              "md.ScheduleNewAnnouncementRequest",
              "md.ScheduleNewSpecialOfferRequest",
              "md.GetAnnouncementByID",
              "md.GetAnnouncementsListRequest",
              "md.InternalGetWalletPreferencesRequest",
              "md.InternalGetWalletPreferenceResponse",
              "md.PublicAnnouncementListItem",
              "md.ListResponse",
              "md.GetCountNewAnnouncementsRequest",
              "md.GetCountNewAnnouncementsResponse"
            ],
            "functions": [
              "InternalScheduleNewAnnouncement",
              "InternalScheduleNewSpecialOffer",
              "InternalGetAnnouncementByID",
              "InternalGetAnnouncementsList",
              "InternalMarkPublished",
              "InternalManualCleanPublishedJobs",
              "InternalDeleteAnnouncement",
              "InternalGetWalletPreferences",
              "PublicGetAnnouncementByID",
              "PublicGetAnnouncementsList",
              "PublicCountNewAnnouncements",
              "PrivateGetPreferences",
              "PrivateUpdatePreferences",
              "PrivateGetDevicePreference",
              "PrivateUpdateDevicePreference",
              "NewAnnouncementHandler"
            ],
            "imports": [
              "errors",
              "net/http",
              "slices",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/labstack/echo/v4",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/preference"
            ],
            "side_effects": [
              "Interacts with external services to schedule, retrieve, and manage announcements and preferences."
            ],
            "risks": [
              "Potential exposure of sensitive user preferences if not properly secured.",
              "Error handling may expose internal error messages."
            ],
            "complexity": "medium"
          },
          "handlers/binance.go": {
            "language": "Go",
            "purpose": "This file defines a handler for signing requests using the Binance service.",
            "key_types": [
              "BinanceHandler",
              "binanceHandler",
              "binance.Service",
              "md.BinanceSignRequest",
              "md.BinanceSignResponse"
            ],
            "functions": [
              "Sign",
              "NewBinanceHandler"
            ],
            "imports": [
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/binance"
            ],
            "complexity": "medium"
          },
          "handlers/blacklist.go": {
            "language": "Go",
            "purpose": "Handles requests related to blacklist sites and returns them in JSON format.",
            "key_types": [
              "BlacklistHandler",
              "blacklistHandler",
              "blacklist.Service",
              "md.ListResponse"
            ],
            "functions": [
              "NewBlacklistHandler",
              "GetBlacklistSites"
            ],
            "imports": [
              "net/http",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist"
            ],
            "complexity": "medium"
          },
          "handlers/common.go": {
            "language": "Go",
            "purpose": "This file defines a common handler for managing configurations and code versions in a web application.",
            "key_types": [
              "CommonHandler",
              "commonHandler",
              "repositories.CommonRepo",
              "repositories.CodeVersionRepo",
              "redis.Client",
              "models.EnvironmentConfig",
              "models.Common",
              "models.UpdateCodeVersionRequest"
            ],
            "functions": [
              "GetCodePushVersion",
              "GetCommonConfig",
              "GetEncodedCommonConfig",
              "RefreshKnownContracts",
              "UpdateCommonConfig",
              "UpdateCodeVersion",
              "initCacheCodeVersion",
              "initCacheCommon",
              "fireCacheChangedEvent",
              "refreshCache",
              "ExternalAuthConfig",
              "NewCommonHandler"
            ],
            "imports": [
              "context",
              "encoding/json",
              "errors",
              "fmt",
              "net/http",
              "strings",
              "sync",
              "github.com/labstack/echo/v4",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/xauth",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Modifies cache for common configurations and code versions",
              "Publishes events to Redis channels"
            ],
            "risks": [
              "Potential for race conditions due to concurrent access to shared resources",
              "Improper error handling may expose sensitive information"
            ],
            "complexity": "medium"
          },
          "handlers/dapp.go": {
            "language": "Go",
            "purpose": "This file defines a handler for managing decentralized application (DApp) operations, including saving, updating, retrieving, and deleting DApps and highlights.",
            "key_types": [
              "DAppHandler",
              "dAppHandler",
              "md.SaveQuickAccessDAppRequest",
              "md.QuickAccessDApp",
              "md.InternalQuickAccessDAppResponse",
              "md.Highlight",
              "md.InternalHighlightResponse"
            ],
            "functions": [
              "InternalSave",
              "InternalSaveBatch",
              "InternalUpdate",
              "InternalUpdateOrder",
              "InternalGetByID",
              "InternalDeleteByID",
              "InternalGetAll",
              "InternalSaveHighlight",
              "InternalSaveBatchHighlight",
              "InternalUpdateHighlight",
              "InternalGetHighlightByID",
              "InternalDeleteHighlightByID",
              "InternalGetAllHighlight",
              "InternalRefreshCacheHighlight",
              "PublicGetList",
              "PublicGetHighlight",
              "NewDAppHandler"
            ],
            "imports": [
              "errors",
              "net/http",
              "strings",
              "github.com/labstack/echo/v4",
              "gorm.io/gorm",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "side_effects": [
              "Modifies the state of DApps in the database",
              "Interacts with external services for blacklist checks"
            ],
            "risks": [
              "Potential exposure of sensitive data through improper error handling",
              "Inadequate input validation may lead to injection attacks"
            ],
            "complexity": "medium"
          },
          "handlers/default.go": {
            "language": "Go",
            "purpose": "This file defines a handler function to retrieve agent information from the context.",
            "key_types": [
              "echo.Context",
              "models.AgentInfo"
            ],
            "functions": [
              "getAgentInfo"
            ],
            "imports": [
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "complexity": "low"
          },
          "handlers/device.go": {
            "language": "Go",
            "purpose": "This file defines a handler for device-related operations in a web application, including device reset, registration, push token updates, address synchronization, and wallet import.",
            "key_types": [
              "DeviceHandler",
              "deviceHandler",
              "md.GetDeviceByIDRequest",
              "md.PostDeviceRegistrationRequest",
              "md.PutDeviceAddressesReq",
              "md.PostImportWalletReq"
            ],
            "functions": [
              "ResetDeviceByID",
              "Registration",
              "UpdatePushToken",
              "SyncAddresses",
              "ImportWallet",
              "NewDeviceHandler"
            ],
            "imports": [
              "context",
              "encoding/json",
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/preference"
            ],
            "side_effects": [
              "Logging information about device resets and errors"
            ],
            "risks": [
              "Potential exposure of sensitive data in logs",
              "Improper error handling could lead to information leakage"
            ],
            "complexity": "medium"
          },
          "handlers/external_auth.go": {
            "language": "Go",
            "purpose": "Handles external authentication processes, including exchanging auth codes and revoking tokens.",
            "key_types": [
              "ExternalAuthHandler",
              "externalAuthHandler",
              "xauth.Service"
            ],
            "functions": [
              "ExchangeAuthCode",
              "RevokeToken",
              "NewTwitterHandler"
            ],
            "imports": [
              "net/http",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/xauth"
            ],
            "side_effects": [
              "Sends HTTP responses based on authentication processes."
            ],
            "risks": [
              "Potential exposure of sensitive authentication data if not handled properly."
            ],
            "complexity": "medium"
          },
          "handlers/locationhandler.go": {
            "language": "Go",
            "purpose": "Handles location-related requests and responses for a web service.",
            "key_types": [
              "LocationHandler",
              "locationHandler",
              "models.GetLocationRequest"
            ],
            "functions": [
              "PublicGetLocation",
              "InternalGetLocation",
              "InternalDownloadDB",
              "lookupLocation",
              "NewLocationHandler"
            ],
            "imports": [
              "errors",
              "net/http",
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/location"
            ],
            "side_effects": [
              "Logs debug information when looking up location."
            ],
            "risks": [
              "Potential exposure of sensitive information through error messages."
            ],
            "complexity": "medium"
          },
          "handlers/moonpay.go": {
            "language": "Go",
            "purpose": "Handles Moonpay URL signing requests",
            "key_types": [
              "MoonpayHandler",
              "moonpayHandler",
              "models.MoonpaySigningRequest",
              "models.MoonpaySigningResponse"
            ],
            "functions": [
              "SignURL",
              "NewMoonpayHandler"
            ],
            "imports": [
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/moonpay"
            ],
            "risks": [
              "Potential for error handling issues if external service fails",
              "Possible exposure of sensitive data in error messages"
            ],
            "complexity": "medium"
          },
          "handlers/network.go": {
            "language": "Go",
            "purpose": "This file defines a network handler for managing network-related operations in a web application.",
            "key_types": [
              "NetworkHandler",
              "networkHandler",
              "models.Network",
              "models.DApp",
              "models.Contract"
            ],
            "functions": [
              "GetDApps",
              "GetNetworkConfig",
              "getDAppsPublic",
              "getContractsPublic",
              "GetContracts",
              "GetAllConfigs"
            ],
            "imports": [
              "context",
              "encoding/json",
              "fmt",
              "net/http",
              "slices",
              "sort",
              "sync",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/hashicorp/go-version",
              "github.com/labstack/echo/v4",
              "github.com/mitchellh/mapstructure",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Modifies cache for DApps and contracts based on user agent information."
            ],
            "complexity": "medium"
          },
          "handlers/releasecandidate.go": {
            "language": "Go",
            "purpose": "Handles release candidate features and configurations for a web service.",
            "key_types": [
              "ReleaseCandidateHandler",
              "releaseCandidateHandler",
              "models.CheckAllowFeatureRequest",
              "models.PostFeatureConfigRequest",
              "models.PostWhitelistFeaturesRequest",
              "models.PostSetConfigForDeviceRequest",
              "models.GetCountWhitelistDevices",
              "models.OkResponse"
            ],
            "functions": [
              "CheckAllowFeature",
              "SetFeatureConfig",
              "SetWhitelistFeatures",
              "SetConfigForDevice",
              "CountWhitelistDevices",
              "NewReleaseCandidateHandler"
            ],
            "imports": [
              "fmt",
              "net/http",
              "strconv",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/releasecandidate"
            ],
            "complexity": "medium"
          },
          "handlers/trusted_domain.go": {
            "language": "Go",
            "purpose": "Handles trusted domain operations including retrieval, saving, and deletion of trusted domains.",
            "key_types": [
              "TrustedDomainHandler",
              "trustedDomainHandler",
              "md.TrustedDomain",
              "md.SaveTrustedDomainBatchRequest"
            ],
            "functions": [
              "PublicGetByDomain",
              "PublicGetAll",
              "InternalSave",
              "InternalSaveBatch",
              "InternalGetByDomain",
              "InternalDeleteByDomain",
              "InternalGetList",
              "validateAndNormalizeDomain",
              "normalizeDomain"
            ],
            "imports": [
              "errors",
              "net/http",
              "net/url",
              "regexp",
              "strings",
              "github.com/labstack/echo/v4",
              "gorm.io/gorm",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/trusteddomain"
            ],
            "side_effects": [
              "Modifies the state of trusted domains in the database.",
              "May alter the visibility of domains based on blacklist checks."
            ],
            "risks": [
              "Potential exposure of sensitive domain information if not properly validated.",
              "Improper handling of errors may lead to information leakage."
            ],
            "complexity": "medium"
          }
        }
      },
      "httpclient": {
        "path": "httpclient",
        "purpose": "This folder/module is responsible for defining various HTTP clients for interacting with different services such as Athena, Mercury, and device management.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "athena.go",
          "device.go",
          "internal_client.go",
          "mercury.go",
          "tracking.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac"
        ],
        "architecture": "The folder follows a modular architecture pattern, with each file representing a specific client interface and its implementation, encapsulating related functionalities and dependencies.",
        "file_summaries": {
          "httpclient/athena.go": {
            "language": "Go",
            "purpose": "This file defines an HTTP client for linking accounts to the Athena service.",
            "key_types": [
              "AthenaClientCfg",
              "Athena",
              "athenaClient"
            ],
            "functions": [
              "NewAthenaClient",
              "LinkAccount"
            ],
            "imports": [
              "bytes",
              "context",
              "encoding/json",
              "fmt",
              "net/http",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "complexity": "medium"
          },
          "httpclient/device.go": {
            "language": "Go",
            "purpose": "This file defines a DeviceClient interface and its implementation for managing device-related operations via HTTP requests.",
            "key_types": [
              "DeviceClient",
              "deviceClient",
              "InternalClient",
              "InternalClientConfig"
            ],
            "functions": [
              "GetDeviceByID",
              "ResetDeviceByID",
              "MigrateNotificationSettings",
              "Registration",
              "UpdatePushToken",
              "CreateDevice",
              "SyncDeviceAddresses",
              "NewDeviceClient"
            ],
            "imports": [
              "bytes",
              "context",
              "encoding/json",
              "fmt",
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Logs a warning if a device is not registered during address synchronization."
            ],
            "risks": [
              "Potential exposure of sensitive information if the SecretKey is not handled securely."
            ],
            "complexity": "medium"
          },
          "httpclient/internal_client.go": {
            "language": "Go",
            "purpose": "This file implements an internal HTTP client with HMAC authentication for making requests.",
            "key_types": [
              "InternalClientConfig",
              "InternalClient"
            ],
            "functions": [
              "SetUserAgent",
              "doRequestWithHMacAuth",
              "doRequest",
              "doRequestWithHMacAuthReturnRaw"
            ],
            "imports": [
              "encoding/json",
              "fmt",
              "io",
              "net/http",
              "strings",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac"
            ],
            "side_effects": [
              "Logs request details and errors",
              "Modifies HTTP request headers"
            ],
            "risks": [
              "Potential exposure of SecretKey if not handled securely",
              "Improper error handling may lead to information leakage"
            ],
            "complexity": "medium"
          },
          "httpclient/mercury.go": {
            "language": "Go",
            "purpose": "This file defines a MercuryClient interface and its implementation for sending notifications via HTTP.",
            "key_types": [
              "MercuryClient",
              "mercuryClient",
              "InternalClient",
              "InternalClientConfig",
              "PostPushNotificationRequest"
            ],
            "functions": [
              "SendNotification",
              "NewMercuryClient"
            ],
            "imports": [
              "bytes",
              "context",
              "encoding/json",
              "fmt",
              "net/http",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Logs errors when marshaling JSON or creating HTTP requests."
            ],
            "risks": [
              "Potential exposure of sensitive information in logs if errors occur."
            ],
            "complexity": "medium"
          },
          "httpclient/tracking.go": {
            "language": "Go",
            "purpose": "Provides a client for tracking events with asynchronous and synchronous methods.",
            "key_types": [
              "TrackingClient",
              "trackingClient",
              "InternalClient",
              "InternalClientConfig"
            ],
            "functions": [
              "NewTracingClient",
              "Track",
              "TrackAsync"
            ],
            "imports": [
              "bytes",
              "context",
              "encoding/base64",
              "encoding/json",
              "fmt",
              "net/http"
            ],
            "side_effects": [
              "Asynchronous tracking may lead to race conditions if not handled properly."
            ],
            "risks": [
              "Exposing API key in logs or error messages if not handled securely."
            ],
            "complexity": "medium"
          }
        }
      },
      "middleware": {
        "path": "middleware",
        "purpose": "This folder contains middleware components for an Echo web server, handling various aspects such as authentication, error handling, request tracking, and metrics.",
        "languages": {
          "Go": 7
        },
        "key_modules": [
          "custom_requests_total_prometheus.go",
          "error_handler.go",
          "internal_auth.go",
          "network_api_v1_checking.go",
          "tracking_internal_api.go",
          "user_agent_parsing.go",
          "wallet_auth.go"
        ],
        "dependencies": [
          "github.com/labstack/echo-contrib/echoprometheus",
          "github.com/labstack/echo/v4",
          "github.com/prometheus/client_golang/prometheus",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ecosystem-go-common/validation",
          "github.com/golang-jwt/jwt",
          "github.com/jackc/pgconn",
          "golang.org/x/oauth2",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
        ],
        "architecture": "The folder follows a modular architecture pattern, where each middleware component is responsible for a specific functionality, promoting separation of concerns and reusability.",
        "file_summaries": {
          "middleware/custom_requests_total_prometheus.go": {
            "language": "Go",
            "purpose": "This file defines a middleware for tracking custom HTTP requests using Prometheus metrics.",
            "key_types": [
              "echo.MiddlewareFunc",
              "prometheus.CounterVec",
              "prometheus.CounterOpts",
              "models.AgentInfo"
            ],
            "functions": [
              "NewCustomRequestsTotalPrometheus"
            ],
            "imports": [
              "github.com/labstack/echo-contrib/echoprometheus",
              "github.com/labstack/echo/v4",
              "github.com/prometheus/client_golang/prometheus",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Registers a new Prometheus counter metric",
              "Logs fatal errors if metric registration fails"
            ],
            "risks": [
              "Potential logging of sensitive user agent information"
            ],
            "complexity": "medium"
          },
          "middleware/error_handler.go": {
            "language": "Go",
            "purpose": "Handles errors globally for an Echo web server, formatting error responses based on the type of error encountered.",
            "key_types": [
              "echo.Context",
              "mErrs.Error",
              "jwt.ValidationError",
              "pgconn.PgError",
              "validation.Errors"
            ],
            "functions": [
              "GlobalErrorHandler",
              "Init"
            ],
            "imports": [
              "context",
              "errors",
              "fmt",
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ecosystem-go-common/validation",
              "github.com/golang-jwt/jwt",
              "github.com/jackc/pgconn",
              "github.com/labstack/echo/v4",
              "github.com/labstack/echo/v4/middleware",
              "golang.org/x/oauth2"
            ],
            "side_effects": [
              "Logs error details to the context logger",
              "Sends JSON response to the client with error details"
            ],
            "risks": [
              "Potential exposure of sensitive error details in logs",
              "Improper handling of authentication errors could lead to unauthorized access"
            ],
            "complexity": "medium"
          },
          "middleware/internal_auth.go": {
            "language": "Go",
            "purpose": "This file implements HMAC authentication middleware for validating HMAC signatures in HTTP requests.",
            "key_types": [
              "echo.MiddlewareFunc",
              "hmac.Config",
              "http.Request",
              "error"
            ],
            "functions": [
              "HmacAuthentication"
            ],
            "imports": [
              "fmt",
              "net/http",
              "regexp",
              "strings",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac"
            ],
            "side_effects": [
              "Modifies HTTP request handling by adding authentication checks."
            ],
            "risks": [
              "Potential for unauthorized access if HMAC validation fails."
            ],
            "complexity": "medium"
          },
          "middleware/network_api_v1_checking.go": {
            "language": "Go",
            "purpose": "Defines a middleware function to check if the API version is v1 and sets a context key accordingly.",
            "key_types": [
              "string",
              "echo.Context",
              "echo.MiddlewareFunc",
              "echo.HandlerFunc"
            ],
            "functions": [
              "NetworkAPIV1CheckingMiddleware"
            ],
            "imports": [
              "strings",
              "github.com/labstack/echo/v4"
            ],
            "side_effects": [
              "Sets a context key in the echo.Context"
            ],
            "complexity": "medium"
          },
          "middleware/tracking_internal_api.go": {
            "language": "Go",
            "purpose": "Defines a middleware for tracking API requests in an Echo web framework application.",
            "key_types": [
              "echo.MiddlewareFunc",
              "tracking.Service",
              "tracking.TrackingRequest",
              "tracking.Event"
            ],
            "functions": [
              "NewTrackingInternalAPIMiddleware"
            ],
            "imports": [
              "context",
              "time",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking"
            ],
            "side_effects": [
              "Asynchronously tracks API request data using the tracking service."
            ],
            "risks": [
              "Potential exposure of sensitive request data if not handled properly."
            ],
            "complexity": "medium"
          },
          "middleware/user_agent_parsing.go": {
            "language": "Go",
            "purpose": "This file provides middleware for parsing user agent strings in a web application.",
            "key_types": [
              "echo.MiddlewareFunc",
              "models.AgentInfo"
            ],
            "functions": [
              "getAgentInfo",
              "NewUserAgentParsing"
            ],
            "imports": [
              "strings",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Modifies the context with parsed user agent information"
            ],
            "complexity": "medium"
          },
          "middleware/wallet_auth.go": {
            "language": "Go",
            "purpose": "This file implements middleware for verifying wallet signatures in HTTP requests.",
            "key_types": [
              "hmac.Config",
              "echo.MiddlewareFunc",
              "error"
            ],
            "functions": [
              "VerifyWalletSignature",
              "newClockSkewValidator"
            ],
            "imports": [
              "fmt",
              "math",
              "net/http",
              "sort",
              "strings",
              "time",
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "side_effects": [
              "Logs request information"
            ],
            "risks": [
              "Potential exposure of sensitive information if logging is not handled securely"
            ],
            "complexity": "medium"
          }
        }
      },
      "migrations": {
        "path": "migrations",
        "purpose": "This folder contains SQL migration scripts responsible for setting up and modifying the database schema for a blockchain-related application.",
        "languages": {
          "SQL": 6
        },
        "key_modules": [
          "20230407150000_init.sql",
          "20231005150000_add_announcement.sql",
          "20240111120000_alter_preferences.sql",
          "20240206110000_add_trusted_domain.sql",
          "20240410140000_add_dapp_highlight.sql",
          "20240808130000_alter_preferences.sql"
        ],
        "dependencies": [],
        "architecture": "The folder follows a version-controlled migration pattern, where each SQL file represents a specific change to the database schema, allowing for incremental updates and rollbacks.",
        "file_summaries": {
          "migrations/20230407150000_init.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL commands to set up database schema and initial data for a blockchain-related application.",
            "key_types": [
              "networks",
              "contracts",
              "d_apps",
              "commons",
              "code_versions",
              "contract_type",
              "dapp_url"
            ],
            "functions": [
              "CREATE EXTENSION",
              "CREATE TABLE",
              "DROP TYPE",
              "CREATE TYPE",
              "CREATE INDEX",
              "INSERT INTO"
            ],
            "imports": [],
            "side_effects": [
              "Modifies the database schema by creating tables and types.",
              "Inserts initial data into the tables."
            ],
            "risks": [
              "Potential SQL injection if user input is not properly sanitized.",
              "Data integrity risks if foreign key constraints are not enforced."
            ],
            "complexity": "medium"
          },
          "migrations/20231005150000_add_announcement.sql": {
            "language": "SQL",
            "purpose": "This file defines database migrations for creating and dropping tables related to announcements, special offers, and user preferences.",
            "key_types": [
              "UUID",
              "VARCHAR",
              "TEXT",
              "JSONB",
              "TIMESTAMP"
            ],
            "functions": [
              "CREATE TABLE",
              "CREATE INDEX",
              "DROP TABLE"
            ],
            "imports": [],
            "side_effects": [
              "Creates tables and indexes in the database",
              "Modifies the database schema"
            ],
            "complexity": "medium"
          },
          "migrations/20240111120000_alter_preferences.sql": {
            "language": "SQL",
            "purpose": "This file contains migration scripts to alter the preferences table in a database.",
            "key_types": [
              "TABLE",
              "COLUMN",
              "INDEX"
            ],
            "functions": [
              "ALTER TABLE",
              "CREATE INDEX",
              "DELETE"
            ],
            "imports": [],
            "side_effects": [
              "Modifies the database schema",
              "Changes default values",
              "Creates and drops constraints"
            ],
            "risks": [
              "Potential data loss during deletion",
              "Risk of violating constraints if not handled properly"
            ],
            "complexity": "medium"
          },
          "migrations/20240206110000_add_trusted_domain.sql": {
            "language": "SQL",
            "purpose": "Defines database schema for trusted domains and quick access D apps.",
            "key_types": [
              "TABLE",
              "VARCHAR",
              "BOOLEAN",
              "INTEGER",
              "TIMESTAMP",
              "JSONB"
            ],
            "functions": [
              "CREATE TABLE",
              "CREATE INDEX",
              "DROP TABLE"
            ],
            "imports": [],
            "side_effects": [
              "Creates tables in the database",
              "Creates an index on a table"
            ],
            "complexity": "medium"
          },
          "migrations/20240410140000_add_dapp_highlight.sql": {
            "language": "SQL",
            "purpose": "This file contains database migration scripts to modify the schema of a PostgreSQL database.",
            "key_types": [
              "TABLE",
              "INDEX",
              "COLLATION",
              "EXTENSION"
            ],
            "functions": [
              "CREATE EXTENSION",
              "CREATE COLLATION",
              "ALTER TABLE",
              "CREATE INDEX",
              "CREATE TABLE"
            ],
            "imports": [],
            "side_effects": [
              "Modifies the database schema",
              "Creates new tables and indexes"
            ],
            "risks": [
              "Potential data loss if not properly backed up before migration"
            ],
            "complexity": "medium"
          },
          "migrations/20240808130000_alter_preferences.sql": {
            "language": "SQL",
            "purpose": "This file contains migration scripts to create and drop an index on the preferences table.",
            "key_types": [
              "index"
            ],
            "functions": [
              "CREATE INDEX",
              "DROP INDEX"
            ],
            "imports": [],
            "side_effects": [
              "Modifies the database schema by adding or removing an index."
            ],
            "risks": [
              "Potential performance impact on the database during index creation or deletion."
            ],
            "complexity": "low"
          }
        }
      },
      "models": {
        "path": "models",
        "purpose": "Defines data structures and methods for various components of the application, including user management, notifications, blockchain interactions, and more.",
        "languages": {
          "Go": 30
        },
        "key_modules": [
          "account.go",
          "announcement.go",
          "contract.go",
          "notification.go",
          "useragent.go"
        ],
        "dependencies": [
          "github.com/ethereum/go-ethereum/common",
          "github.com/mitchellh/mapstructure",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
        ],
        "architecture": "The folder follows a modular architecture pattern, where each file represents a specific domain model or functionality, promoting separation of concerns and maintainability.",
        "file_summaries": {
          "models/account.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling user information and token management in an authentication context.",
            "key_types": [
              "GetSMUserInfoRequest",
              "GetSMUserInfoResponse",
              "LinkAccountRequest",
              "RefreshTokenRequest",
              "RevokeTokenRequest"
            ],
            "functions": [
              "ToAuthOptions"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "models/announcement.go": {
            "language": "Go",
            "purpose": "Defines models and structures for handling announcements and related data.",
            "key_types": [
              "Buttons",
              "Announcement",
              "PublicAnnouncementListItem",
              "PublicAnnouncement",
              "ScheduleNewAnnouncementRequest",
              "ScheduleNewSpecialOfferRequest",
              "SpecialOffer"
            ],
            "functions": [
              "Scan",
              "Value",
              "createNotificationData",
              "ToPushNotificationRequest",
              "ToTargetPushNotificationRequest",
              "ToPublicListItem",
              "ToPublicFullContent",
              "ToAnnouncement",
              "ToAnnouncement (ScheduleNewSpecialOfferRequest)"
            ],
            "imports": [
              "database/sql/driver",
              "encoding/json",
              "errors",
              "mime/multipart",
              "strconv",
              "strings",
              "time",
              "github.com/ethereum/go-ethereum/common",
              "github.com/mitchellh/mapstructure",
              "github.com/rs/zerolog/log"
            ],
            "side_effects": [
              "Logs an error if buttons_json_str is not a valid JSON string."
            ],
            "complexity": "medium"
          },
          "models/app.go": {
            "language": "Go",
            "purpose": "Defines data structures for managing code versioning and updates.",
            "key_types": [
              "CodeVersion",
              "UpdateCodeVersionRequest",
              "EnvironmentConfig"
            ],
            "functions": [
              "ToCodeVersion"
            ],
            "imports": [],
            "complexity": "low"
          },
          "models/binance.go": {
            "language": "Go",
            "purpose": "Defines data structures for signing requests and responses in a Binance API context.",
            "key_types": [
              "BinanceSignRequest",
              "BinanceSignResponse"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "models/blacklist.go": {
            "language": "Go",
            "purpose": "Defines a request structure for getting blacklist sites.",
            "key_types": [
              "GetBlacklistSitesReq",
              "Paging",
              "AgentInfo"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "models/chain.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for a blockchain chain model.",
            "key_types": [
              "ChainConfig",
              "Network",
              "Contract",
              "DApp",
              "GasPrice"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "models/common.go": {
            "language": "Go",
            "purpose": "Defines data structures for common models used in the application.",
            "key_types": [
              "Common",
              "SupportURL",
              "KnownContract",
              "KnownContracts"
            ],
            "functions": [],
            "imports": [
              "encoding/json",
              "time"
            ],
            "complexity": "medium"
          },
          "models/contract.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling smart contract information and metadata.",
            "key_types": [
              "ContractType",
              "ERC721Type",
              "ERC1155Type",
              "Metadata",
              "Contract",
              "ContractResponse",
              "ContractFilter",
              "CreateContractRequest",
              "UpdateContractRequest",
              "GetContractByIDRequest",
              "ERC20Metadata",
              "ERC721Metadata",
              "ERC1155Metadata",
              "DAppURL",
              "DAppURLSlice",
              "StringSlice",
              "InjectScript"
            ],
            "functions": [
              "Scan",
              "Value",
              "MarshalJSON",
              "UnmarshalJSON",
              "Copy",
              "ToMap",
              "ToContract"
            ],
            "imports": [
              "database/sql",
              "database/sql/driver",
              "encoding/json",
              "errors",
              "fmt",
              "strings",
              "time",
              "github.com/mitchellh/mapstructure",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "complexity": "medium"
          },
          "models/default.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling responses and pagination.",
            "key_types": [
              "OkResponse",
              "Paging",
              "Preload",
              "ListResponse"
            ],
            "functions": [
              "GetPage",
              "GetOffset",
              "GetLimit"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "models/device.go": {
            "language": "Go",
            "purpose": "Defines data structures for device management and requests related to devices.",
            "key_types": [
              "Device",
              "GetDeviceByIDRequest",
              "PostDeviceRegistrationRequest",
              "PutWalletDeviceUpdatePushToken",
              "PostImportWalletReq",
              "PutDeviceAddressesReq"
            ],
            "functions": [],
            "imports": [
              "time",
              "github.com/ethereum/go-ethereum/common"
            ],
            "complexity": "medium"
          },
          "models/external_auth.go": {
            "language": "Go",
            "purpose": "Defines data structures for handling OAuth authentication requests and responses.",
            "key_types": [
              "XExchangeAuthCodeReq",
              "XRefreshAccessTokenReq",
              "XAccessTokenInfo",
              "XAccessTokenRes",
              "OAuthConfig"
            ],
            "functions": [],
            "imports": [],
            "complexity": "medium"
          },
          "models/highlight.go": {
            "language": "Go",
            "purpose": "Defines data models and request/response structures for highlights in an application.",
            "key_types": [
              "Highlight",
              "InternalHighlightResponse",
              "GetHighlightRequest",
              "SaveHighlightRequest",
              "SaveHighlightBatchRequest",
              "GetHighlightsListResponse",
              "UpdateHighlightRequest",
              "UpdateHighlightBatchRequest",
              "GetHighlightByIDRequest"
            ],
            "functions": [
              "ToInternalResponse",
              "ToDApp",
              "ToUpdateMap"
            ],
            "imports": [
              "time",
              "github.com/mitchellh/mapstructure"
            ],
            "complexity": "medium"
          },
          "models/ip_locations.go": {
            "language": "Go",
            "purpose": "Defines data models for IP location information and a request structure for fetching location data based on an IP address.",
            "key_types": [
              "IPLocation",
              "GetLocationRequest"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "models/moonpay.go": {
            "language": "Go",
            "purpose": "Defines data structures for Moonpay signing requests and responses.",
            "key_types": [
              "MoonpaySigningRequest",
              "MoonpaySigningResponse"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "models/network.go": {
            "language": "Go",
            "purpose": "Defines the Network model and related request structures for managing blockchain network data.",
            "key_types": [
              "Network",
              "GasPrice",
              "GetNetworkRequest",
              "GetDAppsRequest",
              "GetContractsRequest",
              "NetworkFilter",
              "NetworkOrderBy",
              "CreateNetworkRequest",
              "UpdateNetworkRequest",
              "GetNetworkByIDRequest"
            ],
            "functions": [
              "GetCacheDApps",
              "GetCacheContracts",
              "ToMap",
              "ToNetWork"
            ],
            "imports": [
              "sync",
              "time",
              "github.com/mitchellh/mapstructure",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "complexity": "medium"
          },
          "models/notification.go": {
            "language": "Go",
            "purpose": "Defines data structures and constants for managing push notifications and their recipients.",
            "key_types": [
              "DeviceStatus",
              "PushRecipient",
              "DevicePlatform",
              "RecipientFilterField",
              "RecipientFilter",
              "Recipient",
              "Payload",
              "PostPushNotificationRequest"
            ],
            "functions": [
              "ParsePlatform"
            ],
            "imports": [
              "strings"
            ],
            "complexity": "medium"
          },
          "models/preference.go": {
            "language": "Go",
            "purpose": "Defines data models for user preferences and filters related to device preferences.",
            "key_types": [
              "Preference",
              "PreferenceFilter",
              "DevicePreferences"
            ],
            "functions": [
              "ToMap"
            ],
            "imports": [
              "time",
              "github.com/mitchellh/mapstructure"
            ],
            "complexity": "medium"
          },
          "models/quickaccess.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for managing quick access decentralized applications (DApps).",
            "key_types": [
              "QuickAccessDApp",
              "SaveQuickAccessDAppRequest",
              "InternalQuickAccessDAppResponse",
              "GetQuickAccessDAppByIDRequest",
              "SaveQuickAccessDAppBatchRequest",
              "GetQuickAccessListRequest",
              "SearchDAppRequest",
              "GetQuickAccessListResponse",
              "UpdateQuickAccessOrderRequest",
              "UpdateQuickAccessDAppRequest",
              "UpdateQuickAccessDAppBatchRequest"
            ],
            "functions": [
              "ToInternalResponse",
              "ToDApp",
              "ToUpdateMap",
              "ToUpdateMap (UpdateQuickAccessDAppRequest)",
              "ToUpdateMap (UpdateQuickAccessDAppBatchRequest)"
            ],
            "imports": [
              "time",
              "github.com/mitchellh/mapstructure"
            ],
            "complexity": "medium"
          },
          "models/ref_code.go": {
            "language": "Go",
            "purpose": "Defines models and structures for managing referral codes and wallets in a referral system.",
            "key_types": [
              "ReferralCode",
              "ReferralCodeFilter",
              "ReferralCodeOrderBy",
              "ReferralWallet",
              "ReferralWalletFilter",
              "ReferralWalletOrderBy",
              "SubmitSelfGenCode",
              "UpdateRefCodeStatus",
              "GetCodeByOwner",
              "GetReferralWalletsRequest",
              "GenerateCodeRequest",
              "SubmitReferralCodeRequest",
              "GetSubmittedRefCode",
              "VerifyReferralCode"
            ],
            "functions": [
              "ToMap (ReferralCodeFilter)",
              "ToMap (ReferralWalletFilter)",
              "ToReferralCode (SubmitSelfGenCode)"
            ],
            "imports": [
              "strings",
              "time",
              "github.com/mitchellh/mapstructure",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "complexity": "medium"
          },
          "models/releasecandidate.go": {
            "language": "Go",
            "purpose": "Defines request structures for feature management in a device context.",
            "key_types": [
              "CheckAllowFeatureRequest",
              "PostFeatureConfigRequest",
              "PostWhitelistFeaturesRequest",
              "PostSetConfigForDeviceRequest",
              "GetCountWhitelistDevices"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "models/trusted_domain.go": {
            "language": "Go",
            "purpose": "Defines data structures and request types for managing trusted domains.",
            "key_types": [
              "TrustedDomain",
              "GetTDMByDomainRequest",
              "SaveTrustedDomainBatchRequest",
              "TrustedDomainFilter",
              "TrustedDomainOrderBy",
              "GetListTDMRequest"
            ],
            "functions": [
              "ToMap"
            ],
            "imports": [
              "time",
              "github.com/mitchellh/mapstructure"
            ],
            "complexity": "medium"
          },
          "models/useragent.go": {
            "language": "Go",
            "purpose": "Defines a structure for user agent information and provides a method to check if the agent info is empty.",
            "key_types": [
              "AgentInfo"
            ],
            "functions": [
              "IsEmpty"
            ],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "pkg/announcement": {
        "path": "pkg/announcement",
        "purpose": "This folder/module is responsible for managing announcements, including scheduling, retrieving, and deleting announcements.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "announcement_svc.go",
          "config.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/getsentry/sentry-go",
          "github.com/h2non/filetype",
          "github.com/labstack/echo/v4",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "k8s.io/api/batch/v1",
          "k8s.io/api/core/v1",
          "k8s.io/apimachinery/pkg/api/resource",
          "k8s.io/apimachinery/pkg/apis/meta/v1",
          "k8s.io/client-go/kubernetes",
          "k8s.io/client-go/rest",
          "k8s.io/client-go/tools/clientcmd",
          "k8s.io/client-go/util/homedir",
          "github.com/axieinfinity/ronin-wallet-manager/httpclient",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/gcs",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/worker",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating the announcement management logic within dedicated service and configuration files.",
        "file_summaries": {
          "pkg/announcement/announcement_svc.go": {
            "language": "Go",
            "purpose": "This file implements a service for managing announcements, including scheduling, retrieving, and deleting announcements.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "Announcement"
            ],
            "functions": [
              "GetByID",
              "GetListAsAdmin",
              "GetListAsUser",
              "ScheduleNewAnnouncement",
              "ScheduleNewSpecialOffer",
              "processImage",
              "processTargetAddresses"
            ],
            "imports": [
              "bytes",
              "context",
              "encoding/csv",
              "errors",
              "flag",
              "fmt",
              "image",
              "mime/multipart",
              "path/filepath",
              "slices",
              "strings",
              "sync",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/getsentry/sentry-go",
              "github.com/h2non/filetype",
              "github.com/labstack/echo/v4",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "k8s.io/api/batch/v1",
              "k8s.io/api/core/v1",
              "k8s.io/apimachinery/pkg/api/resource",
              "k8s.io/apimachinery/pkg/apis/meta/v1",
              "k8s.io/client-go/kubernetes",
              "k8s.io/client-go/rest",
              "k8s.io/client-go/tools/clientcmd",
              "k8s.io/client-go/util/homedir",
              "github.com/axieinfinity/ronin-wallet-manager/httpclient",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/gcs",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/worker",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Uploads images to GCS",
              "Deletes images from GCS on error"
            ],
            "risks": [
              "Potential for file size exceed errors",
              "Potential for unsupported media type errors"
            ],
            "complexity": "medium"
          },
          "pkg/announcement/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for an announcement service, including communication, storage, and Kubernetes settings.",
            "key_types": [
              "CommunicationServiceCfg",
              "StorageConfig",
              "BankerConfig",
              "EnvConfig",
              "K8sConfig",
              "Config"
            ],
            "functions": [],
            "imports": [
              "time",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/gcs",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/worker"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/binance": {
        "path": "pkg/binance",
        "purpose": "Handles Binance-specific functionalities including configuration and signing payloads.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "service.go"
        ],
        "dependencies": [
          "github.com/decred/dcrd/dcrec/secp256k1/v4"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating configuration and service logic related to Binance operations.",
        "file_summaries": {
          "pkg/binance/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for Binance with a private key.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/binance/service.go": {
            "language": "Go",
            "purpose": "Provides a service for signing payloads using ECDSA.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "ecdsa.PrivateKey"
            ],
            "functions": [
              "Sign",
              "NewService"
            ],
            "imports": [
              "context",
              "crypto/ecdsa",
              "crypto/rand",
              "encoding/base64",
              "github.com/decred/dcrd/dcrec/secp256k1/v4"
            ],
            "risks": [
              "Exposure of private key if not handled securely"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/blacklist": {
        "path": "pkg/blacklist",
        "purpose": "Responsible for managing blacklists and feature flags based on user agent information.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "service.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-manager/models"
        ],
        "architecture": "The folder follows a service-oriented architecture, encapsulating configuration and service logic related to blacklisting in separate files.",
        "file_summaries": {
          "pkg/blacklist/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for managing blacklists and feature flags.",
            "key_types": [
              "BlacklistConfig",
              "Versions",
              "FeatureFlagConfig"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/blacklist/service.go": {
            "language": "Go",
            "purpose": "Provides a service for managing a blacklist of sites and feature flags based on user agent information.",
            "key_types": [
              "Service",
              "service",
              "BlacklistConfig",
              "FeatureFlagConfig",
              "models.AgentInfo"
            ],
            "functions": [
              "NewBlacklistService",
              "GetBlacklistSites",
              "GetHiddenTabs",
              "ShouldHideAllSpotlight",
              "ShouldShowQuestComingSoon",
              "ShouldEnableMoonpay",
              "ShouldEnableTransak",
              "ShouldDisableNFTTab",
              "DisableNFTTransfer",
              "DisableHomeBanner",
              "isCfgAvailable"
            ],
            "imports": [
              "strings",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/crypto/hmac": {
        "path": "pkg/crypto/hmac",
        "purpose": "Responsible for HMAC (Hash-based Message Authentication Code) functionality including signing, validation, and configuration.",
        "languages": {
          "Go": 6
        },
        "key_modules": [
          "config.go",
          "funcs.go",
          "funcs_test.go",
          "hmac.go",
          "hmac_test.go",
          "init.go"
        ],
        "dependencies": [
          "crypto/hmac",
          "crypto/sha256",
          "crypto/sha512",
          "encoding/base64",
          "errors",
          "fmt",
          "sort",
          "strings",
          "testing",
          "time",
          "sync",
          "net/http",
          "math"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating HMAC-related functionalities into distinct files for configuration, signing, validation, and testing, promoting separation of concerns.",
        "file_summaries": {
          "pkg/crypto/hmac/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for HMAC with normalization of whitelist addresses.",
            "key_types": [
              "Config"
            ],
            "functions": [
              "NormalizeWhitelistAddresses"
            ],
            "imports": [
              "strings"
            ],
            "side_effects": [
              "Modifies the WhitelistAddresses field of the Config struct."
            ],
            "complexity": "low"
          },
          "pkg/crypto/hmac/funcs.go": {
            "language": "Go",
            "purpose": "Provides HMAC signing functions using SHA256 and SHA512 algorithms.",
            "key_types": [
              "[]byte",
              "map[string]string",
              "error"
            ],
            "functions": [
              "SHA256",
              "SHA512",
              "Sign"
            ],
            "imports": [
              "crypto/hmac",
              "crypto/sha256",
              "crypto/sha512",
              "encoding/base64",
              "errors",
              "fmt",
              "sort",
              "strings"
            ],
            "risks": [
              "Potential for misuse of cryptographic functions if not used correctly."
            ],
            "complexity": "medium"
          },
          "pkg/crypto/hmac/funcs_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the HMAC signing functionality.",
            "key_types": [
              "struct",
              "map",
              "string",
              "byte"
            ],
            "functions": [
              "TestSign"
            ],
            "imports": [
              "testing",
              "time"
            ],
            "complexity": "medium"
          },
          "pkg/crypto/hmac/hmac.go": {
            "language": "Go",
            "purpose": "Provides HMAC validation functionality including signature verification and clock skew validation.",
            "key_types": [
              "HMAC",
              "Config"
            ],
            "functions": [
              "New",
              "validateClockSkew",
              "ValidateSignature"
            ],
            "imports": [
              "encoding/base64",
              "errors",
              "fmt",
              "math",
              "net/http",
              "sort",
              "time"
            ],
            "side_effects": [
              "Prints error messages to console if parsing time fails."
            ],
            "risks": [
              "Potential for time manipulation attacks if clock skew is not properly validated."
            ],
            "complexity": "medium"
          },
          "pkg/crypto/hmac/hmac_test.go": {
            "language": "Go",
            "purpose": "Unit tests for HMAC validation functions, checking clock skew and signature validation.",
            "key_types": [
              "Config",
              "HMAC"
            ],
            "functions": [
              "TestHMAC_validateClockSkew",
              "TestHMAC_ValidateSignature"
            ],
            "imports": [
              "testing",
              "time"
            ],
            "side_effects": [
              "None"
            ],
            "risks": [
              "Potential exposure of sensitive data due to redacted values."
            ],
            "complexity": "medium"
          },
          "pkg/crypto/hmac/init.go": {
            "language": "Go",
            "purpose": "This file initializes a singleton instance of the HMAC structure with a configuration.",
            "key_types": [
              "HMAC",
              "Config"
            ],
            "functions": [
              "init",
              "InitInstance"
            ],
            "imports": [
              "sync"
            ],
            "side_effects": [
              "Initializes a global instance of HMAC",
              "Sets global configuration"
            ],
            "risks": [
              "Potential race conditions if InitInstance is called concurrently without proper synchronization"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/dapp": {
        "path": "pkg/dapp",
        "purpose": "Responsible for managing decentralized applications (dApps) including configuration and service operations.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "d_app_svc.go"
        ],
        "dependencies": [
          "github.com/getsentry/sentry-go",
          "github.com/hashicorp/go-version",
          "github.com/jellydator/ttlcache/v3",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating configuration and service logic for dApps.",
        "file_summaries": {
          "pkg/dapp/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for a decentralized application.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/dapp/d_app_svc.go": {
            "language": "Go",
            "purpose": "This file defines a service for managing quick access decentralized applications (dApps) and highlights, including CRUD operations and caching mechanisms.",
            "key_types": [
              "Service",
              "svc",
              "Config"
            ],
            "functions": [
              "Save",
              "SaveBatch",
              "Update",
              "UpdateBatch",
              "GetList",
              "GetAll",
              "GetByID",
              "DeleteByID",
              "UpdateOrder",
              "SaveHighlight",
              "SaveBatchHighlight",
              "UpdateHighlight",
              "UpdateBatchHighlight",
              "GetAllHighlight",
              "GetHighlightByID",
              "DeleteHighlightByID"
            ],
            "imports": [
              "context",
              "fmt",
              "slices",
              "sync",
              "time",
              "github.com/getsentry/sentry-go",
              "github.com/hashicorp/go-version",
              "github.com/jellydator/ttlcache/v3",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Publishing messages to refresh cache asynchronously"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/device": {
        "path": "pkg/device",
        "purpose": "Responsible for managing device-related services and configurations.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "service.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-manager/httpclient",
          "github.com/ethereum/go-ethereum/common",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
        ],
        "architecture": "The folder follows a service-oriented architecture, encapsulating device management functionalities and configurations in separate files.",
        "file_summaries": {
          "pkg/device/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for device services.",
            "key_types": [
              "ServiceConfig",
              "Config"
            ],
            "functions": [],
            "imports": [
              "github.com/axieinfinity/ronin-wallet-manager/httpclient"
            ],
            "complexity": "low"
          },
          "pkg/device/service.go": {
            "language": "Go",
            "purpose": "Provides a service for managing devices, including operations like getting, resetting, and creating devices.",
            "key_types": [
              "Service",
              "service",
              "Config"
            ],
            "functions": [
              "GetDeviceByID",
              "ResetDeviceByID",
              "MigrateNotificationSettings",
              "Registration",
              "UpdatePushToken",
              "CreateDevice",
              "SyncDeviceAddresses",
              "NewService"
            ],
            "imports": [
              "context",
              "strings",
              "github.com/ethereum/go-ethereum/common",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/httpclient",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/gcs": {
        "path": "pkg/gcs",
        "purpose": "Responsible for interacting with Google Cloud Storage, including file uploads, deletions, and downloads.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "service.go"
        ],
        "dependencies": [
          "cloud.google.com/go/storage",
          "github.com/rs/zerolog/log"
        ],
        "architecture": "The folder follows a service-oriented architecture, encapsulating configuration and service logic for Google Cloud Storage operations.",
        "file_summaries": {
          "pkg/gcs/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for Google Cloud Storage.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/gcs/service.go": {
            "language": "Go",
            "purpose": "Provides a service for uploading, deleting, and downloading files to/from Google Cloud Storage.",
            "key_types": [
              "Service",
              "service",
              "Config"
            ],
            "functions": [
              "UploadFile",
              "DeleteFile",
              "DownloadFile",
              "NewService"
            ],
            "imports": [
              "context",
              "fmt",
              "io",
              "time",
              "cloud.google.com/go/storage",
              "github.com/rs/zerolog/log"
            ],
            "side_effects": [
              "Creates and manages Google Cloud Storage client",
              "Interacts with external storage service"
            ],
            "risks": [
              "Potential exposure of sensitive data if file URLs are not properly secured"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/helper": {
        "path": "pkg/helper",
        "purpose": "Provides various helper functions for encryption, file handling, token generation, and utility operations.",
        "languages": {
          "Go": 8
        },
        "key_modules": [
          "aes.go",
          "binder.go",
          "hmac_token.go",
          "pointer.go",
          "random.go",
          "ronin.go",
          "slice.go",
          "tls.go"
        ],
        "dependencies": [
          "crypto/aes",
          "crypto/cipher",
          "crypto/rand",
          "crypto/sha256",
          "encoding/base64",
          "encoding/json",
          "io",
          "fmt",
          "mime/multipart",
          "reflect",
          "strings",
          "github.com/labstack/echo/v4",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac",
          "github.com/ethereum/go-ethereum/common",
          "github.com/ethereum/go-ethereum/common/hexutil",
          "github.com/ethereum/go-ethereum/crypto",
          "crypto/tls",
          "crypto/x509"
        ],
        "architecture": "The folder follows a modular architecture pattern, with each file providing specific utility functions related to encryption, file handling, and data manipulation.",
        "file_summaries": {
          "pkg/helper/aes.go": {
            "language": "Go",
            "purpose": "Provides helper functions for AES encryption.",
            "key_types": [
              "string",
              "[]byte",
              "interface{}"
            ],
            "functions": [
              "hashKey",
              "EncryptEAS"
            ],
            "imports": [
              "crypto/aes",
              "crypto/cipher",
              "crypto/rand",
              "crypto/sha256",
              "encoding/base64",
              "encoding/json",
              "io"
            ],
            "side_effects": [
              "Generates random initialization vector (IV) for encryption."
            ],
            "risks": [
              "Potential exposure of sensitive data if the key is weak or compromised."
            ],
            "complexity": "medium"
          },
          "pkg/helper/binder.go": {
            "language": "Go",
            "purpose": "Provides helper functions for binding multipart file uploads in an Echo web framework context.",
            "key_types": [
              "BindFunc",
              "multipart.FileHeader",
              "echo.Context"
            ],
            "functions": [
              "BindFunc.Bind",
              "NewBindWithHeaders",
              "NewBindFile",
              "echoBindFile",
              "getFiles"
            ],
            "imports": [
              "fmt",
              "mime/multipart",
              "reflect",
              "strings",
              "github.com/labstack/echo/v4"
            ],
            "side_effects": [
              "Modifies the provided struct by binding uploaded files to its fields."
            ],
            "risks": [
              "Potential for reflection-based vulnerabilities if untrusted input is processed."
            ],
            "complexity": "medium"
          },
          "pkg/helper/hmac_token.go": {
            "language": "Go",
            "purpose": "Generates an HMAC access token for authentication purposes.",
            "key_types": [
              "string",
              "error"
            ],
            "functions": [
              "GenerateHMACAccessToken"
            ],
            "imports": [
              "fmt",
              "strings",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac"
            ],
            "risks": [
              "Potential exposure of secret if not handled properly"
            ],
            "complexity": "medium"
          },
          "pkg/helper/pointer.go": {
            "language": "Go",
            "purpose": "Defines a generic function to create a pointer to a value of any type.",
            "key_types": [
              "T"
            ],
            "functions": [
              "NewPointer"
            ],
            "imports": [],
            "complexity": "low"
          },
          "pkg/helper/random.go": {
            "language": "Go",
            "purpose": "Generates a random string of specified length using alphanumeric characters.",
            "key_types": [
              "rune",
              "big.Int"
            ],
            "functions": [
              "RandStr"
            ],
            "imports": [
              "crypto/rand",
              "math/big"
            ],
            "complexity": "medium"
          },
          "pkg/helper/ronin.go": {
            "language": "Go",
            "purpose": "Provides utility functions for normalizing Ethereum addresses, hashing messages, and validating signatures.",
            "key_types": [
              "string",
              "common.Hash"
            ],
            "functions": [
              "NormalizeAddress",
              "HashMessage",
              "IsValidSignature"
            ],
            "imports": [
              "fmt",
              "strings",
              "github.com/ethereum/go-ethereum/common",
              "github.com/ethereum/go-ethereum/common/hexutil",
              "github.com/ethereum/go-ethereum/crypto"
            ],
            "risks": [
              "Potential for signature forgery if not properly validated"
            ],
            "complexity": "medium"
          },
          "pkg/helper/slice.go": {
            "language": "Go",
            "purpose": "Provides utility functions for manipulating slices, including filtering, finding indices, converting slices to maps, and mapping elements.",
            "key_types": [
              "T",
              "T1",
              "T2"
            ],
            "functions": [
              "Filter",
              "IndexOf",
              "SliceToMap",
              "Map"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/helper/tls.go": {
            "language": "Go",
            "purpose": "This file provides a function to convert given certificate and key data into a TLS configuration.",
            "key_types": [
              "tls.Config",
              "tls.Certificate",
              "x509.CertPool"
            ],
            "functions": [
              "ConvertToTLSConfig"
            ],
            "imports": [
              "crypto/tls",
              "crypto/x509"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/location": {
        "path": "pkg/location",
        "purpose": "Responsible for providing location information based on IP addresses and managing the database of IP locations.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "location_svc.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-manager/pkg/gcs",
          "compress/gzip",
          "context",
          "encoding/json",
          "errors",
          "fmt",
          "io",
          "net",
          "net/http",
          "os",
          "sync",
          "time",
          "github.com/oschwald/maxminddb-golang",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/models"
        ],
        "architecture": "The folder follows a service-oriented architecture, encapsulating configuration and location services with clear separation of concerns.",
        "file_summaries": {
          "pkg/location/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for the application, integrating with gcs.Config.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [
              "github.com/axieinfinity/ronin-wallet-manager/pkg/gcs"
            ],
            "complexity": "low"
          },
          "pkg/location/location_svc.go": {
            "language": "Go",
            "purpose": "Provides a service to get location information based on IP addresses and manage the database of IP locations.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "md.IPLocation"
            ],
            "functions": [
              "GetLocationByIP",
              "DownloadNewDB",
              "decompressGzip",
              "setupFromStorage",
              "setupFromLocalDB",
              "setupLocationDB",
              "subscribeToAutoRefresh",
              "loadMapCountryCode",
              "loadMapCurrencyCode",
              "loadAndParseDefaultData",
              "NewService"
            ],
            "imports": [
              "compress/gzip",
              "context",
              "encoding/json",
              "errors",
              "fmt",
              "io",
              "net",
              "net/http",
              "os",
              "sync",
              "time",
              "github.com/oschwald/maxminddb-golang",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/gcs"
            ],
            "side_effects": [
              "Creates and deletes files on the filesystem.",
              "Makes HTTP requests to download the IP database.",
              "Publishes messages to a Redis channel."
            ],
            "risks": [
              "Potential exposure of sensitive data if the IP database is not secured.",
              "Error handling may not cover all edge cases, leading to crashes or undefined behavior."
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/moonpay": {
        "path": "pkg/moonpay",
        "purpose": "Handles configuration and services related to Moonpay, including URL signing.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "service.go"
        ],
        "dependencies": [
          "context",
          "encoding/base64",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating configuration and service logic in separate files.",
        "file_summaries": {
          "pkg/moonpay/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for Moonpay with a secret field.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [],
            "risks": [
              "Exposure of sensitive information if the secret is not handled properly"
            ],
            "complexity": "low"
          },
          "pkg/moonpay/service.go": {
            "language": "Go",
            "purpose": "Provides a service for signing URLs using a configuration.",
            "key_types": [
              "Service",
              "service",
              "Config"
            ],
            "functions": [
              "SignURL",
              "NewService"
            ],
            "imports": [
              "context",
              "encoding/base64",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/preference": {
        "path": "pkg/preference",
        "purpose": "This folder/module is responsible for managing user preferences related to a wallet application, including fetching and updating preferences based on device and address.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "pref_svc.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/ethereum/go-ethereum/common",
          "github.com/labstack/echo/v4",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating the logic for user preference management within a dedicated service file.",
        "file_summaries": {
          "pkg/preference/pref_svc.go": {
            "language": "Go",
            "purpose": "This file defines a service for managing user preferences related to a wallet application, including fetching and updating preferences based on device and address.",
            "key_types": [
              "Service",
              "service",
              "md.Preference",
              "md.GetPreferencesRequest",
              "md.UpdatePreferencesRequest",
              "md.GetDevicePreferenceRequest",
              "md.UpdateDevicePreferenceRequest",
              "md.InternalGetWalletPreferencesRequest",
              "md.GetBatchPreferencesResponse"
            ],
            "functions": [
              "GetByAddress",
              "UpdateForAddress",
              "PrivateGetDevicePreferences",
              "PrivateUpdateDevicePreferences",
              "SyncDeviceAddresses",
              "InternalGetList",
              "ResetDevice",
              "InitForDeviceRegistration"
            ],
            "imports": [
              "context",
              "net/http",
              "regexp",
              "slices",
              "strings",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/ethereum/go-ethereum/common",
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Logs information and errors related to device preferences and notifications.",
              "Asynchronously migrates notification settings for devices."
            ],
            "risks": [
              "Potential for SQL injection if input is not properly sanitized.",
              "Handling of sensitive user data may lead to privacy concerns if not managed correctly."
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/releasecandidate": {
        "path": "pkg/releasecandidate",
        "purpose": "Responsible for managing feature configurations and whitelist devices for mobile wallet candidates.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "init.go",
          "service.go"
        ],
        "dependencies": [
          "github.com/redis/go-redis/v9",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
          "github.com/go-redsync/redsync/v4",
          "github.com/go-redsync/redsync/v4/redis/goredis/v9",
          "github.com/rs/zerolog/log"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, utilizing Redis for state management and providing a clear interface for feature access control.",
        "file_summaries": {
          "pkg/releasecandidate/init.go": {
            "language": "Go",
            "purpose": "Defines a service interface for managing feature configurations and whitelist devices.",
            "key_types": [
              "Service",
              "CheckAllowFeatureRequest",
              "PostFeatureConfigRequest",
              "PostWhitelistFeaturesRequest",
              "PostSetConfigForDeviceRequest",
              "GetCountWhitelistDevices"
            ],
            "functions": [
              "NewService",
              "CheckAllowFeature",
              "SetFeatureConfig",
              "SetWhitelistFeatures",
              "SetConfigForDevice",
              "CountWhitelistDevices",
              "VerifyWhitelistFeature"
            ],
            "imports": [
              "github.com/redis/go-redis/v9",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/device"
            ],
            "complexity": "medium"
          },
          "pkg/releasecandidate/service.go": {
            "language": "Go",
            "purpose": "Manages feature access for mobile wallet candidates using Redis for state management.",
            "key_types": [
              "service",
              "models.CheckAllowFeatureRequest",
              "models.PostFeatureConfigRequest",
              "models.PostWhitelistFeaturesRequest",
              "models.PostSetConfigForDeviceRequest",
              "models.GetCountWhitelistDevices"
            ],
            "functions": [
              "newService",
              "refreshWhitelist",
              "CheckAllowFeature",
              "SetFeatureConfig",
              "SetWhitelistFeatures",
              "SetConfigForDevice",
              "CountWhitelistDevices",
              "VerifyWhitelistFeature",
              "convertKey"
            ],
            "imports": [
              "context",
              "errors",
              "fmt",
              "strings",
              "time",
              "github.com/go-redsync/redsync/v4",
              "github.com/go-redsync/redsync/v4/redis/goredis/v9",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/device"
            ],
            "side_effects": [
              "Modifies Redis state for feature access and whitelists.",
              "Logs information and errors during execution."
            ],
            "risks": [
              "Potential race conditions when accessing shared resources.",
              "Improper handling of Redis errors may lead to incorrect feature access."
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/tracking": {
        "path": "pkg/tracking",
        "purpose": "Responsible for tracking events and requests, providing services to manage and process tracking data.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "config.go",
          "models.go",
          "tracking_svc.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-manager/httpclient"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating configuration, data models, and service logic related to tracking functionalities.",
        "file_summaries": {
          "pkg/tracking/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for tracking with associated methods.",
            "key_types": [
              "Config"
            ],
            "functions": [
              "SetUserAgent"
            ],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/tracking/models.go": {
            "language": "Go",
            "purpose": "Defines data structures for tracking events and requests.",
            "key_types": [
              "Event",
              "TrackingRequest"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/tracking/tracking_svc.go": {
            "language": "Go",
            "purpose": "Provides tracking services for events using a tracking client.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "TrackingRequest"
            ],
            "functions": [
              "Track",
              "TrackAsync",
              "NewService"
            ],
            "imports": [
              "context",
              "github.com/axieinfinity/ronin-wallet-manager/httpclient"
            ],
            "side_effects": [
              "Modifies event data if certain conditions are met",
              "Makes network calls to track events"
            ],
            "risks": [
              "Potential for data leakage if event data is not properly sanitized",
              "Network call failures may not be handled"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/trusteddomain": {
        "path": "pkg/trusteddomain",
        "purpose": "Responsible for managing trusted domains, including caching and database interactions.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "trusted_domain_svc.go",
          "utils.go"
        ],
        "dependencies": [
          "github.com/jellydator/ttlcache/v3",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating domain management logic and utility functions.",
        "file_summaries": {
          "pkg/trusteddomain/trusted_domain_svc.go": {
            "language": "Go",
            "purpose": "Provides a service for managing trusted domains, including caching and database interactions.",
            "key_types": [
              "Service",
              "svc",
              "TrustedDomain",
              "TrustedDomainRepo",
              "GetListTDMRequest"
            ],
            "functions": [
              "GetByDomain",
              "Save",
              "SaveBatch",
              "GetAll",
              "DeleteByDomain",
              "GetList",
              "NewService"
            ],
            "imports": [
              "context",
              "math",
              "time",
              "github.com/jellydator/ttlcache/v3",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Caches data in memory",
              "Subscribes to a Redis channel for cache invalidation"
            ],
            "risks": [
              "Potential race conditions in cache access",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          },
          "pkg/trusteddomain/utils.go": {
            "language": "Go",
            "purpose": "Generates wildcard domains from a given domain string.",
            "key_types": [
              "string",
              "[]string"
            ],
            "functions": [
              "generateWildcardDomains"
            ],
            "imports": [
              "slices",
              "strings"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/worker": {
        "path": "pkg/worker",
        "purpose": "Responsible for managing a pool of worker goroutines to process jobs concurrently.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "config.go",
          "dispatcher.go",
          "job.go",
          "worker.go"
        ],
        "dependencies": [
          "sync",
          "github.com/rs/zerolog/log"
        ],
        "architecture": "The folder follows a concurrent processing architecture using goroutines, with a dispatcher managing worker pools and job execution.",
        "file_summaries": {
          "pkg/worker/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for a worker package.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/worker/dispatcher.go": {
            "language": "Go",
            "purpose": "This file implements a dispatcher that manages a pool of worker goroutines to process jobs concurrently.",
            "key_types": [
              "Dispatcher",
              "Config",
              "Job",
              "Worker"
            ],
            "functions": [
              "NewDispatcher",
              "Run",
              "dispatch",
              "Stop",
              "AddNewJob"
            ],
            "imports": [
              "sync"
            ],
            "side_effects": [
              "Starts goroutines for workers",
              "Blocks on worker availability"
            ],
            "risks": [
              "Potential deadlock if jobQueue is not managed properly"
            ],
            "complexity": "medium"
          },
          "pkg/worker/job.go": {
            "language": "Go",
            "purpose": "Defines a Job type with an executable function.",
            "key_types": [
              "Job"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/worker/worker.go": {
            "language": "Go",
            "purpose": "This file defines a Worker type that manages job execution in a worker pool.",
            "key_types": [
              "Worker",
              "Job"
            ],
            "functions": [
              "NewWorker",
              "Start",
              "Stop"
            ],
            "imports": [
              "sync",
              "github.com/rs/zerolog/log"
            ],
            "side_effects": [
              "Starts a goroutine for job processing",
              "Modifies the wait group on stop"
            ],
            "risks": [
              "Potential deadlock if not managed properly with wait groups"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/xauth": {
        "path": "pkg/xauth",
        "purpose": "Responsible for client authentication and external authentication service integration.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "external_auth_svc.go"
        ],
        "dependencies": [
          "github.com/rs/zerolog/log",
          "golang.org/x/oauth2",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ronin-wallet-manager/models"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating authentication-related functionalities and configurations.",
        "file_summaries": {
          "pkg/xauth/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for client authentication.",
            "key_types": [
              "ClientConfig",
              "Config"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/xauth/external_auth_svc.go": {
            "language": "Go",
            "purpose": "Provides an external authentication service that exchanges authorization codes for access tokens.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "XExchangeAuthCodeReq",
              "XAccessTokenRes"
            ],
            "functions": [
              "ExchangeAuthCode",
              "NewService"
            ],
            "imports": [
              "context",
              "net/http",
              "strings",
              "github.com/rs/zerolog/log",
              "golang.org/x/oauth2",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Logs an error if unable to exchange auth code."
            ],
            "risks": [
              "Potential exposure of sensitive information if error handling is not properly managed."
            ],
            "complexity": "medium"
          }
        }
      },
      "repositories": {
        "path": "repositories",
        "purpose": "This folder contains repository definitions for managing various entities in a database, including announcements, code versions, contracts, DApps, highlights, networks, user preferences, quick access DApps, and trusted domains, utilizing CRUD operations and GORM for database interactions.",
        "languages": {
          "Go": 12
        },
        "key_modules": [
          "announcement.go",
          "code_version.go",
          "common.go",
          "contract.go",
          "dapp.go",
          "highlight.go",
          "init.go",
          "network.go",
          "preference.go",
          "quickaccess.go",
          "trusted_domain.go"
        ],
        "dependencies": [
          "gorm.io/gorm",
          "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
          "github.com/axieinfinity/ecosystem-go-common/errors"
        ],
        "architecture": "The folder follows a repository pattern, encapsulating data access logic for different entities and providing a clean interface for CRUD operations while managing database interactions through GORM.",
        "file_summaries": {
          "repositories/announcement.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing announcements, including CRUD operations and special offer logs.",
            "key_types": [
              "AnnouncementRepo",
              "announcementRepo",
              "AnnouncementInfo"
            ],
            "functions": [
              "AddNew",
              "MarkPublished",
              "GetAnnouncementByID",
              "GetAnnouncementsListAsAdmin",
              "GetAnnouncementsListAsUser",
              "GetOldPublished",
              "CountAnnouncements",
              "DeleteAnnouncement",
              "GetSpecialOfferLog",
              "SaveSendSpecialOfferLog",
              "GetSpecialOfferLogsList",
              "CountSpecialOffers"
            ],
            "imports": [
              "context",
              "errors",
              "slices",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "side_effects": [
              "Database transactions are performed for CRUD operations."
            ],
            "risks": [
              "Potential SQL injection if user inputs are not properly sanitized."
            ],
            "complexity": "medium"
          },
          "repositories/code_version.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing code versions, including retrieving and saving versions to a database.",
            "key_types": [
              "CodeVersionRepo",
              "codeVersionRepo",
              "gorm.DB"
            ],
            "functions": [
              "GetAllCodeVersions",
              "SaveVersion",
              "NewCodeVersionRepo"
            ],
            "imports": [
              "context",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are initiated and may modify the database state."
            ],
            "risks": [
              "Potential SQL injection if inputs are not properly sanitized.",
              "Error handling may expose sensitive information if not managed correctly."
            ],
            "complexity": "medium"
          },
          "repositories/common.go": {
            "language": "Go",
            "purpose": "This file defines a repository interface and its implementation for managing common entities in a database using GORM.",
            "key_types": [
              "CommonRepo",
              "commonRepo"
            ],
            "functions": [
              "GetAllCommons",
              "SaveCommons",
              "NewCommonRepo"
            ],
            "imports": [
              "context",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are initiated and may modify the database state."
            ],
            "risks": [
              "Potential SQL injection if inputs are not properly sanitized.",
              "Data loss if 'overwriteOnConflict' is misused."
            ],
            "complexity": "medium"
          },
          "repositories/contract.go": {
            "language": "Go",
            "purpose": "This file defines a repository interface and its implementation for managing contract data in a database.",
            "key_types": [
              "ContractRepo",
              "contractRepo",
              "md.Contract",
              "md.ContractFilter",
              "md.ContractOrderBy",
              "md.Paging"
            ],
            "functions": [
              "GetContract",
              "GetContractList",
              "CreateContract",
              "DeleteContract",
              "UpdateContract",
              "SaveContract",
              "UpdateContracts",
              "SaveContracts",
              "NewContractRepo"
            ],
            "imports": [
              "context",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are initiated and may modify the database state."
            ],
            "risks": [
              "Potential SQL injection if filter conditions are not properly sanitized.",
              "Panic calls in unimplemented methods may lead to application crashes."
            ],
            "complexity": "medium"
          },
          "repositories/dapp.go": {
            "language": "Go",
            "purpose": "This file defines a repository interface and its implementation for managing decentralized application (DApp) data in a database.",
            "key_types": [
              "DAppRepo",
              "dAppRepo",
              "DApp",
              "DAppFilter",
              "DAppOrderBy",
              "Paging"
            ],
            "functions": [
              "GetDApp",
              "GetDAppList",
              "CreateDApp",
              "DeleteDApp",
              "UpdateDApp",
              "SaveDApp",
              "UpdateDApps",
              "SaveDApps",
              "NewDAppRepo"
            ],
            "imports": [
              "context",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are initiated and modified."
            ],
            "risks": [
              "Potential SQL injection if filter conditions are not properly sanitized.",
              "Panic calls in unimplemented methods may lead to application crashes."
            ],
            "complexity": "medium"
          },
          "repositories/highlight.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing highlights in a database, including CRUD operations and handling of expired highlights.",
            "key_types": [
              "HighlightRepo",
              "highlightRepo",
              "md.Highlight",
              "md.Paging"
            ],
            "functions": [
              "GetList",
              "Save",
              "SaveBatch",
              "Update",
              "UpdateBatch",
              "GetByID",
              "GetAll",
              "DeleteByID",
              "GetHighlightDApps",
              "CleanExpired",
              "NewHighlightRepo"
            ],
            "imports": [
              "context",
              "time",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are performed which may modify the state of the database."
            ],
            "risks": [
              "Potential SQL injection if user input is not properly sanitized.",
              "Concurrency issues if multiple transactions are not handled correctly."
            ],
            "complexity": "medium"
          },
          "repositories/init.go": {
            "language": "Go",
            "purpose": "Provides pagination functionality for database queries using GORM.",
            "key_types": [
              "int",
              "gorm.DB"
            ],
            "functions": [
              "paginate"
            ],
            "imports": [
              "gorm.io/gorm"
            ],
            "side_effects": [
              "Modifies database query parameters based on pagination logic."
            ],
            "complexity": "medium"
          },
          "repositories/network.go": {
            "language": "Go",
            "purpose": "This file defines a repository interface and its implementation for managing network entities in a database using GORM.",
            "key_types": [
              "NetworkRepo",
              "networkRepo",
              "Network",
              "NetworkFilter",
              "NetworkOrderBy",
              "Paging",
              "Preload"
            ],
            "functions": [
              "GetNetwork",
              "GetNetworkList",
              "CreateNetwork",
              "DeleteNetwork",
              "UpdateNetwork",
              "SaveNetwork",
              "UpdateNetworks",
              "SaveNetworks",
              "NewNetworkRepo"
            ],
            "imports": [
              "context",
              "fmt",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database operations such as create, read, update, and delete on network entities."
            ],
            "risks": [
              "Potential SQL injection if filter conditions are not properly sanitized."
            ],
            "complexity": "medium"
          },
          "repositories/preference.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing user preferences in a database using GORM.",
            "key_types": [
              "PreferenceRepo",
              "prefRepo",
              "Preference",
              "PreferenceFilter"
            ],
            "functions": [
              "GetByAddress",
              "UpdateForAddress",
              "GetList",
              "UpsertBatch",
              "UpdateForDevice",
              "DeleteByDevice",
              "DeleteBatch",
              "GetOneByDevice",
              "CountAddressRegisReceiveNews",
              "NewPreferencesRepo"
            ],
            "imports": [
              "context",
              "errors",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "side_effects": [
              "Database operations that modify user preferences."
            ],
            "risks": [
              "Potential SQL injection if user input is not properly sanitized.",
              "Error handling may expose sensitive information."
            ],
            "complexity": "medium"
          },
          "repositories/quickaccess.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing Quick Access DApps, including CRUD operations and searching functionalities.",
            "key_types": [
              "QuickAccessDAppRepo",
              "quickAccessDAppRepo",
              "md.QuickAccessDApp",
              "md.Paging"
            ],
            "functions": [
              "GetList",
              "Save",
              "SaveBatch",
              "Update",
              "UpdateBatch",
              "GetByID",
              "GetAll",
              "DeleteByID",
              "SearchByTitle",
              "NewQuickAccessDAppRepo"
            ],
            "imports": [
              "context",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are performed which may affect the state of the database."
            ],
            "risks": [
              "Potential SQL injection if user input is not properly sanitized in search queries."
            ],
            "complexity": "medium"
          },
          "repositories/trusted_domain.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing trusted domains in a database, providing methods to retrieve, save, and delete trusted domain records.",
            "key_types": [
              "TrustedDomainRepo",
              "trustedDomainsRepo",
              "TrustedDomain",
              "Paging",
              "TrustedDomainFilter",
              "TrustedDomainOrderBy"
            ],
            "functions": [
              "GetByDomain",
              "GetList",
              "Save",
              "SaveBatch",
              "GetAll",
              "DeleteByDomain",
              "NewTrustedDomainRepo"
            ],
            "imports": [
              "context",
              "fmt",
              "strings",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are initiated and may modify the database state."
            ],
            "risks": [
              "Potential SQL injection if user input is not properly sanitized in queries."
            ],
            "complexity": "medium"
          }
        }
      },
      "root": {
        "path": "root",
        "purpose": "This folder/module is responsible for the wallet-manager project, including configuration, documentation, and service definitions.",
        "languages": {
          "JSON": 2,
          "Markdown": 2,
          "YAML": 2,
          "bash": 1
        },
        "key_modules": [
          ".golangci.yaml",
          "README.md",
          "SECURITY.md",
          "country_iso2_to_currency.json",
          "country_iso2_to_iso3.json",
          "docker-compose.yml",
          "entrypoint.sh"
        ],
        "dependencies": [
          "PostgreSQL",
          "Redis"
        ],
        "architecture": "The folder follows a microservices architecture pattern, utilizing Docker for containerization and includes configuration files for linting and service management.",
        "file_summaries": {
          ".golangci.yaml": {
            "language": "YAML",
            "purpose": "Configuration file for GolangCI-Lint, specifying linting rules and settings for Go projects.",
            "key_types": [
              "linters-settings",
              "rules",
              "issues",
              "run"
            ],
            "functions": [],
            "imports": [],
            "complexity": "medium"
          },
          "README.md": {
            "language": "Markdown",
            "purpose": "Documentation for the wallet-manager project",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "SECURITY.md": {
            "language": "Markdown",
            "purpose": "Documentation of the security policy for the project, including supported versions and vulnerability reporting.",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "country_iso2_to_currency.json": {
            "language": "JSON",
            "purpose": "This file maps country ISO 3166-1 alpha-2 codes to their respective currencies.",
            "key_types": [
              "string",
              "string"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "country_iso2_to_iso3.json": {
            "language": "JSON",
            "purpose": "Mapping of country ISO 3166-1 alpha-2 codes to ISO 3166-1 alpha-3 codes.",
            "key_types": [
              "string"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "docker-compose.yml": {
            "language": "YAML",
            "purpose": "Defines services for a Docker application including PostgreSQL and Redis.",
            "key_types": [
              "services",
              "environment"
            ],
            "functions": [],
            "imports": [],
            "side_effects": [
              "Creates Docker containers for PostgreSQL and Redis services."
            ],
            "risks": [
              "Exposing database ports to the host may lead to unauthorized access."
            ],
            "complexity": "low"
          },
          "entrypoint.sh": {
            "language": "bash",
            "purpose": "This script serves as an entry point to run a service application.",
            "key_types": [],
            "functions": [
              "main"
            ],
            "imports": [
              "./app"
            ],
            "side_effects": [
              "Executes an external application"
            ],
            "complexity": "low"
          }
        }
      },
      "routes": {
        "path": "routes",
        "purpose": "Responsible for setting up and managing routes for an Echo web server, including public, private, and internal API endpoints for a wallet manager application.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "init.go",
          "internal.go",
          "private.go",
          "public.go"
        ],
        "dependencies": [
          "github.com/labstack/echo/v4",
          "github.com/rs/zerolog/log",
          "gorm.io/plugin/prometheus",
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/database/redis",
          "github.com/axieinfinity/ronin-wallet-manager/handlers",
          "github.com/axieinfinity/ronin-wallet-manager/httpclient",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/binance",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/location",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/moonpay",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/preference",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/releasecandidate",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/trusteddomain",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/xauth",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing routes into separate files for public, private, and internal APIs, each handling specific functionalities and utilizing Echo's middleware for routing and request handling.",
        "file_summaries": {
          "routes/init.go": {
            "language": "Go",
            "purpose": "Sets up routes for an Echo web server and initializes various services and repositories.",
            "key_types": [
              "echo.Echo",
              "config.Schema",
              "postgresql.Client",
              "redis.Client",
              "handlers.ReleaseCandidateHandler",
              "handlers.NetworkHandler",
              "handlers.CommonHandler"
            ],
            "functions": [
              "SetupRoutes",
              "NewClient",
              "NewService",
              "NewHandler",
              "registerPublic",
              "registerPrivate",
              "registerInternal"
            ],
            "imports": [
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "gorm.io/plugin/prometheus",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/database/redis",
              "github.com/axieinfinity/ronin-wallet-manager/handlers",
              "github.com/axieinfinity/ronin-wallet-manager/httpclient",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/binance",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/location",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/moonpay",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/preference",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/releasecandidate",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/trusteddomain",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/xauth",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Establishes database connections",
              "Initializes various services and repositories",
              "Registers routes with the Echo server"
            ],
            "risks": [
              "Potential for database connection errors",
              "Improper handling of configuration values may lead to runtime errors"
            ],
            "complexity": "medium"
          },
          "routes/internal.go": {
            "language": "Go",
            "purpose": "Defines internal routes for a wallet manager API, handling various network and announcement functionalities.",
            "key_types": [
              "echo.Echo",
              "config.Schema",
              "handlers.ReleaseCandidateHandler",
              "handlers.NetworkHandler",
              "handlers.CommonHandler",
              "handlers.LocationHandler",
              "handlers.AnnouncementHandler",
              "handlers.TrustedDomainHandler",
              "handlers.DAppHandler",
              "tracking.Service"
            ],
            "functions": [
              "registerInternal"
            ],
            "imports": [
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/handlers",
              "github.com/axieinfinity/ronin-wallet-manager/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking"
            ],
            "side_effects": [
              "Modifies the state of the wallet manager by registering various routes and their handlers."
            ],
            "complexity": "medium"
          },
          "routes/private.go": {
            "language": "Go",
            "purpose": "Defines private routes for wallet management, including preferences and device management.",
            "key_types": [
              "echo.Echo",
              "handlers.AnnouncementHandler",
              "handlers.DeviceHandler",
              "echo.MiddlewareFunc"
            ],
            "functions": [
              "registerPrivate"
            ],
            "imports": [
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/handlers",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Modifies the routing behavior of the Echo web framework."
            ],
            "risks": [
              "Potential exposure of sensitive data through improperly secured routes."
            ],
            "complexity": "medium"
          },
          "routes/public.go": {
            "language": "Go",
            "purpose": "Defines public API routes for a wallet manager application, including health checks and various resource endpoints.",
            "key_types": [
              "APIVersion",
              "config.Schema",
              "handlers.ReleaseCandidateHandler",
              "handlers.NetworkHandler",
              "handlers.CommonHandler",
              "handlers.AccountHandler",
              "handlers.MoonpayHandler",
              "handlers.LocationHandler",
              "handlers.AnnouncementHandler",
              "handlers.BinanceHandler",
              "handlers.TrustedDomainHandler",
              "handlers.DAppHandler",
              "handlers.ExternalAuthHandler",
              "handlers.BlacklistHandler"
            ],
            "functions": [
              "HealthCheck",
              "registerPublic"
            ],
            "imports": [
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/handlers",
              "github.com/axieinfinity/ronin-wallet-manager/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Modifies the state of the application by registering routes and handlers."
            ],
            "risks": [
              "Potential exposure of sensitive information through API endpoints.",
              "Improper handling of user input could lead to security vulnerabilities."
            ],
            "complexity": "medium"
          }
        }
      },
      "tests": {
        "path": "tests",
        "purpose": "This folder contains tests for the web server that provides an endpoint to sign messages using ECDSA.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/ethereum/go-ethereum",
          "github.com/labstack/echo/v4"
        ],
        "architecture": "The folder follows a modular architecture pattern, focusing on testing the functionality of a web server with ECDSA signing capabilities.",
        "file_summaries": {
          "tests/main.go": {
            "language": "Go",
            "purpose": "This file implements a web server that provides an endpoint to sign messages using ECDSA.",
            "key_types": [
              "SignRequest",
              "ecdsa.PrivateKey"
            ],
            "functions": [
              "signHash",
              "signMessage",
              "main"
            ],
            "imports": [
              "context",
              "crypto/ecdsa",
              "fmt",
              "log",
              "net/http",
              "os",
              "os/signal",
              "sort",
              "strings",
              "time",
              "github.com/ethereum/go-ethereum/common",
              "github.com/ethereum/go-ethereum/common/hexutil",
              "github.com/ethereum/go-ethereum/crypto",
              "github.com/labstack/echo/v4"
            ],
            "side_effects": [
              "Starts an HTTP server on port 8888",
              "Logs errors to the console",
              "Waits for OS interrupt signals to gracefully shut down"
            ],
            "risks": [
              "Potential exposure of private keys if not handled securely",
              "Logging sensitive information may lead to security vulnerabilities"
            ],
            "complexity": "medium"
          }
        }
      }
    }
  }
}