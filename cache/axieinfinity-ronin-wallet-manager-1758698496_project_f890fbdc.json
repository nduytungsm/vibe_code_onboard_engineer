{
  "content_hash": "479c50f424f3cc70fef9729e417ff885",
  "timestamp": "2025-09-24T14:25:38.302899+07:00",
  "result": {
    "purpose": "This project is a wallet manager for blockchain applications, specifically designed to facilitate user interactions with decentralized applications (dApps) and manage cryptocurrency transactions. It provides features such as user authentication, announcement management, device management, and integration with external services like Binance and Moonpay.",
    "architecture": "The project follows a modular architecture pattern, utilizing a service-oriented approach with clear separation of concerns across various components, including handlers, repositories, and services. It employs a microservices-like structure with a focus on maintainability and scalability.",
    "data_models": [
      "User",
      "Announcement",
      "Device",
      "DApp",
      "Network",
      "Transaction",
      "Preference",
      "TrustedDomain"
    ],
    "external_services": [
      "PostgreSQL",
      "Redis",
      "Binance API",
      "Moonpay API",
      "Sentry for error tracking"
    ],
    "languages": {
      "Bash": 1,
      "Go": 90,
      "JSON": 4,
      "Markdown": 4,
      "SQL": 6,
      "YAML": 8
    },
    "folder_summaries": {
      ".github": {
        "path": ".github",
        "purpose": "Contains templates and configurations for GitHub workflows, including pull request templates.",
        "languages": {
          "Markdown": 1
        },
        "key_modules": [
          "pull_request_template.md"
        ],
        "dependencies": [],
        "architecture": "The folder follows a simple structure for managing GitHub-related documentation and templates, promoting consistency in contributions.",
        "file_summaries": {
          ".github/pull_request_template.md": {
            "language": "Markdown",
            "purpose": "Template for pull requests to outline changes and checklist items.",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      ".github/workflows": {
        "path": ".github/workflows",
        "purpose": "This folder is responsible for defining GitHub Actions workflows for various automation tasks related to CI/CD processes.",
        "languages": {
          "YAML": 4
        },
        "key_modules": [
          "check.yml",
          "dockerize.yml",
          "golangci-lint.yml",
          "sentry.yml"
        ],
        "dependencies": [
          "axieinfinity/workflows-samples/.github/workflows/security-basic-scan.yml",
          "axieinfinity/workflows-samples/.github/workflows/docker-build-submodule.yml",
          "axieinfinity/workflows-samples/.github/workflows/sentry-release.yml"
        ],
        "architecture": "The folder follows a modular architecture pattern where each YAML file defines a specific workflow for automation tasks, promoting separation of concerns.",
        "file_summaries": {
          ".github/workflows/check.yml": {
            "language": "YAML",
            "purpose": "Defines a GitHub Actions workflow for security checks on pull requests to the develop branch.",
            "key_types": [],
            "functions": [],
            "imports": [
              "axieinfinity/workflows-samples/.github/workflows/security-basic-scan.yml@ce8adf700c0cd05672ebd7154c828d396631c153"
            ],
            "complexity": "low"
          },
          ".github/workflows/dockerize.yml": {
            "language": "YAML",
            "purpose": "Defines a GitHub Actions workflow for Dockerizing a mobile wallet manager.",
            "key_types": [
              "workflow",
              "job",
              "permissions"
            ],
            "functions": [
              "on",
              "jobs",
              "uses",
              "with",
              "secrets"
            ],
            "imports": [
              "axieinfinity/workflows-samples/.github/workflows/docker-build-submodule.yml"
            ],
            "side_effects": [
              "Triggers on push and pull request events",
              "Uses secrets for authentication"
            ],
            "risks": [
              "Exposure of sensitive information if secrets are not managed properly"
            ],
            "complexity": "medium"
          },
          ".github/workflows/golangci-lint.yml": {
            "language": "YAML",
            "purpose": "Configuration file for golangci-lint GitHub Actions workflow",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          ".github/workflows/sentry.yml": {
            "language": "YAML",
            "purpose": "Defines a GitHub Actions workflow for Sentry release management.",
            "key_types": [],
            "functions": [],
            "imports": [
              "axieinfinity/workflows-samples/.github/workflows/sentry-release.yml"
            ],
            "complexity": "low"
          }
        }
      },
      "cmd/app": {
        "path": "cmd/app",
        "purpose": "This folder/module is responsible for setting up and running the main application, including an HTTP server and a metrics server.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
          "github.com/axieinfinity/ecosystem-go-common/echo/profiling",
          "github.com/axieinfinity/ecosystem-go-common/validation",
          "github.com/getsentry/sentry-go",
          "github.com/getsentry/sentry-go/echo",
          "github.com/labstack/echo-contrib/echoprometheus",
          "github.com/labstack/echo/v4",
          "github.com/labstack/echo/v4/middleware",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/middleware",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-manager/routes"
        ],
        "architecture": "The folder follows a modular architecture pattern, where the main application logic is encapsulated in a single entry point (main.go) that initializes and manages various components like HTTP and metrics servers.",
        "file_summaries": {
          "cmd/app/main.go": {
            "language": "Go",
            "purpose": "This file sets up an HTTP server and a metrics server, handling graceful shutdown and logging.",
            "key_types": [
              "context.Context",
              "sync.WaitGroup",
              "echo.Echo",
              "config.Schema"
            ],
            "functions": [
              "main",
              "startHTTPServer",
              "startMetricsServer",
              "shutdown"
            ],
            "imports": [
              "context",
              "fmt",
              "os",
              "os/signal",
              "strings",
              "sync",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/echo/profiling",
              "github.com/axieinfinity/ecosystem-go-common/validation",
              "github.com/getsentry/sentry-go",
              "github.com/getsentry/sentry-go/echo",
              "github.com/labstack/echo-contrib/echoprometheus",
              "github.com/labstack/echo/v4",
              "github.com/labstack/echo/v4/middleware",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/routes"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking if enabled",
              "Starts HTTP and metrics servers"
            ],
            "risks": [
              "Potential exposure of sensitive information in logs if not properly configured",
              "Improper handling of shutdown may lead to data loss"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/clean_cronjob": {
        "path": "cmd/clean_cronjob",
        "purpose": "This folder/module is responsible for implementing a cron job that cleans old announcements from a database.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/database/redis",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the cron job functionality within a single main file that manages dependencies and orchestrates the cleaning process.",
        "file_summaries": {
          "cmd/clean_cronjob/main.go": {
            "language": "Go",
            "purpose": "This file implements a cron job that cleans old announcements from a database.",
            "key_types": [
              "context.Context",
              "time.Time",
              "gorm.DB",
              "config.Config",
              "mRd.RedisClient",
              "repositories.AnnouncementRepo",
              "repositories.PreferencesRepo",
              "tracking.Service",
              "announcement.Service"
            ],
            "functions": [
              "main",
              "sentry.Init",
              "postgresql.NewClient",
              "mRd.NewRedisClient",
              "repositories.NewAnnouncementRepo",
              "repositories.NewPreferencesRepo",
              "tracking.NewService",
              "announcement.NewService",
              "svc.CleanOldCronJobs"
            ],
            "imports": [
              "context",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/database/redis",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking",
              "Connects to PostgreSQL database",
              "Connects to Redis database",
              "Cleans old cron jobs from the database"
            ],
            "risks": [
              "Potential failure in Sentry initialization",
              "Database connection failures",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/clean_highlight_dapps": {
        "path": "cmd/clean_highlight_dapps",
        "purpose": "This folder/module is responsible for a command-line application that cleans expired highlights from a database.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/database/redis",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a command-line application architecture, utilizing a main function to initialize services and handle database connections.",
        "file_summaries": {
          "cmd/clean_highlight_dapps/main.go": {
            "language": "Go",
            "purpose": "This file contains the main function for a command-line application that cleans expired highlights from a database.",
            "key_types": [
              "context.Context",
              "time.Time",
              "gorm.DB",
              "config.Config",
              "redis.Client",
              "dapp.CleanService",
              "md.Highlight"
            ],
            "functions": [
              "main",
              "sentry.Init",
              "postgresql.NewClient",
              "repositories.NewQuickAccessDAppRepo",
              "repositories.NewHighlightRepo",
              "redis.NewRedisClient",
              "dapp.NewCleanService",
              "dAppSvc.CleanExpireHighlights"
            ],
            "imports": [
              "context",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/database/redis",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking",
              "Connects to PostgreSQL database",
              "Connects to Redis database"
            ],
            "risks": [
              "Potential for database connection failures",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/clean_old_special_offers": {
        "path": "cmd/clean_old_special_offers",
        "purpose": "This folder/module is responsible for cleaning old special offers from an announcement repository based on a specified time period.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the functionality related to cleaning old special offers within a single main file that initializes necessary services and handles the core logic.",
        "file_summaries": {
          "cmd/clean_old_special_offers/main.go": {
            "language": "Go",
            "purpose": "This file contains a main function that initializes Sentry for error tracking, connects to a PostgreSQL database, and cleans old special offers from an announcement repository based on a specified time period.",
            "key_types": [
              "context.Context",
              "time.Time",
              "gorm.DB",
              "config.Config",
              "repositories.AnnouncementRepo"
            ],
            "functions": [
              "main",
              "sentry.Init",
              "postgresql.NewClient",
              "repositories.NewAnnouncementRepo",
              "announcementRepo.ClearSpecialOffers"
            ],
            "imports": [
              "context",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking",
              "Connects to a PostgreSQL database",
              "Modifies the state of the announcement repository by clearing old special offers"
            ],
            "risks": [
              "Potential failure in Sentry initialization",
              "Database connection errors",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/ip_location": {
        "path": "cmd/ip_location",
        "purpose": "This folder/module is responsible for initializing a Sentry client for error tracking and downloading a new IP location database using Redis.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/database/redis",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/location"
        ],
        "architecture": "The folder follows a modular architecture pattern, focusing on separation of concerns by handling error tracking and database management in a single entry point.",
        "file_summaries": {
          "cmd/ip_location/main.go": {
            "language": "Go",
            "purpose": "This file initializes a Sentry client for error tracking and downloads a new IP location database using Redis.",
            "key_types": [
              "context.Context",
              "time.Time",
              "sentry.ClientOptions",
              "redis.Client",
              "location.Service"
            ],
            "functions": [
              "main",
              "sentry.Init",
              "redis.NewRedisClient",
              "location.NewService",
              "locationService.DownloadNewDB"
            ],
            "imports": [
              "context",
              "time",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/database/redis",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/location"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking",
              "Logs errors and process time"
            ],
            "risks": [
              "Potential exposure of sensitive information in logs",
              "Error handling may not cover all cases"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/trigger_announcement": {
        "path": "cmd/trigger_announcement",
        "purpose": "This folder/module is responsible for triggering announcements in the application.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the functionality related to triggering announcements and managing dependencies through service and repository layers.",
        "file_summaries": {
          "cmd/trigger_announcement/main.go": {
            "language": "Go",
            "purpose": "This file is the main entry point for triggering announcements in the application.",
            "key_types": [
              "context.Context",
              "error",
              "gorm.DB",
              "announcement.Service",
              "tracking.Service"
            ],
            "functions": [
              "main",
              "sentry.Init",
              "postgresql.NewClient",
              "repositories.NewAnnouncementRepo",
              "repositories.NewPreferencesRepo",
              "announcement.NewService",
              "announcementSvc.TriggerAnnouncement"
            ],
            "imports": [
              "context",
              "errors",
              "os",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking",
              "Establishes a database connection",
              "Triggers an announcement based on environment variable"
            ],
            "risks": [
              "Potential exposure of sensitive information through environment variables",
              "Error handling may not cover all cases leading to unhandled exceptions"
            ],
            "complexity": "medium"
          }
        }
      },
      "config": {
        "path": "config",
        "purpose": "This folder/module is responsible for defining and managing application configuration settings.",
        "languages": {
          "Go": 3,
          "YAML": 1
        },
        "key_modules": [
          "config/config.go",
          "config/config.yml",
          "config/func_print.go",
          "config/func_print_test.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/axieinfinity/ecosystem-go-common/sso",
          "github.com/inhies/go-bytesize",
          "github.com/mitchellh/mapstructure",
          "github.com/rs/zerolog",
          "github.com/spf13/viper",
          "github.com/axieinfinity/ronin-wallet-manager/database/redis",
          "github.com/axieinfinity/ronin-wallet-manager/httpclient",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/binance",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/location",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/moonpay",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/xauth"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing configuration-related files and separating concerns for configuration management and sensitive data handling.",
        "file_summaries": {
          "config/config.go": {
            "language": "Go",
            "purpose": "This file defines configuration structures and initializes application settings using viper for a service.",
            "key_types": [
              "Schema",
              "Server",
              "Sentry",
              "TLSConfig",
              "Logging",
              "Profiling"
            ],
            "functions": [
              "StringToByteSizeHookFunc",
              "Init"
            ],
            "imports": [
              "fmt",
              "reflect",
              "runtime",
              "strconv",
              "strings",
              "sync",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/axieinfinity/ecosystem-go-common/sso",
              "github.com/inhies/go-bytesize",
              "github.com/mitchellh/mapstructure",
              "github.com/rs/zerolog",
              "github.com/spf13/viper",
              "github.com/axieinfinity/ronin-wallet-manager/database/redis",
              "github.com/axieinfinity/ronin-wallet-manager/httpclient",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/binance",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/location",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/moonpay",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/xauth"
            ],
            "side_effects": [
              "Panic if the configuration file cannot be read",
              "Sets global logging level based on configuration"
            ],
            "risks": [
              "Potential exposure of sensitive configuration data if not handled properly"
            ],
            "complexity": "medium"
          },
          "config/config.yml": {
            "language": "YAML",
            "purpose": "Configuration file for a mobile wallet manager application, detailing various service settings and parameters.",
            "key_types": [
              "profiler",
              "server",
              "profiling",
              "auth_server",
              "sso_server",
              "sentry",
              "hmac_internal",
              "logging",
              "redis",
              "device_service",
              "postgres",
              "api_version",
              "ref_code",
              "moonpay",
              "announcement_config",
              "ip_location_config",
              "binance_config",
              "tracking_config",
              "external_auth_config",
              "hide_all_spotlights_config",
              "enable_quest_coming_soon_config",
              "disable_nft_portfolio_config",
              "enable_moonpay_config",
              "enable_transak_config",
              "hidden_tab_config",
              "blacklist_site_config"
            ],
            "functions": [],
            "imports": [],
            "risks": [
              "Exposure of sensitive information due to redacted keys and URLs.",
              "Potential for misconfiguration leading to security vulnerabilities."
            ],
            "complexity": "medium"
          },
          "config/func_print.go": {
            "language": "Go",
            "purpose": "This file contains functions to hide sensitive data in configuration structures.",
            "key_types": [
              "Schema",
              "viper.Viper"
            ],
            "functions": [
              "isSecretField",
              "hideSecret",
              "hideSensitiveDataInSlice",
              "hideSensitiveDataInMap",
              "hideSensitiveDataInStruct",
              "printConfigSafety"
            ],
            "imports": [
              "reflect",
              "strings",
              "github.com/mitchellh/mapstructure",
              "github.com/rs/zerolog/log",
              "github.com/spf13/viper"
            ],
            "side_effects": [
              "Modifies the input data structures to hide sensitive information."
            ],
            "risks": [
              "Potential exposure of sensitive data if the hiding logic is bypassed or fails."
            ],
            "complexity": "medium"
          },
          "config/func_print_test.go": {
            "language": "Go",
            "purpose": "Unit tests for functions that hide sensitive data in maps and slices.",
            "key_types": [
              "struct",
              "map",
              "slice"
            ],
            "functions": [
              "TestHideSecretInMap",
              "TestHideSecretInSlice"
            ],
            "imports": [
              "fmt",
              "testing"
            ],
            "side_effects": [
              "Prints test data to the console."
            ],
            "risks": [
              "Potential exposure of sensitive data if not handled properly."
            ],
            "complexity": "medium"
          }
        }
      },
      "database/redis": {
        "path": "database/redis",
        "purpose": "This folder/module is responsible for connecting to a Redis database and managing configurations for the connection.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "redis.go"
        ],
        "dependencies": [
          "github.com/prometheus/client_golang/prometheus",
          "github.com/redis/go-redis/extra/redisprometheus/v9",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating Redis connection logic and configuration management within a single Go file.",
        "file_summaries": {
          "database/redis/redis.go": {
            "language": "Go",
            "purpose": "This file provides functionality to connect to a Redis database and manage configurations for the connection.",
            "key_types": [
              "Redis",
              "Cache"
            ],
            "functions": [
              "NewRedisClient"
            ],
            "imports": [
              "context",
              "crypto/tls",
              "crypto/x509",
              "fmt",
              "os",
              "time",
              "github.com/prometheus/client_golang/prometheus",
              "github.com/redis/go-redis/extra/redisprometheus/v9",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log"
            ],
            "side_effects": [
              "Logs connection attempts and errors",
              "Registers a Prometheus collector for Redis metrics"
            ],
            "risks": [
              "Potential exposure of sensitive information if credentials are logged or mishandled",
              "Insecure TLS configuration if InsecureSkipVerify is set to true"
            ],
            "complexity": "medium"
          }
        }
      },
      "docs": {
        "path": "docs",
        "purpose": "This folder is responsible for documentation and configuration related to the HTTP client environment settings.",
        "languages": {
          "JSON": 1
        },
        "key_modules": [
          "http-client.env.json"
        ],
        "dependencies": [],
        "architecture": "The folder contains configuration files in a simple structure, focusing on environment settings for the HTTP client.",
        "file_summaries": {
          "docs/http-client.env.json": {
            "language": "JSON",
            "purpose": "Configuration file for HTTP client environment settings",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "handlers": {
        "path": "handlers",
        "purpose": "Responsible for handling various operations related to accounts, announcements, devices, DApps, and other services in a web application.",
        "languages": {
          "Go": 15
        },
        "key_modules": [
          "account.go",
          "announcement.go",
          "binance.go",
          "blacklist.go",
          "common.go",
          "dapp.go",
          "default.go",
          "device.go",
          "external_auth.go",
          "locationhandler.go",
          "moonpay.go",
          "network.go",
          "releasecandidate.go",
          "trusted_domain.go"
        ],
        "dependencies": [
          "github.com/labstack/echo/v4",
          "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/xauth",
          "github.com/redis/go-redis/v9",
          "gorm.io/gorm"
        ],
        "architecture": "The folder follows a modular architecture pattern, where each handler file encapsulates related functionalities and operations, promoting separation of concerns and maintainability.",
        "file_summaries": {
          "handlers/account.go": {
            "language": "Go",
            "purpose": "Handles account-related operations such as getting account info, linking accounts, refreshing tokens, and revoking tokens.",
            "key_types": [
              "AccountHandler",
              "accountHandler",
              "sso.Config",
              "sso.Client",
              "httpclient.Athena",
              "md.GetSMUserInfoResponse",
              "md.LinkAccountRequest",
              "md.OkResponse"
            ],
            "functions": [
              "GetAccountInfo",
              "LinkAccount",
              "RefreshToken",
              "RevokeToken",
              "NewAccountHandler"
            ],
            "imports": [
              "net/http",
              "strconv",
              "strings",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/sso",
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/httpclient",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Modifies the state of user accounts through linking and token operations.",
              "Logs debug information."
            ],
            "risks": [
              "Potential exposure of sensitive information if error handling is not properly implemented.",
              "Security risks associated with token management."
            ],
            "complexity": "medium"
          },
          "handlers/announcement.go": {
            "language": "Go",
            "purpose": "Handles announcements and preferences for a service, providing internal and public APIs for managing announcements.",
            "key_types": [
              "AnnouncementHandler",
              "announcementHandler",
              "md.ScheduleNewAnnouncementRequest",
              "md.ScheduleNewSpecialOfferRequest",
              "md.GetAnnouncementByID",
              "md.GetAnnouncementsListRequest",
              "md.InternalGetWalletPreferencesRequest",
              "md.InternalGetWalletPreferenceResponse",
              "md.PublicAnnouncementListItem",
              "md.ListResponse",
              "md.GetCountNewAnnouncementsRequest",
              "md.GetCountNewAnnouncementsResponse"
            ],
            "functions": [
              "InternalScheduleNewAnnouncement",
              "InternalScheduleNewSpecialOffer",
              "InternalGetAnnouncementByID",
              "InternalGetAnnouncementsList",
              "InternalMarkPublished",
              "InternalManualCleanPublishedJobs",
              "InternalDeleteAnnouncement",
              "InternalGetWalletPreferences",
              "PublicGetAnnouncementByID",
              "PublicGetAnnouncementsList",
              "PublicCountNewAnnouncements",
              "PrivateGetPreferences",
              "PrivateUpdatePreferences",
              "PrivateGetDevicePreference",
              "PrivateUpdateDevicePreference",
              "NewAnnouncementHandler"
            ],
            "imports": [
              "errors",
              "net/http",
              "slices",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/labstack/echo/v4",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/preference"
            ],
            "complexity": "medium"
          },
          "handlers/binance.go": {
            "language": "Go",
            "purpose": "This file defines a handler for signing requests using the Binance service.",
            "key_types": [
              "BinanceHandler",
              "binanceHandler",
              "binance.Service",
              "md.BinanceSignRequest",
              "md.BinanceSignResponse"
            ],
            "functions": [
              "Sign",
              "NewBinanceHandler"
            ],
            "imports": [
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/binance"
            ],
            "complexity": "medium"
          },
          "handlers/blacklist.go": {
            "language": "Go",
            "purpose": "Handles requests related to a blacklist of sites.",
            "key_types": [
              "BlacklistHandler",
              "blacklistHandler",
              "blacklist.Service",
              "md.ListResponse"
            ],
            "functions": [
              "NewBlacklistHandler",
              "GetBlacklistSites"
            ],
            "imports": [
              "net/http",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist"
            ],
            "complexity": "medium"
          },
          "handlers/common.go": {
            "language": "Go",
            "purpose": "This file defines a common handler for managing configurations and code versions in a web application.",
            "key_types": [
              "CommonHandler",
              "commonHandler",
              "repositories.CommonRepo",
              "repositories.CodeVersionRepo",
              "redis.Client",
              "blacklist.Service",
              "xauth.Config"
            ],
            "functions": [
              "GetCodePushVersion",
              "GetCommonConfig",
              "GetEncodedCommonConfig",
              "RefreshKnownContracts",
              "UpdateCommonConfig",
              "UpdateCodeVersion",
              "initCacheCodeVersion",
              "initCacheCommon",
              "fireCacheChangedEvent",
              "refreshCache",
              "ExternalAuthConfig",
              "NewCommonHandler"
            ],
            "imports": [
              "context",
              "encoding/json",
              "errors",
              "fmt",
              "net/http",
              "strings",
              "sync",
              "github.com/labstack/echo/v4",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/xauth",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Modifies cache for common configurations and code versions.",
              "Publishes events to Redis channels."
            ],
            "risks": [
              "Potential exposure of sensitive configuration data if not properly secured.",
              "Race conditions due to concurrent access to shared resources."
            ],
            "complexity": "medium"
          },
          "handlers/dapp.go": {
            "language": "Go",
            "purpose": "This file defines a handler for managing decentralized application (DApp) operations, including CRUD operations and public access to DApp data.",
            "key_types": [
              "DAppHandler",
              "dAppHandler",
              "SaveQuickAccessDAppRequest",
              "SaveQuickAccessDAppBatchRequest",
              "UpdateQuickAccessDAppRequest",
              "GetQuickAccessDAppByIDRequest",
              "Highlight",
              "ListResponse"
            ],
            "functions": [
              "InternalSave",
              "InternalSaveBatch",
              "InternalUpdate",
              "InternalUpdateOrder",
              "InternalGetByID",
              "InternalDeleteByID",
              "InternalGetAll",
              "InternalSaveHighlight",
              "InternalSaveBatchHighlight",
              "InternalUpdateHighlight",
              "InternalGetHighlightByID",
              "InternalDeleteHighlightByID",
              "InternalGetAllHighlight",
              "InternalRefreshCacheHighlight",
              "PublicGetList",
              "PublicGetHighlight",
              "NewDAppHandler"
            ],
            "imports": [
              "errors",
              "net/http",
              "strings",
              "github.com/labstack/echo/v4",
              "gorm.io/gorm",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "side_effects": [
              "Modifies the state of the DApp data in the database",
              "Interacts with external services for blacklist checks"
            ],
            "risks": [
              "Potential exposure of sensitive data if error handling is not properly managed",
              "Possible denial of service if the handler is overwhelmed with requests"
            ],
            "complexity": "medium"
          },
          "handlers/default.go": {
            "language": "Go",
            "purpose": "This file defines a handler function to retrieve agent information from the context.",
            "key_types": [
              "echo.Context",
              "models.AgentInfo"
            ],
            "functions": [
              "getAgentInfo"
            ],
            "imports": [
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "complexity": "low"
          },
          "handlers/device.go": {
            "language": "Go",
            "purpose": "Handles device-related operations such as resetting devices, registering devices, updating push tokens, syncing addresses, and importing wallets.",
            "key_types": [
              "DeviceHandler",
              "deviceHandler",
              "md.GetDeviceByIDRequest",
              "md.PostDeviceRegistrationRequest",
              "md.PutDeviceAddressesReq",
              "md.PostImportWalletReq"
            ],
            "functions": [
              "ResetDeviceByID",
              "Registration",
              "UpdatePushToken",
              "SyncAddresses",
              "ImportWallet",
              "NewDeviceHandler"
            ],
            "imports": [
              "context",
              "encoding/json",
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/preference"
            ],
            "side_effects": [
              "Logs information about device resets.",
              "Asynchronously initializes device registration if not ignoring existing."
            ],
            "risks": [
              "Potential exposure of sensitive data in logs if errors occur.",
              "Improper error handling may lead to unhandled exceptions."
            ],
            "complexity": "medium"
          },
          "handlers/external_auth.go": {
            "language": "Go",
            "purpose": "Handles external authentication processes, including exchanging auth codes and revoking tokens.",
            "key_types": [
              "ExternalAuthHandler",
              "externalAuthHandler",
              "xauth.Service"
            ],
            "functions": [
              "ExchangeAuthCode",
              "RevokeToken",
              "NewTwitterHandler"
            ],
            "imports": [
              "net/http",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/xauth"
            ],
            "side_effects": [
              "Sends HTTP responses based on authentication results."
            ],
            "complexity": "medium"
          },
          "handlers/locationhandler.go": {
            "language": "Go",
            "purpose": "Handles location-related requests and responses for a web service.",
            "key_types": [
              "LocationHandler",
              "locationHandler",
              "models.GetLocationRequest"
            ],
            "functions": [
              "PublicGetLocation",
              "InternalGetLocation",
              "InternalDownloadDB",
              "lookupLocation",
              "NewLocationHandler"
            ],
            "imports": [
              "errors",
              "net/http",
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/location"
            ],
            "side_effects": [
              "Logs debug information when looking up location."
            ],
            "risks": [
              "Potential exposure of internal service endpoints if not properly secured."
            ],
            "complexity": "medium"
          },
          "handlers/moonpay.go": {
            "language": "Go",
            "purpose": "Handles Moonpay URL signing requests",
            "key_types": [
              "MoonpayHandler",
              "moonpayHandler",
              "models.MoonpaySigningRequest",
              "models.MoonpaySigningResponse"
            ],
            "functions": [
              "SignURL",
              "NewMoonpayHandler"
            ],
            "imports": [
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/moonpay"
            ],
            "risks": [
              "Potential for error handling issues if the context or request binding fails"
            ],
            "complexity": "medium"
          },
          "handlers/network.go": {
            "language": "Go",
            "purpose": "This file defines a network handler for managing network-related operations in a web application.",
            "key_types": [
              "NetworkHandler",
              "networkHandler"
            ],
            "functions": [
              "GetDApps",
              "GetNetworkConfig",
              "getDAppsPublic",
              "getContractsPublic",
              "GetContracts",
              "GetAllConfigs"
            ],
            "imports": [
              "context",
              "encoding/json",
              "fmt",
              "net/http",
              "slices",
              "sort",
              "sync",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/hashicorp/go-version",
              "github.com/labstack/echo/v4",
              "github.com/mitchellh/mapstructure",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Modifies cache for DApps and contracts based on user agent information."
            ],
            "risks": [
              "Potential for cache poisoning if user agent information is manipulated."
            ],
            "complexity": "medium"
          },
          "handlers/releasecandidate.go": {
            "language": "Go",
            "purpose": "Handles release candidate features and configurations for a web service.",
            "key_types": [
              "ReleaseCandidateHandler",
              "releaseCandidateHandler",
              "models.CheckAllowFeatureRequest",
              "models.PostFeatureConfigRequest",
              "models.PostWhitelistFeaturesRequest",
              "models.PostSetConfigForDeviceRequest",
              "models.GetCountWhitelistDevices",
              "models.OkResponse"
            ],
            "functions": [
              "CheckAllowFeature",
              "SetFeatureConfig",
              "SetWhitelistFeatures",
              "SetConfigForDevice",
              "CountWhitelistDevices",
              "NewReleaseCandidateHandler"
            ],
            "imports": [
              "fmt",
              "net/http",
              "strconv",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/releasecandidate"
            ],
            "complexity": "medium"
          },
          "handlers/trusted_domain.go": {
            "language": "Go",
            "purpose": "Handles trusted domain operations including retrieval, saving, and deletion of trusted domains.",
            "key_types": [
              "TrustedDomainHandler",
              "trustedDomainHandler",
              "md.TrustedDomain",
              "md.GetTDMByDomainRequest",
              "md.SaveTrustedDomainBatchRequest",
              "md.ListResponse"
            ],
            "functions": [
              "PublicGetByDomain",
              "PublicGetAll",
              "InternalSave",
              "InternalSaveBatch",
              "InternalGetByDomain",
              "InternalDeleteByDomain",
              "InternalGetList",
              "validateAndNormalizeDomain",
              "normalizeDomain"
            ],
            "imports": [
              "errors",
              "net/http",
              "net/url",
              "regexp",
              "strings",
              "github.com/labstack/echo/v4",
              "gorm.io/gorm",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/trusteddomain"
            ],
            "side_effects": [
              "Modifies the state of trusted domains in the database.",
              "Interacts with external services for blacklist checks."
            ],
            "risks": [
              "Potential exposure of sensitive domain information.",
              "Improper validation may lead to security vulnerabilities."
            ],
            "complexity": "medium"
          }
        }
      },
      "httpclient": {
        "path": "httpclient",
        "purpose": "This folder/module is responsible for defining various HTTP clients for interacting with different APIs and managing device-related operations.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "athena.go",
          "device.go",
          "internal_client.go",
          "mercury.go",
          "tracking.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac"
        ],
        "architecture": "The folder follows a modular architecture pattern, with each file representing a specific client or functionality, utilizing interfaces and implementations for HTTP communication.",
        "file_summaries": {
          "httpclient/athena.go": {
            "language": "Go",
            "purpose": "This file defines an HTTP client for linking accounts using the Athena API.",
            "key_types": [
              "AthenaClientCfg",
              "Athena",
              "athenaClient"
            ],
            "functions": [
              "NewAthenaClient",
              "LinkAccount"
            ],
            "imports": [
              "bytes",
              "context",
              "encoding/json",
              "fmt",
              "net/http",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "complexity": "medium"
          },
          "httpclient/device.go": {
            "language": "Go",
            "purpose": "This file defines a DeviceClient interface and its implementation for managing device-related operations via HTTP requests.",
            "key_types": [
              "DeviceClient",
              "deviceClient",
              "InternalClient",
              "InternalClientConfig"
            ],
            "functions": [
              "GetDeviceByID",
              "ResetDeviceByID",
              "MigrateNotificationSettings",
              "Registration",
              "UpdatePushToken",
              "CreateDevice",
              "SyncDeviceAddresses",
              "NewDeviceClient"
            ],
            "imports": [
              "bytes",
              "context",
              "encoding/json",
              "fmt",
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Logs warnings for not registered devices during address synchronization."
            ],
            "risks": [
              "Potential exposure of sensitive information if SecretKey is not handled securely."
            ],
            "complexity": "medium"
          },
          "httpclient/internal_client.go": {
            "language": "Go",
            "purpose": "This file implements an internal HTTP client with HMAC authentication for making requests to a specified URL.",
            "key_types": [
              "InternalClientConfig",
              "InternalClient"
            ],
            "functions": [
              "SetUserAgent",
              "doRequestWithHMacAuth",
              "doRequest",
              "doRequestWithHMacAuthReturnRaw"
            ],
            "imports": [
              "encoding/json",
              "fmt",
              "io",
              "net/http",
              "strings",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac"
            ],
            "side_effects": [
              "Logs request details and errors using zerolog",
              "Modifies HTTP request headers"
            ],
            "risks": [
              "Potential exposure of sensitive information if SecretKey is logged or mishandled",
              "Improper error handling may lead to information leakage"
            ],
            "complexity": "medium"
          },
          "httpclient/mercury.go": {
            "language": "Go",
            "purpose": "This file defines a MercuryClient interface and its implementation for sending notifications via HTTP.",
            "key_types": [
              "MercuryClient",
              "mercuryClient",
              "InternalClient",
              "InternalClientConfig",
              "PostPushNotificationRequest"
            ],
            "functions": [
              "SendNotification",
              "NewMercuryClient"
            ],
            "imports": [
              "bytes",
              "context",
              "encoding/json",
              "fmt",
              "net/http",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Logs errors when notification sending fails"
            ],
            "risks": [
              "Potential exposure of sensitive data in logs if errors occur"
            ],
            "complexity": "medium"
          },
          "httpclient/tracking.go": {
            "language": "Go",
            "purpose": "This file implements a tracking client for sending tracking requests to a specified URL.",
            "key_types": [
              "TrackingClient",
              "trackingClient",
              "InternalClient",
              "InternalClientConfig"
            ],
            "functions": [
              "NewTracingClient",
              "Track",
              "TrackAsync"
            ],
            "imports": [
              "bytes",
              "context",
              "encoding/base64",
              "encoding/json",
              "fmt",
              "net/http"
            ],
            "side_effects": [
              "Sends HTTP requests to a tracking URL",
              "Performs asynchronous tracking requests"
            ],
            "risks": [
              "Potential exposure of API key in logs or error messages",
              "Asynchronous execution may lead to race conditions if not handled properly"
            ],
            "complexity": "medium"
          }
        }
      },
      "middleware": {
        "path": "middleware",
        "purpose": "This folder/module is responsible for implementing various middleware functionalities for an Echo web server, including request tracking, error handling, authentication, and API version checking.",
        "languages": {
          "Go": 8
        },
        "key_modules": [
          "custom_requests_total_prometheus.go",
          "error_handler.go",
          "internal_auth.go",
          "network_api_v1_checking.go",
          "tracking_internal_api.go",
          "user_agent_parsing.go",
          "wallet_auth.go"
        ],
        "dependencies": [
          "github.com/labstack/echo/v4",
          "github.com/labstack/echo-contrib/echoprometheus",
          "github.com/prometheus/client_golang/prometheus",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ecosystem-go-common/validation",
          "github.com/golang-jwt/jwt",
          "github.com/jackc/pgconn",
          "golang.org/x/oauth2",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
        ],
        "architecture": "The folder follows a modular architecture pattern, where each middleware file encapsulates specific functionalities and can be independently used within the Echo web framework.",
        "file_summaries": {
          "middleware/custom_requests_total_prometheus.go": {
            "language": "Go",
            "purpose": "This file defines a middleware for tracking custom HTTP requests using Prometheus metrics.",
            "key_types": [
              "echo.MiddlewareFunc",
              "prometheus.CounterVec",
              "prometheus.CounterOpts",
              "models.AgentInfo"
            ],
            "functions": [
              "NewCustomRequestsTotalPrometheus"
            ],
            "imports": [
              "github.com/labstack/echo-contrib/echoprometheus",
              "github.com/labstack/echo/v4",
              "github.com/prometheus/client_golang/prometheus",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Registers a new Prometheus counter metric",
              "Logs fatal errors if metric registration fails"
            ],
            "risks": [
              "Potential for logging sensitive information if user agent data is not handled properly"
            ],
            "complexity": "medium"
          },
          "middleware/error_handler.go": {
            "language": "Go",
            "purpose": "Handles errors globally for an Echo web server, formatting and logging them appropriately.",
            "key_types": [
              "echo.Context",
              "mErrs.Error",
              "jwt.ValidationError",
              "pgconn.PgError",
              "validation.Errors",
              "oauth2.RetrieveError"
            ],
            "functions": [
              "GlobalErrorHandler",
              "Init"
            ],
            "imports": [
              "context",
              "errors",
              "fmt",
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ecosystem-go-common/validation",
              "github.com/golang-jwt/jwt",
              "github.com/jackc/pgconn",
              "github.com/labstack/echo/v4",
              "github.com/labstack/echo/v4/middleware",
              "golang.org/x/oauth2"
            ],
            "side_effects": [
              "Logs error details to the server logs",
              "Sends JSON response to the client with error details"
            ],
            "risks": [
              "Potential exposure of sensitive error details in logs",
              "Improper handling of JWT errors may lead to unauthorized access"
            ],
            "complexity": "medium"
          },
          "middleware/internal_auth.go": {
            "language": "Go",
            "purpose": "Provides middleware for HMAC authentication in an HTTP server using the Echo framework.",
            "key_types": [
              "hmac.Config",
              "echo.Context",
              "echo.HandlerFunc"
            ],
            "functions": [
              "HmacAuthentication"
            ],
            "imports": [
              "fmt",
              "net/http",
              "regexp",
              "strings",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac"
            ],
            "side_effects": [
              "Modifies HTTP request handling based on HMAC validation."
            ],
            "risks": [
              "Potential for unauthorized access if HMAC validation fails."
            ],
            "complexity": "medium"
          },
          "middleware/network_api_v1_checking.go": {
            "language": "Go",
            "purpose": "Defines a middleware function to check if the API version is v1 and sets a context key accordingly.",
            "key_types": [
              "string",
              "echo.Context",
              "echo.MiddlewareFunc",
              "echo.HandlerFunc"
            ],
            "functions": [
              "NetworkAPIV1CheckingMiddleware"
            ],
            "imports": [
              "strings",
              "github.com/labstack/echo/v4"
            ],
            "side_effects": [
              "Sets a context key in the Echo framework"
            ],
            "complexity": "medium"
          },
          "middleware/tracking_internal_api.go": {
            "language": "Go",
            "purpose": "Defines a middleware for tracking API requests in an Echo web framework application.",
            "key_types": [
              "echo.MiddlewareFunc",
              "tracking.Service",
              "tracking.TrackingRequest",
              "tracking.Event"
            ],
            "functions": [
              "NewTrackingInternalAPIMiddleware"
            ],
            "imports": [
              "context",
              "time",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking"
            ],
            "side_effects": [
              "Asynchronously tracks API request data."
            ],
            "risks": [
              "Potential exposure of sensitive request data in tracking logs."
            ],
            "complexity": "medium"
          },
          "middleware/user_agent_parsing.go": {
            "language": "Go",
            "purpose": "Parses user agent strings to extract application, platform, and version information for middleware in a web application.",
            "key_types": [
              "echo.MiddlewareFunc",
              "models.AgentInfo"
            ],
            "functions": [
              "getAgentInfo",
              "NewUserAgentParsing"
            ],
            "imports": [
              "strings",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Modifies the context by setting the parsed user agent information."
            ],
            "complexity": "medium"
          },
          "middleware/wallet_auth.go": {
            "language": "Go",
            "purpose": "This file implements middleware for verifying wallet signatures in HTTP requests.",
            "key_types": [
              "hmac.Config",
              "echo.MiddlewareFunc",
              "error"
            ],
            "functions": [
              "VerifyWalletSignature",
              "newClockSkewValidator"
            ],
            "imports": [
              "fmt",
              "math",
              "net/http",
              "sort",
              "strings",
              "time",
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "side_effects": [
              "Logs request information"
            ],
            "risks": [
              "Potential for unauthorized access if wallet addresses are not properly whitelisted",
              "Signature validation failures may expose sensitive information"
            ],
            "complexity": "medium"
          }
        }
      },
      "migrations": {
        "path": "migrations",
        "purpose": "Responsible for defining and modifying the database schema and initializing data for a blockchain-related application.",
        "languages": {
          "SQL": 6
        },
        "key_modules": [
          "20230407150000_init.sql",
          "20231005150000_add_announcement.sql",
          "20240111120000_alter_preferences.sql",
          "20240206110000_add_trusted_domain.sql",
          "20240410140000_add_dapp_highlight.sql",
          "20240808130000_alter_preferences.sql"
        ],
        "dependencies": [],
        "architecture": "The folder follows a version-controlled migration pattern, where each SQL file represents a specific change to the database schema, allowing for incremental updates and rollbacks.",
        "file_summaries": {
          "migrations/20230407150000_init.sql": {
            "language": "SQL",
            "purpose": "Defines database schema and initializes data for a blockchain-related application.",
            "key_types": [
              "networks",
              "contracts",
              "d_apps",
              "commons",
              "code_versions",
              "contract_type",
              "dapp_url"
            ],
            "functions": [],
            "imports": [],
            "side_effects": [
              "Creates database tables and types",
              "Inserts initial data into tables"
            ],
            "risks": [
              "Potential SQL injection if user input is not properly sanitized",
              "Data integrity risks if foreign key constraints are not enforced"
            ],
            "complexity": "medium"
          },
          "migrations/20231005150000_add_announcement.sql": {
            "language": "SQL",
            "purpose": "This file contains database migration scripts to create and drop tables related to announcements, special offers, and user preferences.",
            "key_types": [
              "UUID",
              "VARCHAR",
              "TEXT",
              "JSONB",
              "TIMESTAMP"
            ],
            "functions": [
              "CREATE TABLE",
              "CREATE INDEX",
              "DROP TABLE"
            ],
            "imports": [],
            "side_effects": [
              "Creates tables and indexes in the database",
              "Modifies the database schema"
            ],
            "risks": [
              "Potential for SQL injection if user input is not properly sanitized",
              "Data loss if DROP TABLE commands are executed without backups"
            ],
            "complexity": "medium"
          },
          "migrations/20240111120000_alter_preferences.sql": {
            "language": "SQL",
            "purpose": "This file contains migration scripts to alter the preferences table in a database.",
            "key_types": [
              "TABLE",
              "COLUMN",
              "INDEX"
            ],
            "functions": [
              "ALTER TABLE",
              "CREATE INDEX",
              "DELETE"
            ],
            "imports": [],
            "side_effects": [
              "Modifies the database schema",
              "Changes default values",
              "Creates and drops constraints"
            ],
            "risks": [
              "Potential data loss during deletion",
              "Integrity issues if constraints are not properly managed"
            ],
            "complexity": "medium"
          },
          "migrations/20240206110000_add_trusted_domain.sql": {
            "language": "SQL",
            "purpose": "Defines database schema for trusted domains and quick access D apps.",
            "key_types": [
              "trusted_domains",
              "quick_access_d_apps"
            ],
            "functions": [],
            "imports": [],
            "side_effects": [
              "Creates tables in the database",
              "Creates an index on quick_access_d_apps"
            ],
            "complexity": "medium"
          },
          "migrations/20240410140000_add_dapp_highlight.sql": {
            "language": "SQL",
            "purpose": "This file contains database migration scripts to modify the schema of a database, including creating extensions, altering tables, and creating new tables and indexes.",
            "key_types": [
              "TABLE",
              "INDEX",
              "COLLATION",
              "EXTENSION"
            ],
            "functions": [
              "CREATE EXTENSION",
              "CREATE COLLATION",
              "ALTER TABLE",
              "CREATE INDEX",
              "CREATE TABLE"
            ],
            "imports": [],
            "side_effects": [
              "Modifies the database schema",
              "Creates new tables and indexes"
            ],
            "risks": [
              "Potential data loss if rollback is not handled properly",
              "Schema changes may affect application functionality"
            ],
            "complexity": "medium"
          },
          "migrations/20240808130000_alter_preferences.sql": {
            "language": "SQL",
            "purpose": "This file contains migration scripts to create and drop an index on the preferences table.",
            "key_types": [
              "INDEX",
              "TABLE"
            ],
            "functions": [
              "CREATE INDEX",
              "DROP INDEX"
            ],
            "imports": [],
            "side_effects": [
              "Modifies the database schema by adding or removing an index."
            ],
            "risks": [
              "Potential performance impact on the database during index creation or deletion."
            ],
            "complexity": "low"
          }
        }
      },
      "models": {
        "path": "models",
        "purpose": "Defines data structures and methods for various application functionalities including user management, notifications, blockchain interactions, and device management.",
        "languages": {
          "Go": 30
        },
        "key_modules": [
          "account.go",
          "announcement.go",
          "app.go",
          "binance.go",
          "blacklist.go",
          "chain.go",
          "common.go",
          "contract.go",
          "default.go",
          "device.go",
          "external_auth.go",
          "highlight.go",
          "ip_locations.go",
          "moonpay.go",
          "network.go",
          "notification.go",
          "preference.go",
          "quickaccess.go",
          "ref_code.go",
          "releasecandidate.go",
          "trusted_domain.go",
          "useragent.go"
        ],
        "dependencies": [
          "database/sql",
          "encoding/json",
          "errors",
          "mime/multipart",
          "strconv",
          "strings",
          "time",
          "github.com/ethereum/go-ethereum/common",
          "github.com/mitchellh/mapstructure",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
          "sync"
        ],
        "architecture": "The folder follows a modular architecture pattern, where each file encapsulates related data structures and methods, promoting separation of concerns and maintainability.",
        "file_summaries": {
          "models/account.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling user information and token management in an authentication context.",
            "key_types": [
              "GetSMUserInfoRequest",
              "GetSMUserInfoResponse",
              "LinkAccountRequest",
              "RefreshTokenRequest",
              "RevokeTokenRequest"
            ],
            "functions": [
              "ToAuthOptions"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "models/announcement.go": {
            "language": "Go",
            "purpose": "Defines models and methods for handling announcements and related notifications.",
            "key_types": [
              "Buttons",
              "Announcement",
              "PublicAnnouncementListItem",
              "PublicAnnouncement",
              "ScheduleNewAnnouncementRequest",
              "ScheduleNewSpecialOfferRequest",
              "SpecialOffer"
            ],
            "functions": [
              "Scan",
              "Value",
              "createNotificationData",
              "ToPushNotificationRequest",
              "ToTargetPushNotificationRequest",
              "ToPublicListItem",
              "ToPublicFullContent",
              "ToAnnouncement",
              "ToAnnouncement (ScheduleNewSpecialOfferRequest)"
            ],
            "imports": [
              "database/sql/driver",
              "encoding/json",
              "errors",
              "mime/multipart",
              "strconv",
              "strings",
              "time",
              "github.com/ethereum/go-ethereum/common",
              "github.com/mitchellh/mapstructure",
              "github.com/rs/zerolog/log"
            ],
            "side_effects": [
              "Logs errors when JSON unmarshalling fails in ToAnnouncement methods."
            ],
            "complexity": "medium"
          },
          "models/app.go": {
            "language": "Go",
            "purpose": "Defines data structures for code versioning and updates, including conversion methods.",
            "key_types": [
              "CodeVersion",
              "UpdateCodeVersionRequest",
              "EnvironmentConfig"
            ],
            "functions": [
              "ToCodeVersion"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "models/binance.go": {
            "language": "Go",
            "purpose": "Defines data structures for signing requests and responses for Binance.",
            "key_types": [
              "BinanceSignRequest",
              "BinanceSignResponse"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "models/blacklist.go": {
            "language": "Go",
            "purpose": "Defines a request structure for getting blacklist sites.",
            "key_types": [
              "GetBlacklistSitesReq",
              "Paging",
              "AgentInfo"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "models/chain.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for a blockchain chain model.",
            "key_types": [
              "ChainConfig",
              "Network",
              "Contract",
              "DApp",
              "GasPrice"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "models/common.go": {
            "language": "Go",
            "purpose": "Defines data models for common structures used in the application.",
            "key_types": [
              "Common",
              "SupportURL",
              "KnownContract",
              "KnownContracts"
            ],
            "functions": [],
            "imports": [
              "encoding/json",
              "time"
            ],
            "complexity": "medium"
          },
          "models/contract.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling smart contract information and metadata.",
            "key_types": [
              "ContractType",
              "ERC721Type",
              "ERC1155Type",
              "Metadata",
              "Contract",
              "ContractResponse",
              "ContractFilter",
              "CreateContractRequest",
              "UpdateContractRequest",
              "GetContractByIDRequest",
              "ERC20Metadata",
              "ERC721Metadata",
              "ERC1155Metadata",
              "DAppURL",
              "DAppURLSlice",
              "StringSlice",
              "InjectScript"
            ],
            "functions": [
              "Scan",
              "Value",
              "MarshalJSON",
              "UnmarshalJSON",
              "Copy",
              "ToMap",
              "ToContract"
            ],
            "imports": [
              "database/sql",
              "database/sql/driver",
              "encoding/json",
              "errors",
              "fmt",
              "strings",
              "time",
              "github.com/mitchellh/mapstructure",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "complexity": "medium"
          },
          "models/default.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling responses and pagination.",
            "key_types": [
              "OkResponse",
              "Paging",
              "Preload",
              "ListResponse"
            ],
            "functions": [
              "GetPage",
              "GetOffset",
              "GetLimit"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "models/device.go": {
            "language": "Go",
            "purpose": "Defines data structures for device management and related requests.",
            "key_types": [
              "Device",
              "GetDeviceByIDRequest",
              "PostDeviceRegistrationRequest",
              "PutWalletDeviceUpdatePushToken",
              "PostImportWalletReq",
              "PutDeviceAddressesReq"
            ],
            "functions": [],
            "imports": [
              "time",
              "github.com/ethereum/go-ethereum/common"
            ],
            "complexity": "medium"
          },
          "models/external_auth.go": {
            "language": "Go",
            "purpose": "Defines data structures for handling OAuth authentication requests and responses.",
            "key_types": [
              "XExchangeAuthCodeReq",
              "XRefreshAccessTokenReq",
              "XAccessTokenInfo",
              "XAccessTokenRes",
              "OAuthConfig"
            ],
            "functions": [],
            "imports": [],
            "complexity": "medium"
          },
          "models/highlight.go": {
            "language": "Go",
            "purpose": "Defines data models and request/response structures for highlights in an application.",
            "key_types": [
              "Highlight",
              "InternalHighlightResponse",
              "GetHighlightRequest",
              "SaveHighlightRequest",
              "SaveHighlightBatchRequest",
              "GetHighlightsListResponse",
              "UpdateHighlightRequest",
              "UpdateHighlightBatchRequest",
              "GetHighlightByIDRequest"
            ],
            "functions": [
              "ToInternalResponse",
              "ToDApp",
              "ToUpdateMap"
            ],
            "imports": [
              "time",
              "github.com/mitchellh/mapstructure"
            ],
            "complexity": "medium"
          },
          "models/ip_locations.go": {
            "language": "Go",
            "purpose": "Defines data models for IP location information and a request structure for fetching location data based on an IP address.",
            "key_types": [
              "IPLocation",
              "GetLocationRequest"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "models/moonpay.go": {
            "language": "Go",
            "purpose": "Defines data structures for Moonpay signing requests and responses.",
            "key_types": [
              "MoonpaySigningRequest",
              "MoonpaySigningResponse"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "models/network.go": {
            "language": "Go",
            "purpose": "Defines the Network model and related request structures for managing blockchain network data.",
            "key_types": [
              "Network",
              "GasPrice",
              "GetNetworkRequest",
              "GetDAppsRequest",
              "GetContractsRequest",
              "NetworkFilter",
              "NetworkOrderBy",
              "CreateNetworkRequest",
              "UpdateNetworkRequest",
              "GetNetworkByIDRequest"
            ],
            "functions": [
              "GetCacheDApps",
              "GetCacheContracts",
              "ToMap",
              "ToNetWork"
            ],
            "imports": [
              "sync",
              "time",
              "github.com/mitchellh/mapstructure",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "complexity": "medium"
          },
          "models/notification.go": {
            "language": "Go",
            "purpose": "Defines data structures and constants for managing push notifications and their recipients.",
            "key_types": [
              "DeviceStatus",
              "PushRecipient",
              "DevicePlatform",
              "RecipientFilterField",
              "RecipientFilter",
              "Recipient",
              "Payload",
              "PostPushNotificationRequest"
            ],
            "functions": [
              "ParsePlatform"
            ],
            "imports": [
              "strings"
            ],
            "complexity": "medium"
          },
          "models/preference.go": {
            "language": "Go",
            "purpose": "Defines data models for user preferences and filters related to device preferences.",
            "key_types": [
              "Preference",
              "PreferenceFilter",
              "DevicePreferences"
            ],
            "functions": [
              "ToMap"
            ],
            "imports": [
              "time",
              "github.com/mitchellh/mapstructure"
            ],
            "complexity": "medium"
          },
          "models/quickaccess.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for managing quick access decentralized applications (DApps).",
            "key_types": [
              "QuickAccessDApp",
              "SaveQuickAccessDAppRequest",
              "InternalQuickAccessDAppResponse",
              "GetQuickAccessDAppByIDRequest",
              "SaveQuickAccessDAppBatchRequest",
              "GetQuickAccessListRequest",
              "SearchDAppRequest",
              "GetQuickAccessListResponse",
              "UpdateQuickAccessOrderRequest",
              "UpdateQuickAccessDAppRequest",
              "UpdateQuickAccessDAppBatchRequest"
            ],
            "functions": [
              "ToInternalResponse",
              "ToDApp",
              "ToUpdateMap"
            ],
            "imports": [
              "time",
              "github.com/mitchellh/mapstructure"
            ],
            "complexity": "medium"
          },
          "models/ref_code.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for managing referral codes and wallets.",
            "key_types": [
              "ReferralCode",
              "ReferralCodeFilter",
              "ReferralCodeOrderBy",
              "ReferralWallet",
              "ReferralWalletFilter",
              "ReferralWalletOrderBy",
              "SubmitSelfGenCode",
              "UpdateRefCodeStatus",
              "GetCodeByOwner",
              "GetReferralWalletsRequest",
              "GenerateCodeRequest",
              "SubmitReferralCodeRequest",
              "GetSubmittedRefCode",
              "VerifyReferralCode"
            ],
            "functions": [
              "ToMap (ReferralCodeFilter)",
              "ToMap (ReferralWalletFilter)",
              "ToReferralCode (SubmitSelfGenCode)"
            ],
            "imports": [
              "strings",
              "time",
              "github.com/mitchellh/mapstructure",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "complexity": "medium"
          },
          "models/releasecandidate.go": {
            "language": "Go",
            "purpose": "Defines request structures for feature management in a device context.",
            "key_types": [
              "CheckAllowFeatureRequest",
              "PostFeatureConfigRequest",
              "PostWhitelistFeaturesRequest",
              "PostSetConfigForDeviceRequest",
              "GetCountWhitelistDevices"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "models/trusted_domain.go": {
            "language": "Go",
            "purpose": "Defines models and request structures for managing trusted domains in an application.",
            "key_types": [
              "TrustedDomain",
              "GetTDMByDomainRequest",
              "SaveTrustedDomainBatchRequest",
              "TrustedDomainFilter",
              "TrustedDomainOrderBy",
              "GetListTDMRequest"
            ],
            "functions": [
              "ToMap"
            ],
            "imports": [
              "time",
              "github.com/mitchellh/mapstructure"
            ],
            "complexity": "medium"
          },
          "models/useragent.go": {
            "language": "Go",
            "purpose": "Defines a structure for user agent information and provides a method to check if the agent information is empty.",
            "key_types": [
              "AgentInfo"
            ],
            "functions": [
              "IsEmpty"
            ],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "pkg/announcement": {
        "path": "pkg/announcement",
        "purpose": "This folder/module is responsible for managing announcements, including scheduling, retrieving, and deleting announcements.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "announcement_svc.go",
          "config.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/getsentry/sentry-go",
          "github.com/h2non/filetype",
          "github.com/labstack/echo/v4",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "k8s.io/api/batch/v1",
          "k8s.io/api/core/v1",
          "k8s.io/apimachinery/pkg/api/resource",
          "k8s.io/apimachinery/pkg/apis/meta/v1",
          "k8s.io/client-go/kubernetes",
          "k8s.io/client-go/plugin/pkg/client/auth/gcp",
          "k8s.io/client-go/rest",
          "k8s.io/client-go/tools/clientcmd",
          "k8s.io/client-go/util/homedir",
          "github.com/axieinfinity/ronin-wallet-manager/httpclient",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/gcs",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/worker",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating the logic for announcement management within dedicated service and configuration files.",
        "file_summaries": {
          "pkg/announcement/announcement_svc.go": {
            "language": "Go",
            "purpose": "This file implements a service for managing announcements, including scheduling, retrieving, and deleting announcements.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "Announcement",
              "GetAnnouncementByID",
              "GetAnnouncementsListRequest",
              "ScheduleNewAnnouncementRequest",
              "ScheduleNewSpecialOfferRequest"
            ],
            "functions": [
              "GetByID",
              "GetListAsAdmin",
              "GetListAsUser",
              "ScheduleNewAnnouncement",
              "ScheduleNewSpecialOffer",
              "processImage",
              "processTargetAddresses"
            ],
            "imports": [
              "bytes",
              "context",
              "encoding/csv",
              "errors",
              "flag",
              "fmt",
              "image",
              "mime/multipart",
              "path/filepath",
              "slices",
              "strings",
              "sync",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/getsentry/sentry-go",
              "github.com/h2non/filetype",
              "github.com/labstack/echo/v4",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "k8s.io/api/batch/v1",
              "k8s.io/api/core/v1",
              "k8s.io/apimachinery/pkg/api/resource",
              "k8s.io/apimachinery/pkg/apis/meta/v1",
              "k8s.io/client-go/kubernetes",
              "k8s.io/client-go/plugin/pkg/client/auth/gcp",
              "k8s.io/client-go/rest",
              "k8s.io/client-go/tools/clientcmd",
              "k8s.io/client-go/util/homedir",
              "github.com/axieinfinity/ronin-wallet-manager/httpclient",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/gcs",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/worker",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Uploads images to GCS",
              "Deletes images from GCS on error"
            ],
            "risks": [
              "Potential for file size and type validation issues",
              "Error handling may expose sensitive information"
            ],
            "complexity": "medium"
          },
          "pkg/announcement/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for an announcement service, including communication, storage, and Kubernetes settings.",
            "key_types": [
              "CommunicationServiceCfg",
              "StorageConfig",
              "BankerConfig",
              "EnvConfig",
              "K8sConfig",
              "Config"
            ],
            "functions": [],
            "imports": [
              "time",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/gcs",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/worker"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/binance": {
        "path": "pkg/binance",
        "purpose": "Responsible for handling Binance-specific configurations and services, particularly for signing payloads using ECDSA.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "service.go"
        ],
        "dependencies": [
          "context",
          "crypto/ecdsa",
          "crypto/rand",
          "encoding/base64",
          "github.com/decred/dcrd/dcrec/secp256k1/v4"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating configuration and service functionalities related to Binance, promoting separation of concerns.",
        "file_summaries": {
          "pkg/binance/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for Binance with a private key.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/binance/service.go": {
            "language": "Go",
            "purpose": "Provides a service for signing payloads using ECDSA.",
            "key_types": [
              "Service",
              "service",
              "Config"
            ],
            "functions": [
              "Sign",
              "NewService"
            ],
            "imports": [
              "context",
              "crypto/ecdsa",
              "crypto/rand",
              "encoding/base64",
              "github.com/decred/dcrd/dcrec/secp256k1/v4"
            ],
            "risks": [
              "Potential exposure of private key if not handled securely"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/blacklist": {
        "path": "pkg/blacklist",
        "purpose": "Responsible for managing blacklists and feature flags based on user agent information.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "service.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-manager/models"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating configuration and service logic for blacklist management.",
        "file_summaries": {
          "pkg/blacklist/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for managing blacklists and feature flags.",
            "key_types": [
              "BlacklistConfig",
              "Versions",
              "FeatureFlagConfig"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/blacklist/service.go": {
            "language": "Go",
            "purpose": "Provides a service interface for managing blacklisted sites and feature flags based on user agent information.",
            "key_types": [
              "Service",
              "service",
              "BlacklistConfig",
              "FeatureFlagConfig",
              "models.AgentInfo"
            ],
            "functions": [
              "NewBlacklistService",
              "GetBlacklistSites",
              "GetHiddenTabs",
              "ShouldHideAllSpotlight",
              "ShouldShowQuestComingSoon",
              "ShouldEnableMoonpay",
              "ShouldEnableTransak",
              "ShouldDisableNFTTab",
              "DisableNFTTransfer",
              "DisableHomeBanner",
              "isCfgAvailable"
            ],
            "imports": [
              "strings",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/crypto/hmac": {
        "path": "pkg/crypto/hmac",
        "purpose": "This folder/module is responsible for providing HMAC functionality, including signing and validating signatures with support for configuration and clock skew management.",
        "languages": {
          "Go": 6
        },
        "key_modules": [
          "config.go",
          "funcs.go",
          "funcs_test.go",
          "hmac.go",
          "hmac_test.go",
          "init.go"
        ],
        "dependencies": [
          "crypto/hmac",
          "crypto/sha256",
          "crypto/sha512",
          "encoding/base64",
          "errors",
          "fmt",
          "math",
          "net/http",
          "sort",
          "strings",
          "sync",
          "testing",
          "time"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating HMAC-related functionalities and tests in separate files, promoting separation of concerns and maintainability.",
        "file_summaries": {
          "pkg/crypto/hmac/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for HMAC with normalization of whitelist addresses.",
            "key_types": [
              "Config"
            ],
            "functions": [
              "NormalizeWhitelistAddresses"
            ],
            "imports": [
              "strings"
            ],
            "complexity": "medium"
          },
          "pkg/crypto/hmac/funcs.go": {
            "language": "Go",
            "purpose": "Provides HMAC signing functions using SHA256 and SHA512 algorithms.",
            "key_types": [
              "[]byte",
              "map[string]string"
            ],
            "functions": [
              "SHA256",
              "SHA512",
              "Sign"
            ],
            "imports": [
              "crypto/hmac",
              "crypto/sha256",
              "crypto/sha512",
              "encoding/base64",
              "errors",
              "fmt",
              "sort",
              "strings"
            ],
            "side_effects": [
              "Modifies the order of parameters for signing",
              "Generates HMAC signatures"
            ],
            "risks": [
              "Potential for timing attacks if not implemented securely",
              "Improper handling of secret keys may lead to exposure"
            ],
            "complexity": "medium"
          },
          "pkg/crypto/hmac/funcs_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the HMAC signing function.",
            "key_types": [
              "map[string]string",
              "struct",
              "[]struct"
            ],
            "functions": [
              "TestSign"
            ],
            "imports": [
              "testing",
              "time"
            ],
            "complexity": "medium"
          },
          "pkg/crypto/hmac/hmac.go": {
            "language": "Go",
            "purpose": "Provides HMAC functionality for validating signatures with clock skew allowance.",
            "key_types": [
              "HMAC",
              "Config"
            ],
            "functions": [
              "New",
              "validateClockSkew",
              "ValidateSignature"
            ],
            "imports": [
              "encoding/base64",
              "errors",
              "fmt",
              "math",
              "net/http",
              "sort",
              "time"
            ],
            "side_effects": [
              "Prints error messages to console"
            ],
            "risks": [
              "Potential for time-based attacks if clock skew is not properly managed"
            ],
            "complexity": "medium"
          },
          "pkg/crypto/hmac/hmac_test.go": {
            "language": "Go",
            "purpose": "Unit tests for HMAC validation functions, checking clock skew and signature validation.",
            "key_types": [
              "Config",
              "HMAC"
            ],
            "functions": [
              "TestHMAC_validateClockSkew",
              "TestHMAC_ValidateSignature"
            ],
            "imports": [
              "testing",
              "time"
            ],
            "complexity": "medium"
          },
          "pkg/crypto/hmac/init.go": {
            "language": "Go",
            "purpose": "This file initializes a singleton instance of the HMAC struct with a configuration.",
            "key_types": [
              "HMAC",
              "Config"
            ],
            "functions": [
              "init",
              "InitInstance"
            ],
            "imports": [
              "sync"
            ],
            "side_effects": [
              "Initializes a global instance of HMAC if not already initialized."
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/dapp": {
        "path": "pkg/dapp",
        "purpose": "Responsible for managing decentralized applications (dApps) including configuration, service management, and CRUD operations.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "d_app_svc.go"
        ],
        "dependencies": [
          "github.com/getsentry/sentry-go",
          "github.com/hashicorp/go-version",
          "github.com/jellydator/ttlcache/v3",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, focusing on modular components for configuration and service management.",
        "file_summaries": {
          "pkg/dapp/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for a decentralized application.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/dapp/d_app_svc.go": {
            "language": "Go",
            "purpose": "This file defines a service for managing quick access decentralized applications (dApps) and highlights, including CRUD operations and caching mechanisms.",
            "key_types": [
              "Service",
              "svc",
              "Config"
            ],
            "functions": [
              "Save",
              "SaveBatch",
              "Update",
              "UpdateBatch",
              "GetList",
              "GetAll",
              "GetByID",
              "DeleteByID",
              "UpdateOrder",
              "SaveHighlight",
              "SaveBatchHighlight",
              "UpdateHighlight",
              "UpdateBatchHighlight",
              "GetAllHighlight",
              "GetHighlightByID",
              "DeleteHighlightByID"
            ],
            "imports": [
              "context",
              "fmt",
              "slices",
              "sync",
              "time",
              "github.com/getsentry/sentry-go",
              "github.com/hashicorp/go-version",
              "github.com/jellydator/ttlcache/v3",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Publishing messages to refresh cache asynchronously"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/device": {
        "path": "pkg/device",
        "purpose": "Responsible for managing device-related services and configurations.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "service.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-manager/httpclient",
          "github.com/ethereum/go-ethereum/common",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
        ],
        "architecture": "The folder follows a service-oriented architecture, encapsulating device management functionalities and configurations in separate files.",
        "file_summaries": {
          "pkg/device/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for device services.",
            "key_types": [
              "ServiceConfig",
              "Config"
            ],
            "functions": [],
            "imports": [
              "github.com/axieinfinity/ronin-wallet-manager/httpclient"
            ],
            "complexity": "low"
          },
          "pkg/device/service.go": {
            "language": "Go",
            "purpose": "Provides a service for managing devices, including operations like getting, resetting, and creating devices.",
            "key_types": [
              "Service",
              "service",
              "Config"
            ],
            "functions": [
              "GetDeviceByID",
              "ResetDeviceByID",
              "MigrateNotificationSettings",
              "Registration",
              "UpdatePushToken",
              "CreateDevice",
              "SyncDeviceAddresses",
              "NewService"
            ],
            "imports": [
              "context",
              "strings",
              "github.com/ethereum/go-ethereum/common",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/httpclient",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "side_effects": [
              "Logs errors using zerolog"
            ],
            "risks": [
              "Potential for nil pointer dereference if apiClients is not properly initialized"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/gcs": {
        "path": "pkg/gcs",
        "purpose": "Responsible for interacting with Google Cloud Storage, including file uploads, deletions, and downloads.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "service.go"
        ],
        "dependencies": [
          "cloud.google.com/go/storage",
          "github.com/rs/zerolog/log"
        ],
        "architecture": "The folder follows a service-oriented architecture, encapsulating configuration and service logic for Google Cloud Storage operations.",
        "file_summaries": {
          "pkg/gcs/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for Google Cloud Storage.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/gcs/service.go": {
            "language": "Go",
            "purpose": "Provides a service for uploading, deleting, and downloading files to/from Google Cloud Storage.",
            "key_types": [
              "Service",
              "service",
              "Config"
            ],
            "functions": [
              "UploadFile",
              "DeleteFile",
              "DownloadFile",
              "NewService"
            ],
            "imports": [
              "context",
              "fmt",
              "io",
              "time",
              "cloud.google.com/go/storage",
              "github.com/rs/zerolog/log"
            ],
            "side_effects": [
              "Interacts with Google Cloud Storage",
              "Logs errors using zerolog"
            ],
            "risks": [
              "Potential exposure of sensitive data if file URLs are not secured",
              "Error handling may lead to unhandled exceptions"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/helper": {
        "path": "pkg/helper",
        "purpose": "Provides various helper functions for encryption, file handling, token generation, and utility operations.",
        "languages": {
          "Go": 8
        },
        "key_modules": [
          "aes.go",
          "binder.go",
          "hmac_token.go",
          "pointer.go",
          "random.go",
          "ronin.go",
          "slice.go",
          "tls.go"
        ],
        "dependencies": [
          "crypto/aes",
          "crypto/cipher",
          "crypto/rand",
          "crypto/sha256",
          "encoding/base64",
          "encoding/json",
          "io",
          "fmt",
          "mime/multipart",
          "reflect",
          "strings",
          "github.com/labstack/echo/v4",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac",
          "github.com/ethereum/go-ethereum/common",
          "github.com/ethereum/go-ethereum/common/hexutil",
          "github.com/ethereum/go-ethereum/crypto",
          "crypto/tls",
          "crypto/x509"
        ],
        "architecture": "The folder follows a modular architecture pattern, where each file encapsulates related functionalities, promoting separation of concerns and reusability.",
        "file_summaries": {
          "pkg/helper/aes.go": {
            "language": "Go",
            "purpose": "Provides helper functions for AES encryption",
            "key_types": [
              "string",
              "[]byte",
              "interface{}",
              "error"
            ],
            "functions": [
              "hashKey",
              "EncryptEAS"
            ],
            "imports": [
              "crypto/aes",
              "crypto/cipher",
              "crypto/rand",
              "crypto/sha256",
              "encoding/base64",
              "encoding/json",
              "io"
            ],
            "side_effects": [
              "Generates random initialization vector",
              "Encodes output to base64"
            ],
            "risks": [
              "Potential for cryptographic vulnerabilities if key management is poor"
            ],
            "complexity": "medium"
          },
          "pkg/helper/binder.go": {
            "language": "Go",
            "purpose": "Provides helper functions for binding multipart file uploads in an Echo web framework context.",
            "key_types": [
              "BindFunc",
              "multipart.FileHeader"
            ],
            "functions": [
              "Bind",
              "NewBindWithHeaders",
              "NewBindFile",
              "echoBindFile",
              "getFiles"
            ],
            "imports": [
              "fmt",
              "mime/multipart",
              "reflect",
              "strings",
              "github.com/labstack/echo/v4"
            ],
            "complexity": "medium"
          },
          "pkg/helper/hmac_token.go": {
            "language": "Go",
            "purpose": "Generates an HMAC access token for authentication purposes.",
            "key_types": [
              "string",
              "error"
            ],
            "functions": [
              "GenerateHMACAccessToken"
            ],
            "imports": [
              "fmt",
              "strings",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac"
            ],
            "complexity": "medium"
          },
          "pkg/helper/pointer.go": {
            "language": "Go",
            "purpose": "Defines a generic function to create a pointer to a value of any type.",
            "key_types": [
              "T"
            ],
            "functions": [
              "NewPointer"
            ],
            "imports": [],
            "complexity": "low"
          },
          "pkg/helper/random.go": {
            "language": "Go",
            "purpose": "Generates a random string of specified length using alphanumeric characters.",
            "key_types": [
              "rune",
              "int",
              "big.Int"
            ],
            "functions": [
              "RandStr"
            ],
            "imports": [
              "crypto/rand",
              "math/big"
            ],
            "complexity": "medium"
          },
          "pkg/helper/ronin.go": {
            "language": "Go",
            "purpose": "Provides utility functions for normalizing Ethereum addresses, hashing messages, and validating signatures.",
            "key_types": [
              "string",
              "common.Hash"
            ],
            "functions": [
              "NormalizeAddress",
              "HashMessage",
              "IsValidSignature"
            ],
            "imports": [
              "fmt",
              "strings",
              "github.com/ethereum/go-ethereum/common",
              "github.com/ethereum/go-ethereum/common/hexutil",
              "github.com/ethereum/go-ethereum/crypto"
            ],
            "risks": [
              "Potential for signature forgery if input is not properly validated."
            ],
            "complexity": "medium"
          },
          "pkg/helper/slice.go": {
            "language": "Go",
            "purpose": "Provides utility functions for manipulating slices, including filtering, finding indices, converting slices to maps, and mapping elements.",
            "key_types": [
              "T",
              "T1",
              "T2"
            ],
            "functions": [
              "Filter",
              "IndexOf",
              "SliceToMap",
              "Map"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/helper/tls.go": {
            "language": "Go",
            "purpose": "This file provides a function to convert certificate and key data into a TLS configuration.",
            "key_types": [
              "tls.Config",
              "tls.Certificate",
              "x509.CertPool"
            ],
            "functions": [
              "ConvertToTLSConfig"
            ],
            "imports": [
              "crypto/tls",
              "crypto/x509"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/location": {
        "path": "pkg/location",
        "purpose": "Responsible for managing IP location data and configuration settings for the application.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "location_svc.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-manager/pkg/gcs",
          "compress/gzip",
          "context",
          "encoding/json",
          "errors",
          "fmt",
          "io",
          "net",
          "net/http",
          "os",
          "sync",
          "time",
          "github.com/oschwald/maxminddb-golang",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-manager/models"
        ],
        "architecture": "The folder follows a service-oriented architecture, encapsulating configuration and location services with clear separation of concerns.",
        "file_summaries": {
          "pkg/location/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for the application, including database URLs and file names.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [
              "github.com/axieinfinity/ronin-wallet-manager/pkg/gcs"
            ],
            "complexity": "low"
          },
          "pkg/location/location_svc.go": {
            "language": "Go",
            "purpose": "Provides a service for retrieving IP location data and managing the database of such data.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "md.IPLocation"
            ],
            "functions": [
              "GetLocationByIP",
              "DownloadNewDB",
              "decompressGzip",
              "setupFromStorage",
              "setupFromLocalDB",
              "setupLocationDB",
              "subscribeToAutoRefresh",
              "loadMapCountryCode",
              "loadMapCurrencyCode",
              "loadAndParseDefaultData",
              "NewService"
            ],
            "imports": [
              "compress/gzip",
              "context",
              "encoding/json",
              "errors",
              "fmt",
              "io",
              "net",
              "net/http",
              "os",
              "sync",
              "time",
              "github.com/oschwald/maxminddb-golang",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/gcs"
            ],
            "side_effects": [
              "Creates and writes to files on the filesystem",
              "Makes HTTP requests to download data",
              "Publishes messages to a Redis channel"
            ],
            "risks": [
              "Potential exposure of sensitive data through logs",
              "Improper handling of invalid IP addresses could lead to application errors"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/moonpay": {
        "path": "pkg/moonpay",
        "purpose": "Responsible for providing services related to Moonpay, including configuration management and URL signing.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "service.go"
        ],
        "dependencies": [
          "context",
          "encoding/base64",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating configuration and service functionalities related to Moonpay.",
        "file_summaries": {
          "pkg/moonpay/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for Moonpay with a secret field.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/moonpay/service.go": {
            "language": "Go",
            "purpose": "Provides a service for signing URLs using a configuration.",
            "key_types": [
              "Service",
              "service",
              "Config"
            ],
            "functions": [
              "SignURL",
              "NewService"
            ],
            "imports": [
              "context",
              "encoding/base64",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/crypto/hmac"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/preference": {
        "path": "pkg/preference",
        "purpose": "This folder/module is responsible for managing user preferences related to a wallet application, including fetching and updating preferences based on device and address.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "pref_svc.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/ethereum/go-ethereum/common",
          "github.com/labstack/echo/v4",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating the logic for user preferences management within a dedicated service file.",
        "file_summaries": {
          "pkg/preference/pref_svc.go": {
            "language": "Go",
            "purpose": "This file defines a service for managing user preferences related to a wallet application, including fetching and updating preferences based on device and address.",
            "key_types": [
              "Service",
              "service",
              "md.Preference",
              "md.GetPreferencesRequest",
              "md.UpdatePreferencesRequest",
              "md.GetDevicePreferenceRequest",
              "md.UpdateDevicePreferenceRequest",
              "md.InternalGetWalletPreferencesRequest",
              "md.GetBatchPreferencesResponse"
            ],
            "functions": [
              "GetByAddress",
              "UpdateForAddress",
              "PrivateGetDevicePreferences",
              "PrivateUpdateDevicePreferences",
              "SyncDeviceAddresses",
              "InternalGetList",
              "ResetDevice",
              "InitForDeviceRegistration"
            ],
            "imports": [
              "context",
              "net/http",
              "regexp",
              "slices",
              "strings",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/ethereum/go-ethereum/common",
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Logs information about migrating notification settings for a device.",
              "Asynchronously migrates notification settings for a device."
            ],
            "risks": [
              "Potential for SQL injection if input is not properly sanitized.",
              "Error handling may expose sensitive information if not managed correctly."
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/releasecandidate": {
        "path": "pkg/releasecandidate",
        "purpose": "Responsible for managing feature configurations and whitelisting in a release candidate context for mobile wallet candidates.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "init.go",
          "service.go"
        ],
        "dependencies": [
          "github.com/redis/go-redis/v9",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
          "github.com/go-redsync/redsync/v4",
          "github.com/go-redsync/redsync/v4/redis/goredis/v9",
          "github.com/rs/zerolog/log"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, focusing on managing state and configurations through a service interface and Redis for state management.",
        "file_summaries": {
          "pkg/releasecandidate/init.go": {
            "language": "Go",
            "purpose": "Defines a service interface for managing feature configurations and whitelisting in a release candidate context.",
            "key_types": [
              "Service",
              "CheckAllowFeatureRequest",
              "PostFeatureConfigRequest",
              "PostWhitelistFeaturesRequest",
              "PostSetConfigForDeviceRequest",
              "GetCountWhitelistDevices"
            ],
            "functions": [
              "NewService"
            ],
            "imports": [
              "github.com/redis/go-redis/v9",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/device"
            ],
            "complexity": "medium"
          },
          "pkg/releasecandidate/service.go": {
            "language": "Go",
            "purpose": "Manages feature access for mobile wallet candidates using Redis for state management.",
            "key_types": [
              "service",
              "models.CheckAllowFeatureRequest",
              "models.PostFeatureConfigRequest",
              "models.PostWhitelistFeaturesRequest",
              "models.PostSetConfigForDeviceRequest",
              "models.GetCountWhitelistDevices"
            ],
            "functions": [
              "newService",
              "refreshWhitelist",
              "CheckAllowFeature",
              "SetFeatureConfig",
              "SetWhitelistFeatures",
              "SetConfigForDevice",
              "CountWhitelistDevices",
              "VerifyWhitelistFeature",
              "convertKey"
            ],
            "imports": [
              "context",
              "errors",
              "fmt",
              "strings",
              "time",
              "github.com/go-redsync/redsync/v4",
              "github.com/go-redsync/redsync/v4/redis/goredis/v9",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/device"
            ],
            "side_effects": [
              "Modifies Redis state for feature access and whitelists.",
              "Logs information and errors during execution."
            ],
            "risks": [
              "Potential race conditions when accessing shared resources.",
              "Improper handling of Redis errors may lead to incorrect feature access."
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/tracking": {
        "path": "pkg/tracking",
        "purpose": "Responsible for tracking events and requests through a configurable service.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "config.go",
          "models.go",
          "tracking_svc.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-manager/httpclient"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating configuration, data models, and service logic for tracking functionality.",
        "file_summaries": {
          "pkg/tracking/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for tracking with associated methods.",
            "key_types": [
              "Config"
            ],
            "functions": [
              "SetUserAgent"
            ],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/tracking/models.go": {
            "language": "Go",
            "purpose": "Defines data structures for tracking events and requests.",
            "key_types": [
              "Event",
              "TrackingRequest"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/tracking/tracking_svc.go": {
            "language": "Go",
            "purpose": "Provides tracking services for events using a configurable client.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "TrackingRequest"
            ],
            "functions": [
              "Track",
              "TrackAsync",
              "NewService"
            ],
            "imports": [
              "context",
              "github.com/axieinfinity/ronin-wallet-manager/httpclient"
            ],
            "side_effects": [
              "Modifies event data if certain conditions are met",
              "Makes network calls to track events"
            ],
            "risks": [
              "Potential for data leakage if event data is not properly sanitized",
              "Network call failures may not be handled"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/trusteddomain": {
        "path": "pkg/trusteddomain",
        "purpose": "Responsible for managing trusted domains, including caching and database operations.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "trusted_domain_svc.go",
          "utils.go"
        ],
        "dependencies": [
          "github.com/jellydator/ttlcache/v3",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating domain management logic and utility functions.",
        "file_summaries": {
          "pkg/trusteddomain/trusted_domain_svc.go": {
            "language": "Go",
            "purpose": "Provides a service for managing trusted domains, including caching and database operations.",
            "key_types": [
              "Service",
              "svc",
              "TrustedDomain",
              "TrustedDomainRepo",
              "GetListTDMRequest"
            ],
            "functions": [
              "GetByDomain",
              "Save",
              "SaveBatch",
              "GetAll",
              "DeleteByDomain",
              "GetList",
              "NewService"
            ],
            "imports": [
              "context",
              "math",
              "time",
              "github.com/jellydator/ttlcache/v3",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Caches data in memory using ttlcache",
              "Interacts with Redis for message publishing and subscription"
            ],
            "risks": [
              "Potential race conditions due to concurrent access to cache",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          },
          "pkg/trusteddomain/utils.go": {
            "language": "Go",
            "purpose": "Generates wildcard domain names from a given domain string.",
            "key_types": [
              "string",
              "[]string"
            ],
            "functions": [
              "generateWildcardDomains"
            ],
            "imports": [
              "slices",
              "strings"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/worker": {
        "path": "pkg/worker",
        "purpose": "This folder/module is responsible for managing a pool of worker goroutines to process jobs concurrently.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "config.go",
          "dispatcher.go",
          "job.go",
          "worker.go"
        ],
        "dependencies": [
          "sync",
          "github.com/rs/zerolog/log"
        ],
        "architecture": "The folder follows a concurrent processing architecture using goroutines, with a dispatcher managing worker pools and job execution.",
        "file_summaries": {
          "pkg/worker/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for a worker package.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/worker/dispatcher.go": {
            "language": "Go",
            "purpose": "This file implements a dispatcher that manages a pool of worker goroutines to process jobs concurrently.",
            "key_types": [
              "Dispatcher",
              "Config",
              "Job",
              "Worker"
            ],
            "functions": [
              "NewDispatcher",
              "Run",
              "dispatch",
              "Stop",
              "AddNewJob"
            ],
            "imports": [
              "sync"
            ],
            "side_effects": [
              "Starts goroutines for workers",
              "Blocks on worker channels until a worker is available"
            ],
            "risks": [
              "Potential deadlock if jobQueue is not managed properly",
              "Resource exhaustion if too many jobs are added without available workers"
            ],
            "complexity": "medium"
          },
          "pkg/worker/job.go": {
            "language": "Go",
            "purpose": "Defines a Job struct with an executable function.",
            "key_types": [
              "Job"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/worker/worker.go": {
            "language": "Go",
            "purpose": "This file defines a Worker type that manages job execution in a worker pool.",
            "key_types": [
              "Worker",
              "Job"
            ],
            "functions": [
              "NewWorker",
              "Start",
              "Stop"
            ],
            "imports": [
              "sync",
              "github.com/rs/zerolog/log"
            ],
            "side_effects": [
              "Starts a goroutine for job processing",
              "Logs errors during job execution"
            ],
            "risks": [
              "Potential deadlock if not managed properly",
              "Improper handling of quit signals may lead to resource leaks"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/xauth": {
        "path": "pkg/xauth",
        "purpose": "Responsible for client authentication and external authentication service implementation.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "external_auth_svc.go"
        ],
        "dependencies": [
          "context",
          "net/http",
          "strings",
          "github.com/rs/zerolog/log",
          "golang.org/x/oauth2",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ronin-wallet-manager/models"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating authentication logic and configuration in separate files.",
        "file_summaries": {
          "pkg/xauth/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for client authentication.",
            "key_types": [
              "ClientConfig",
              "Config"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/xauth/external_auth_svc.go": {
            "language": "Go",
            "purpose": "This file implements an external authentication service that exchanges authorization codes for access tokens.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "md.XExchangeAuthCodeReq",
              "md.XAccessTokenRes"
            ],
            "functions": [
              "ExchangeAuthCode",
              "NewService"
            ],
            "imports": [
              "context",
              "net/http",
              "strings",
              "github.com/rs/zerolog/log",
              "golang.org/x/oauth2",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Logs an error message if unable to exchange auth code."
            ],
            "risks": [
              "Potential exposure of sensitive information due to redacted fields.",
              "Improper handling of OAuth tokens could lead to security vulnerabilities."
            ],
            "complexity": "medium"
          }
        }
      },
      "repositories": {
        "path": "repositories",
        "purpose": "This folder contains repository definitions for managing various entities in a database, including announcements, code versions, contracts, decentralized applications, highlights, networks, user preferences, quick access DApps, and trusted domains.",
        "languages": {
          "Go": 12
        },
        "key_modules": [
          "announcement.go",
          "code_version.go",
          "common.go",
          "contract.go",
          "dapp.go",
          "highlight.go",
          "init.go",
          "network.go",
          "preference.go",
          "quickaccess.go",
          "trusted_domain.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
          "gorm.io/gorm",
          "github.com/axieinfinity/ronin-wallet-manager/models",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/helper",
          "github.com/axieinfinity/ecosystem-go-common/errors"
        ],
        "architecture": "The folder follows a repository pattern, encapsulating data access logic for different entities and providing a clean interface for CRUD operations.",
        "file_summaries": {
          "repositories/announcement.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing announcements, including CRUD operations and special offer logs.",
            "key_types": [
              "AnnouncementRepo",
              "announcementRepo",
              "AnnouncementInfo"
            ],
            "functions": [
              "AddNew",
              "MarkPublished",
              "GetAnnouncementByID",
              "GetAnnouncementsListAsAdmin",
              "GetAnnouncementsListAsUser",
              "GetOldPublished",
              "CountAnnouncements",
              "DeleteAnnouncement",
              "GetSpecialOfferLog",
              "SaveSendSpecialOfferLog",
              "GetSpecialOfferLogsList",
              "CountSpecialOffers"
            ],
            "imports": [
              "context",
              "errors",
              "slices",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "side_effects": [
              "Database transactions for creating, updating, and deleting announcements and special offers."
            ],
            "complexity": "medium"
          },
          "repositories/code_version.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing code versions, including retrieving and saving versions to a database.",
            "key_types": [
              "CodeVersionRepo",
              "codeVersionRepo",
              "gorm.DB"
            ],
            "functions": [
              "GetAllCodeVersions",
              "SaveVersion",
              "NewCodeVersionRepo"
            ],
            "imports": [
              "context",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are initiated and may modify the database state."
            ],
            "risks": [
              "Potential SQL injection if inputs are not properly sanitized.",
              "Error handling may expose sensitive information if not managed correctly."
            ],
            "complexity": "medium"
          },
          "repositories/common.go": {
            "language": "Go",
            "purpose": "This file defines a repository interface and its implementation for managing common entities in a database using GORM.",
            "key_types": [
              "CommonRepo",
              "commonRepo",
              "gorm.DB"
            ],
            "functions": [
              "GetAllCommons",
              "SaveCommons",
              "NewCommonRepo"
            ],
            "imports": [
              "context",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are initiated and may modify the database state."
            ],
            "risks": [
              "Potential SQL injection if user input is not properly sanitized.",
              "Data loss if 'overwriteOnConflict' is not handled correctly."
            ],
            "complexity": "medium"
          },
          "repositories/contract.go": {
            "language": "Go",
            "purpose": "This file defines a repository interface and its implementation for managing contract data in a database.",
            "key_types": [
              "ContractRepo",
              "contractRepo",
              "md.Contract",
              "md.ContractFilter",
              "md.ContractOrderBy",
              "md.Paging"
            ],
            "functions": [
              "GetContract",
              "GetContractList",
              "CreateContract",
              "DeleteContract",
              "UpdateContract",
              "SaveContract",
              "UpdateContracts",
              "SaveContracts",
              "NewContractRepo"
            ],
            "imports": [
              "context",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are initiated and may modify the database state."
            ],
            "risks": [
              "Potential SQL injection if filter conditions are not properly sanitized.",
              "Panic calls in unimplemented methods could lead to application crashes."
            ],
            "complexity": "medium"
          },
          "repositories/dapp.go": {
            "language": "Go",
            "purpose": "This file defines a repository interface and its implementation for managing decentralized applications (DApps) in a database.",
            "key_types": [
              "DAppRepo",
              "dAppRepo",
              "DApp",
              "DAppFilter",
              "DAppOrderBy",
              "Paging"
            ],
            "functions": [
              "GetDApp",
              "GetDAppList",
              "CreateDApp",
              "DeleteDApp",
              "UpdateDApp",
              "SaveDApp",
              "UpdateDApps",
              "SaveDApps",
              "NewDAppRepo"
            ],
            "imports": [
              "context",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database operations such as create, delete, and update DApps."
            ],
            "risks": [
              "Potential SQL injection if filter conditions are not properly sanitized.",
              "Error handling may expose sensitive information."
            ],
            "complexity": "medium"
          },
          "repositories/highlight.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing highlights in a database using GORM.",
            "key_types": [
              "HighlightRepo",
              "highlightRepo",
              "md.Highlight",
              "md.Paging"
            ],
            "functions": [
              "GetList",
              "Save",
              "SaveBatch",
              "Update",
              "UpdateBatch",
              "GetByID",
              "GetAll",
              "DeleteByID",
              "GetHighlightDApps",
              "CleanExpired",
              "NewHighlightRepo"
            ],
            "imports": [
              "context",
              "time",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are performed which may modify the state of the database."
            ],
            "risks": [
              "Potential SQL injection if user input is not properly sanitized.",
              "Data integrity issues if concurrent updates are not handled correctly."
            ],
            "complexity": "medium"
          },
          "repositories/init.go": {
            "language": "Go",
            "purpose": "Provides a pagination function for database queries using GORM.",
            "key_types": [
              "int",
              "gorm.DB"
            ],
            "functions": [
              "paginate"
            ],
            "imports": [
              "gorm.io/gorm"
            ],
            "side_effects": [
              "Modifies the database query with offset and limit based on pagination parameters."
            ],
            "complexity": "low"
          },
          "repositories/network.go": {
            "language": "Go",
            "purpose": "This file defines a repository interface and its implementation for managing network entities in a database.",
            "key_types": [
              "NetworkRepo",
              "networkRepo",
              "Network",
              "NetworkFilter",
              "NetworkOrderBy",
              "Paging",
              "Preload"
            ],
            "functions": [
              "GetNetwork",
              "GetNetworkList",
              "CreateNetwork",
              "DeleteNetwork",
              "UpdateNetwork",
              "SaveNetwork",
              "UpdateNetworks",
              "SaveNetworks",
              "NewNetworkRepo"
            ],
            "imports": [
              "context",
              "fmt",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are initiated and modified."
            ],
            "risks": [
              "Potential SQL injection if filter conditions are not properly sanitized.",
              "Panic in SaveNetwork, UpdateNetworks, and SaveNetworks if not implemented."
            ],
            "complexity": "medium"
          },
          "repositories/preference.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing user preferences in a database using GORM.",
            "key_types": [
              "PreferenceRepo",
              "prefRepo",
              "Preference",
              "PreferenceFilter"
            ],
            "functions": [
              "GetByAddress",
              "UpdateForAddress",
              "GetList",
              "UpsertBatch",
              "UpdateForDevice",
              "DeleteByDevice",
              "DeleteBatch",
              "GetOneByDevice",
              "CountAddressRegisReceiveNews",
              "NewPreferencesRepo"
            ],
            "imports": [
              "context",
              "errors",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/helper"
            ],
            "side_effects": [
              "Database operations that modify user preferences."
            ],
            "risks": [
              "Potential SQL injection if user input is not properly sanitized."
            ],
            "complexity": "medium"
          },
          "repositories/quickaccess.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing Quick Access DApps, providing methods for CRUD operations and searching.",
            "key_types": [
              "QuickAccessDAppRepo",
              "quickAccessDAppRepo",
              "QuickAccessDApp"
            ],
            "functions": [
              "GetList",
              "Save",
              "SaveBatch",
              "Update",
              "UpdateBatch",
              "GetByID",
              "GetAll",
              "DeleteByID",
              "SearchByTitle",
              "NewQuickAccessDAppRepo"
            ],
            "imports": [
              "context",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are initiated and may modify the database state."
            ],
            "risks": [
              "Potential SQL injection if user input is not properly sanitized in queries."
            ],
            "complexity": "medium"
          },
          "repositories/trusted_domain.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing trusted domains in a database using GORM.",
            "key_types": [
              "TrustedDomainRepo",
              "trustedDomainsRepo",
              "TrustedDomain",
              "Paging",
              "TrustedDomainFilter",
              "TrustedDomainOrderBy"
            ],
            "functions": [
              "GetByDomain",
              "GetList",
              "Save",
              "SaveBatch",
              "GetAll",
              "DeleteByDomain",
              "NewTrustedDomainRepo"
            ],
            "imports": [
              "context",
              "fmt",
              "strings",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Database transactions are initiated and may modify the database state."
            ],
            "risks": [
              "Potential SQL injection if user input is not properly sanitized in queries."
            ],
            "complexity": "medium"
          }
        }
      },
      "root": {
        "path": "root",
        "purpose": "This folder/module is responsible for the wallet-manager project, including configuration, documentation, and service definitions.",
        "languages": {
          "JSON": 2,
          "Markdown": 2,
          "YAML": 2,
          "bash": 1
        },
        "key_modules": [
          ".golangci.yaml",
          "README.md",
          "SECURITY.md",
          "country_iso2_to_currency.json",
          "country_iso2_to_iso3.json",
          "docker-compose.yml",
          "entrypoint.sh"
        ],
        "dependencies": [
          "PostgreSQL",
          "Redis"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing configuration, documentation, and service definitions for a Dockerized application.",
        "file_summaries": {
          ".golangci.yaml": {
            "language": "YAML",
            "purpose": "Configuration file for GolangCI-Lint, specifying linter settings and rules.",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "README.md": {
            "language": "Markdown",
            "purpose": "Documentation for the wallet-manager project",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "SECURITY.md": {
            "language": "Markdown",
            "purpose": "Document the security policy and supported versions of the project.",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "country_iso2_to_currency.json": {
            "language": "JSON",
            "purpose": "This file maps country ISO 3166-1 alpha-2 codes to their respective currencies.",
            "key_types": [
              "string",
              "string"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "country_iso2_to_iso3.json": {
            "language": "JSON",
            "purpose": "This file maps ISO 3166-1 alpha-2 country codes to their corresponding ISO 3166-1 alpha-3 country codes.",
            "key_types": [
              "string"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "docker-compose.yml": {
            "language": "YAML",
            "purpose": "Defines services for a Docker application including PostgreSQL and Redis.",
            "key_types": [
              "service",
              "environment variable"
            ],
            "functions": [],
            "imports": [],
            "side_effects": [
              "Creates Docker containers for PostgreSQL and Redis services."
            ],
            "risks": [
              "Exposing database ports to the host may lead to unauthorized access."
            ],
            "complexity": "low"
          },
          "entrypoint.sh": {
            "language": "bash",
            "purpose": "This script serves as an entry point to run a service application.",
            "key_types": [],
            "functions": [
              "main"
            ],
            "imports": [
              "./app"
            ],
            "side_effects": [
              "Executes an external application"
            ],
            "complexity": "low"
          }
        }
      },
      "routes": {
        "path": "routes",
        "purpose": "Responsible for setting up and managing routes for an Echo web server, including public, private, and internal API endpoints for a wallet manager application.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "init.go",
          "internal.go",
          "private.go",
          "public.go"
        ],
        "dependencies": [
          "github.com/labstack/echo/v4",
          "github.com/rs/zerolog/log",
          "gorm.io/plugin/prometheus",
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
          "github.com/axieinfinity/ronin-wallet-manager/config",
          "github.com/axieinfinity/ronin-wallet-manager/database/redis",
          "github.com/axieinfinity/ronin-wallet-manager/handlers",
          "github.com/axieinfinity/ronin-wallet-manager/httpclient",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/binance",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/location",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/moonpay",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/preference",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/releasecandidate",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/trusteddomain",
          "github.com/axieinfinity/ronin-wallet-manager/pkg/xauth",
          "github.com/axieinfinity/ronin-wallet-manager/repositories"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing routes into separate files for public, private, and internal APIs, facilitating clear separation of concerns and maintainability.",
        "file_summaries": {
          "routes/init.go": {
            "language": "Go",
            "purpose": "Sets up routes for an Echo web server and initializes various services and repositories.",
            "key_types": [
              "echo.Echo",
              "config.Schema",
              "postgresql.Client",
              "redis.Client",
              "handlers.ReleaseCandidateHandler",
              "handlers.NetworkHandler",
              "handlers.CommonHandler",
              "handlers.AccountHandler",
              "handlers.MoonpayHandler",
              "handlers.LocationHandler",
              "handlers.AnnouncementHandler",
              "handlers.BinanceHandler",
              "handlers.DeviceHandler",
              "handlers.TrustedDomainHandler",
              "handlers.DAppHandler",
              "handlers.TwitterHandler",
              "handlers.BlacklistHandler"
            ],
            "functions": [
              "SetupRoutes",
              "registerPublic",
              "registerPrivate",
              "registerInternal",
              "NewClient",
              "NewService",
              "NewHandler"
            ],
            "imports": [
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "gorm.io/plugin/prometheus",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/database/redis",
              "github.com/axieinfinity/ronin-wallet-manager/handlers",
              "github.com/axieinfinity/ronin-wallet-manager/httpclient",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/announcement",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/binance",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/blacklist",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/dapp",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/device",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/location",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/moonpay",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/preference",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/releasecandidate",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/trusteddomain",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/xauth",
              "github.com/axieinfinity/ronin-wallet-manager/repositories"
            ],
            "side_effects": [
              "Establishes database connections",
              "Initializes Redis client",
              "Sets up various services and handlers"
            ],
            "risks": [
              "Potential for database connection errors",
              "Improper handling of configuration values may lead to runtime errors"
            ],
            "complexity": "medium"
          },
          "routes/internal.go": {
            "language": "Go",
            "purpose": "Defines internal routes for a wallet manager API, handling various network and announcement functionalities.",
            "key_types": [
              "echo.Echo",
              "config.Schema",
              "handlers.ReleaseCandidateHandler",
              "handlers.NetworkHandler",
              "handlers.CommonHandler",
              "handlers.LocationHandler",
              "handlers.AnnouncementHandler",
              "handlers.TrustedDomainHandler",
              "handlers.DAppHandler",
              "tracking.Service"
            ],
            "functions": [
              "registerInternal"
            ],
            "imports": [
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/handlers",
              "github.com/axieinfinity/ronin-wallet-manager/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/models",
              "github.com/axieinfinity/ronin-wallet-manager/pkg/tracking"
            ],
            "side_effects": [
              "Modifies the state of the API by registering routes and middleware."
            ],
            "risks": [
              "Potential exposure of sensitive data if routes are not properly secured.",
              "Improper handling of user input could lead to security vulnerabilities."
            ],
            "complexity": "medium"
          },
          "routes/private.go": {
            "language": "Go",
            "purpose": "Defines routes for private wallet management operations in an Echo web server.",
            "key_types": [
              "echo.Echo",
              "handlers.AnnouncementHandler",
              "handlers.DeviceHandler",
              "echo.MiddlewareFunc"
            ],
            "functions": [
              "registerPrivate"
            ],
            "imports": [
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/handlers",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Modifies the routing configuration of the Echo server."
            ],
            "risks": [
              "Potential exposure of sensitive device information through the API."
            ],
            "complexity": "medium"
          },
          "routes/public.go": {
            "language": "Go",
            "purpose": "Defines public API routes for a wallet manager application, including health checks and various resource endpoints.",
            "key_types": [
              "APIVersion",
              "config.Schema",
              "handlers.ReleaseCandidateHandler",
              "handlers.NetworkHandler",
              "handlers.CommonHandler",
              "handlers.AccountHandler",
              "handlers.MoonpayHandler",
              "handlers.LocationHandler",
              "handlers.AnnouncementHandler",
              "handlers.BinanceHandler",
              "handlers.TrustedDomainHandler",
              "handlers.DAppHandler",
              "handlers.ExternalAuthHandler",
              "handlers.BlacklistHandler"
            ],
            "functions": [
              "HealthCheck",
              "registerPublic"
            ],
            "imports": [
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-manager/config",
              "github.com/axieinfinity/ronin-wallet-manager/handlers",
              "github.com/axieinfinity/ronin-wallet-manager/middleware",
              "github.com/axieinfinity/ronin-wallet-manager/models"
            ],
            "side_effects": [
              "Modifies the state of the application by registering routes and handlers."
            ],
            "risks": [
              "Potential exposure of sensitive information through API endpoints.",
              "Improper handling of user input could lead to security vulnerabilities."
            ],
            "complexity": "medium"
          }
        }
      },
      "tests": {
        "path": "tests",
        "purpose": "This folder contains tests for the web server that provides an endpoint to sign messages using ECDSA.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/ethereum/go-ethereum",
          "github.com/labstack/echo/v4"
        ],
        "architecture": "The folder follows a modular architecture pattern, focusing on the implementation of a web server with clear separation of concerns for handling requests and signing messages.",
        "file_summaries": {
          "tests/main.go": {
            "language": "Go",
            "purpose": "This file implements a web server that provides an endpoint to sign messages using ECDSA.",
            "key_types": [
              "SignRequest",
              "ecdsa.PrivateKey"
            ],
            "functions": [
              "signHash",
              "signMessage",
              "main"
            ],
            "imports": [
              "context",
              "crypto/ecdsa",
              "fmt",
              "log",
              "net/http",
              "os",
              "os/signal",
              "sort",
              "strings",
              "time",
              "github.com/ethereum/go-ethereum/common",
              "github.com/ethereum/go-ethereum/common/hexutil",
              "github.com/ethereum/go-ethereum/crypto",
              "github.com/labstack/echo/v4"
            ],
            "side_effects": [
              "Starts an HTTP server",
              "Listens for OS interrupt signals"
            ],
            "risks": [
              "Potential exposure of private keys if not handled securely"
            ],
            "complexity": "medium"
          }
        }
      }
    }
  }
}