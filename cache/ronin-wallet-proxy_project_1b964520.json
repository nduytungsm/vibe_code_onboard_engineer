{
  "content_hash": "aea350cdbeeb37bfda116e0449716601",
  "timestamp": "2025-09-20T20:49:38.238987+07:00",
  "result": {
    "purpose": "This project is a blockchain wallet proxy service that facilitates interactions with various blockchain networks, allowing users to query wallet balances, NFT collections, and transaction histories. It integrates with multiple external APIs to provide real-time data and supports functionalities like gas fee suggestions and token management.",
    "architecture": "The project follows a microservices architecture, utilizing a modular structure for different components such as API routes, services, and data models, with Docker for containerization and orchestration.",
    "data_models": [
      "User",
      "Token",
      "NFT",
      "Transaction",
      "Wallet"
    ],
    "external_services": [
      "Skynet API",
      "Moralis",
      "Getblock.io",
      "CoinGecko"
    ],
    "languages": {
      "Bash": 1,
      "CSS": 2,
      "Go": 120,
      "HTML": 2,
      "JSON": 30,
      "Markdown": 5,
      "SQL": 3,
      "Solidity": 22,
      "YAML": 10
    },
    "folder_summaries": {
      ".github": {
        "path": ".github",
        "purpose": "Contains templates and configurations for GitHub workflows and pull requests.",
        "languages": {
          "Markdown": 1
        },
        "key_modules": [
          "pull_request_template.md"
        ],
        "dependencies": [],
        "architecture": "The folder follows a simple structure for managing GitHub-related templates, focusing on standardizing pull request submissions.",
        "file_summaries": {
          ".github/pull_request_template.md": {
            "language": "Markdown",
            "purpose": "Template for pull requests to outline changes and checklist items",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      ".github/workflows": {
        "path": ".github/workflows",
        "purpose": "This folder is responsible for defining GitHub Actions workflows for various automation tasks related to CI/CD processes.",
        "languages": {
          "YAML": 4
        },
        "key_modules": [
          "check.yml",
          "dockerize.yml",
          "golangci-lint.yml",
          "sentry.yml"
        ],
        "dependencies": [
          "axieinfinity/workflows-samples"
        ],
        "architecture": "The folder follows a modular architecture pattern where each YAML file defines a specific workflow for automation tasks, allowing for easy integration and management of CI/CD processes.",
        "file_summaries": {
          ".github/workflows/check.yml": {
            "language": "YAML",
            "purpose": "Defines a GitHub Actions workflow for checking security and building on pull requests to the main branch.",
            "key_types": [],
            "functions": [],
            "imports": [
              "axieinfinity/workflows-samples/.github/workflows/security-basic-scan.yml@ce8adf700c0cd05672ebd7154c828d396631c153"
            ],
            "complexity": "low"
          },
          ".github/workflows/dockerize.yml": {
            "language": "YAML",
            "purpose": "Defines a GitHub Actions workflow for Dockerizing a mobile wallet manager.",
            "key_types": [
              "workflow",
              "job",
              "permissions"
            ],
            "functions": [
              "on",
              "jobs",
              "uses",
              "with",
              "secrets"
            ],
            "imports": [
              "axieinfinity/workflows-samples/.github/workflows/docker-build-submodule.yml"
            ],
            "side_effects": [
              "Triggers on push and pull request events",
              "Uses secrets for secure operations"
            ],
            "risks": [
              "Exposure of sensitive information if secrets are not managed properly"
            ],
            "complexity": "medium"
          },
          ".github/workflows/golangci-lint.yml": {
            "language": "YAML",
            "purpose": "Configuration file for GitHub Actions to run golangci-lint on push and pull request events.",
            "key_types": [
              "job",
              "workflow"
            ],
            "functions": [
              "golangci"
            ],
            "imports": [
              "axieinfinity/workflows-samples/.github/workflows/testing-go.yml"
            ],
            "side_effects": [
              "Triggers linting process on code changes"
            ],
            "risks": [
              "Exposure of secrets if not properly managed"
            ],
            "complexity": "low"
          },
          ".github/workflows/sentry.yml": {
            "language": "YAML",
            "purpose": "Defines a GitHub Actions workflow for Sentry release management.",
            "key_types": [],
            "functions": [],
            "imports": [
              "axieinfinity/workflows-samples/.github/workflows/sentry-release.yml@main"
            ],
            "complexity": "low"
          }
        }
      },
      "_api_specs": {
        "path": "_api_specs",
        "purpose": "This folder/module is responsible for defining the API specifications and providing documentation for the Wallet Proxy Rest API.",
        "languages": {
          "HTML": 2,
          "JSON": 1,
          "YAML": 1
        },
        "key_modules": [
          "_empty_result_response.json",
          "index.html",
          "new_wallet_proxy_api.yaml",
          "oauth2-redirect.html"
        ],
        "dependencies": [
          "assets/swagger-ui.css",
          "assets/index.css",
          "assets/fav.ico",
          "scripts/swagger-ui-bundle.js",
          "scripts/swagger-ui-standalone-preset.js",
          "scripts/swagger-initializer.js"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing API specifications, documentation, and related resources in a structured manner.",
        "file_summaries": {
          "_api_specs/_empty_result_response.json": {
            "language": "JSON",
            "purpose": "Defines an empty result response structure",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "_api_specs/index.html": {
            "language": "HTML",
            "purpose": "This file serves as the main HTML document for the Wallet Proxy Rest API, providing a user interface for the API documentation.",
            "key_types": [],
            "functions": [],
            "imports": [
              "assets/swagger-ui.css",
              "assets/index.css",
              "assets/fav.ico",
              "scripts/swagger-ui-bundle.js",
              "scripts/swagger-ui-standalone-preset.js",
              "scripts/swagger-initializer.js"
            ],
            "complexity": "low"
          },
          "_api_specs/new_wallet_proxy_api.yaml": {
            "language": "YAML",
            "purpose": "Defines the API specifications for Wallet X REST APIs, including endpoints for balances, transactions, and NFT collections.",
            "key_types": [
              "API",
              "Endpoint",
              "Response",
              "Parameter"
            ],
            "functions": [
              "getBalancesSummary",
              "getTransactionByHash",
              "getNFTCollectibles",
              "getNFTItemOfACollectible",
              "getGasSuggestion",
              "getTransactionsListV2"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "_api_specs/oauth2-redirect.html": {
            "language": "HTML/JavaScript",
            "purpose": "Handles OAuth2 redirection and authorization response processing.",
            "key_types": [
              "oauth2",
              "window",
              "location",
              "JSON"
            ],
            "functions": [
              "run",
              "decodeURIComponent"
            ],
            "imports": [],
            "side_effects": [
              "Modifies window state",
              "Closes the window after processing"
            ],
            "risks": [
              "Potential exposure of sensitive information in error messages",
              "Cross-site scripting (XSS) if not properly sanitized"
            ],
            "complexity": "medium"
          }
        }
      },
      "_api_specs/_errors": {
        "path": "_api_specs/_errors",
        "purpose": "Defines error response structures for the API",
        "languages": {
          "JSON": 2
        },
        "key_modules": [
          "_ErrInternalServer.json",
          "_ErrWalletAddressRequired.json"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each file defines a specific error response structure in JSON format.",
        "file_summaries": {
          "_api_specs/_errors/_ErrInternalServer.json": {
            "language": "JSON",
            "purpose": "Defines the structure for an internal server error response",
            "key_types": [
              "object"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "_api_specs/_errors/_ErrWalletAddressRequired.json": {
            "language": "JSON",
            "purpose": "Defines an error response for a missing wallet address in an API",
            "key_types": [
              "object"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "_api_specs/_token_balances": {
        "path": "_api_specs/_token_balances",
        "purpose": "This folder/module is responsible for defining the request and response structures for token balances in a blockchain context.",
        "languages": {
          "JSON": 3
        },
        "key_modules": [
          "_TokenBalancesRequest.json",
          "_TokenBalancesRoninResponse.json",
          "_TokenBalancesRoninWithRONResponse.json"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing API specifications for token balances into separate JSON files for requests and responses.",
        "file_summaries": {
          "_api_specs/_token_balances/_TokenBalancesRequest.json": {
            "language": "JSON",
            "purpose": "Defines a request structure for token balances including native tokens and specified token standards.",
            "key_types": [
              "object",
              "boolean",
              "array",
              "string"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "_api_specs/_token_balances/_TokenBalancesRoninResponse.json": {
            "language": "JSON",
            "purpose": "This file contains a response structure for token balances in a blockchain context.",
            "key_types": [
              "object",
              "array"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "_api_specs/_token_balances/_TokenBalancesRoninWithRONResponse.json": {
            "language": "JSON",
            "purpose": "This file contains a response structure for token balances associated with a specific owner address in the Ronin blockchain.",
            "key_types": [
              "object",
              "array"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "_api_specs/assets": {
        "path": "_api_specs/assets",
        "purpose": "Contains stylesheets for the API specifications, including general styles and specific styles for the Swagger UI component.",
        "languages": {
          "CSS": 2
        },
        "key_modules": [
          "index.css",
          "swagger-ui.css"
        ],
        "dependencies": [],
        "architecture": "The folder follows a simple structure focused on styling, with separate CSS files for general and component-specific styles.",
        "file_summaries": {
          "_api_specs/assets/index.css": {
            "language": "CSS",
            "purpose": "Defines styles for HTML elements including box-sizing and body background.",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "_api_specs/assets/swagger-ui.css": {
            "language": "CSS",
            "purpose": "Defines styles for the Swagger UI component.",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "_api_specs/scripts": {
        "path": "_api_specs/scripts",
        "purpose": "This folder contains scripts for initializing and configuring Swagger UI for API documentation display.",
        "languages": {
          "JavaScript": 6
        },
        "key_modules": [
          "swagger-initializer.js",
          "swagger-ui-bundle.js",
          "swagger-ui-es-bundle-core.js",
          "swagger-ui-es-bundle.js",
          "swagger-ui-standalone-preset.js",
          "swagger-ui.js"
        ],
        "dependencies": [
          "react",
          "react-redux",
          "lodash",
          "dompurify",
          "swagger-client",
          "js-yaml",
          "xml-but-prettier",
          "classnames",
          "js-file-download",
          "immutable",
          "base64-js",
          "prop-types",
          "redux",
          "serialize-error",
          "url-parse",
          "remarkable/linkify",
          "zenscroll"
        ],
        "architecture": "The folder follows a modular architecture pattern, with each script serving a specific purpose related to the Swagger UI library, allowing for easy integration and maintenance.",
        "file_summaries": {
          "_api_specs/scripts/swagger-initializer.js": {
            "language": "JavaScript",
            "purpose": "Initializes Swagger UI for API documentation display",
            "key_types": [
              "SwaggerUIBundle"
            ],
            "functions": [
              "window.onload"
            ],
            "imports": [
              "SwaggerUIBundle",
              "SwaggerUIStandalonePreset"
            ],
            "side_effects": [
              "Modifies the DOM to display Swagger UI"
            ],
            "risks": [
              "Potential exposure of API documentation if not secured"
            ],
            "complexity": "low"
          },
          "_api_specs/scripts/swagger-ui-bundle.js": {
            "language": "JavaScript",
            "purpose": "This file is part of the Swagger UI library, which is used to generate interactive API documentation.",
            "key_types": [
              "object",
              "function"
            ],
            "functions": [
              "module.exports"
            ],
            "imports": [],
            "side_effects": [
              "Defines a module for use in CommonJS or as a global variable."
            ],
            "risks": [
              "Potential exposure of sensitive information if the bundle is not properly secured."
            ],
            "complexity": "medium"
          },
          "_api_specs/scripts/swagger-ui-es-bundle-core.js": {
            "language": "JavaScript",
            "purpose": "This file is part of the Swagger UI library, which is used to generate interactive API documentation.",
            "key_types": [
              "React Component",
              "Immutable Data Structures",
              "Promise",
              "Function",
              "Object"
            ],
            "functions": [
              "import",
              "reduce",
              "zipObject",
              "debounce",
              "set",
              "assocPath",
              "camelCase",
              "upperFirst",
              "find",
              "eq",
              "sanitize-url",
              "stringify",
              "assign",
              "memoize",
              "omit"
            ],
            "imports": [
              "react-immutable-pure-component",
              "remarkable/linkify",
              "dompurify",
              "zenscroll",
              "lodash",
              "swagger-client",
              "react",
              "react-redux",
              "react-syntax-highlighter",
              "prop-types",
              "redux",
              "serialize-error",
              "url-parse",
              "js-yaml",
              "immutable",
              "base64-js",
              "classnames",
              "js-file-download",
              "xml-but-prettier"
            ],
            "side_effects": [
              "Modifies the DOM",
              "May perform network requests"
            ],
            "risks": [
              "Potential XSS vulnerabilities if user input is not sanitized",
              "Dependency on external libraries may introduce vulnerabilities"
            ],
            "complexity": "high"
          },
          "_api_specs/scripts/swagger-ui-es-bundle.js": {
            "language": "JavaScript",
            "purpose": "This file is part of the Swagger UI library, which is used to generate interactive API documentation.",
            "key_types": [
              "Object",
              "Function"
            ],
            "functions": [
              "initializeSwaggerUI",
              "renderDocumentation"
            ],
            "imports": [
              "swagger-ui"
            ],
            "side_effects": [
              "Modifies the DOM to display API documentation"
            ],
            "risks": [
              "Potential exposure of sensitive API information if not properly secured"
            ],
            "complexity": "medium"
          },
          "_api_specs/scripts/swagger-ui-standalone-preset.js": {
            "language": "JavaScript",
            "purpose": "This file is part of the Swagger UI library, providing a standalone preset for displaying API documentation.",
            "key_types": [
              "Object",
              "Function"
            ],
            "functions": [
              "module.exports"
            ],
            "imports": [],
            "side_effects": [
              "Defines a module that can be exported for use in other files."
            ],
            "complexity": "medium"
          },
          "_api_specs/scripts/swagger-ui.js": {
            "language": "JavaScript",
            "purpose": "This file is likely part of the Swagger UI library, which is used for displaying API documentation in a user-friendly format.",
            "key_types": [
              "Object",
              "Function"
            ],
            "functions": [
              "module.exports"
            ],
            "imports": [],
            "side_effects": [
              "Defines a module for use in CommonJS environments"
            ],
            "complexity": "medium"
          }
        }
      },
      "_nft_metadata_mapping/ronin/v1": {
        "path": "_nft_metadata_mapping/ronin/v1",
        "purpose": "Defines metadata mappings for various NFT types in a gaming context.",
        "languages": {
          "JSON": 1
        },
        "key_modules": [
          "mapping.json"
        ],
        "dependencies": [],
        "architecture": "The folder follows a simple structure where metadata mappings are defined in a single JSON file, indicating a low complexity architecture focused on data representation.",
        "file_summaries": {
          "_nft_metadata_mapping/ronin/v1/mapping.json": {
            "language": "JSON",
            "purpose": "Defines metadata mappings for various NFT types in a gaming context.",
            "key_types": [
              "object",
              "string",
              "number",
              "array"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "cmd/app": {
        "path": "cmd/app",
        "purpose": "This folder/module is responsible for setting up and running the main application, including an HTTP server and a metrics server.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
          "github.com/axieinfinity/ecosystem-go-common/echo/profiling",
          "github.com/axieinfinity/ecosystem-go-common/validation",
          "github.com/getsentry/sentry-go",
          "github.com/getsentry/sentry-go/echo",
          "github.com/labstack/echo-contrib/echoprometheus",
          "github.com/labstack/echo/v4",
          "github.com/labstack/echo/v4/middleware",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-proxy/config",
          "github.com/axieinfinity/ronin-wallet-proxy/middleware",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/routes"
        ],
        "architecture": "The folder follows a modular architecture pattern, focusing on separation of concerns with distinct responsibilities for handling HTTP requests, metrics, and middleware integration.",
        "file_summaries": {
          "cmd/app/main.go": {
            "language": "Go",
            "purpose": "This file sets up an HTTP server and a metrics server, handling graceful shutdown and middleware integration.",
            "key_types": [
              "context.Context",
              "sync.WaitGroup",
              "echo.Echo",
              "config.Schema"
            ],
            "functions": [
              "main",
              "startHTTPServer",
              "startMetricsServer",
              "shutdown"
            ],
            "imports": [
              "context",
              "fmt",
              "os",
              "os/signal",
              "strings",
              "sync",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/echo/profiling",
              "github.com/axieinfinity/ecosystem-go-common/validation",
              "github.com/getsentry/sentry-go",
              "github.com/getsentry/sentry-go/echo",
              "github.com/labstack/echo-contrib/echoprometheus",
              "github.com/labstack/echo/v4",
              "github.com/labstack/echo/v4/middleware",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/config",
              "github.com/axieinfinity/ronin-wallet-proxy/middleware",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/routes"
            ],
            "side_effects": [
              "Starts HTTP server",
              "Starts metrics server",
              "Handles OS interrupt signals for graceful shutdown"
            ],
            "risks": [
              "Potential exposure of sensitive information in logs if not properly configured",
              "Dependency on external services (e.g., Sentry) which may introduce points of failure"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/fix_token_info_metadata": {
        "path": "cmd/fix_token_info_metadata",
        "purpose": "This folder/module is responsible for fixing missing token information by retrieving data from external services and updating a database.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "gorm.io/gorm/logger",
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/axieinfinity/ronin-wallet-proxy/config",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/cmc",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/redis",
          "github.com/axieinfinity/ronin-wallet-proxy/repositories"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the main functionality in a single Go file that interacts with external services and a database.",
        "file_summaries": {
          "cmd/fix_token_info_metadata/main.go": {
            "language": "Go",
            "purpose": "This file contains a main function that fixes missing token information by retrieving data from external services and updating a database.",
            "key_types": [
              "TokenInfo",
              "Config",
              "Service",
              "Repositories"
            ],
            "functions": [
              "main",
              "connectDB",
              "getMissingCgkIDTokens",
              "buildMapChainContractTokenFromCoingecko",
              "getInvalidTokenIDsFromErrMessage"
            ],
            "imports": [
              "context",
              "errors",
              "regexp",
              "slices",
              "strings",
              "time",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "gorm.io/gorm/logger",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/axieinfinity/ronin-wallet-proxy/config",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/cmc",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/redis",
              "github.com/axieinfinity/ronin-wallet-proxy/repositories"
            ],
            "side_effects": [
              "Database updates",
              "External API calls",
              "Logging events"
            ],
            "risks": [
              "Potential exposure of sensitive data in logs",
              "Dependency on external services for data retrieval",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/ronin_token_crawler": {
        "path": "cmd/ronin_token_crawler",
        "purpose": "Crawl market information from CoinGecko for a list of tokens used on Ronin.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-proxy/config",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/repositories"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the crawling functionality in a single main file that interacts with various services and a database.",
        "file_summaries": {
          "cmd/ronin_token_crawler/main.go": {
            "language": "Go",
            "purpose": "Crawl market information from CoinGecko for a list of tokens used on Ronin.",
            "key_types": [
              "context.Context",
              "time.Time",
              "postgresql.Client",
              "coingecko.Service",
              "map[string]interface{}"
            ],
            "functions": [
              "main",
              "sentry.Init",
              "postgresql.NewClient",
              "coingecko.NewService"
            ],
            "imports": [
              "context",
              "fmt",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/config",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/repositories"
            ],
            "side_effects": [
              "Logs errors and information during execution.",
              "Initializes Sentry for error tracking.",
              "Updates market information in the database."
            ],
            "risks": [
              "Potential exposure of sensitive information in logs.",
              "Database connection errors may lead to application failure."
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/token_description_crawler": {
        "path": "cmd/token_description_crawler",
        "purpose": "Crawl token descriptions from coinmarketcap.com and refresh cache if needed.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "gorm.io/gorm/logger",
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/axieinfinity/ronin-wallet-proxy/config",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/cmc",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/redis",
          "github.com/axieinfinity/ronin-wallet-proxy/repositories"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the crawling functionality and its dependencies in a single Go module.",
        "file_summaries": {
          "cmd/token_description_crawler/main.go": {
            "language": "Go",
            "purpose": "Crawl token descriptions from coinmarketcap.com and refresh cache if needed.",
            "key_types": [
              "context.Context",
              "error",
              "time.Time",
              "gorm.DB",
              "sentry.ClientOptions"
            ],
            "functions": [
              "main",
              "sentry.Init",
              "postgresql.NewClient",
              "cmc.NewService",
              "redis.NewRedisClient"
            ],
            "imports": [
              "context",
              "errors",
              "time",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "gorm.io/gorm/logger",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/axieinfinity/ronin-wallet-proxy/config",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/cmc",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/redis",
              "github.com/axieinfinity/ronin-wallet-proxy/repositories"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking",
              "Connects to PostgreSQL database",
              "Sleeps to prevent rate limiting",
              "Publishes event to Redis if cache needs refreshing"
            ],
            "risks": [
              "Potential exposure of sensitive configuration data",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/token_id_mapping": {
        "path": "cmd/token_id_mapping",
        "purpose": "This folder/module is responsible for mapping CoinGecko token IDs to contract addresses and decimals, handling token metadata and caching.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "gorm.io/gorm/logger",
          "github.com/axieinfinity/ronin-wallet-proxy/config",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/redis",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/worker",
          "github.com/axieinfinity/ronin-wallet-proxy/repositories"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating functionality related to token ID mapping and utilizing various external services for data handling and error tracking.",
        "file_summaries": {
          "cmd/token_id_mapping/main.go": {
            "language": "Go",
            "purpose": "This file maps CoinGecko token IDs to contract addresses and decimals, handling token metadata and caching.",
            "key_types": [
              "context.Context",
              "sync.WaitGroup",
              "time.Time",
              "repositories.TokenInfoRepositories",
              "coingecko.Service",
              "md.TokenInfo"
            ],
            "functions": [
              "main",
              "crawlTokenContractInfo",
              "retrieveTokenMetadata",
              "migrateSomeBridgeTokenContracts",
              "removeDuplicateContract"
            ],
            "imports": [
              "context",
              "sync",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "gorm.io/gorm/logger",
              "github.com/axieinfinity/ronin-wallet-proxy/config",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/redis",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/worker",
              "github.com/axieinfinity/ronin-wallet-proxy/repositories"
            ],
            "side_effects": [
              "Initializes Sentry for error tracking",
              "Interacts with a PostgreSQL database",
              "Publishes events to Redis"
            ],
            "risks": [
              "Potential exposure of sensitive information in logs",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          }
        }
      },
      "cmd/token_info_crawler": {
        "path": "cmd/token_info_crawler",
        "purpose": "Crawl token information from CoinMarketCap and store it in a database.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "main.go"
        ],
        "dependencies": [
          "github.com/getsentry/sentry-go",
          "github.com/rs/zerolog/log",
          "gorm.io/gorm",
          "gorm.io/gorm/logger",
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/axieinfinity/ronin-wallet-proxy/config",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/cmc",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/redis",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/worker",
          "github.com/axieinfinity/ronin-wallet-proxy/repositories"
        ],
        "architecture": "The folder follows a modular architecture pattern, focusing on separation of concerns with distinct responsibilities for crawling, data storage, and external service interactions.",
        "file_summaries": {
          "cmd/token_info_crawler/main.go": {
            "language": "Go",
            "purpose": "Crawl token information from CoinMarketCap and store it in a database.",
            "key_types": [
              "context.Context",
              "error",
              "sync.WaitGroup",
              "map[string]string",
              "repositories.TokenInfoRepositories",
              "cmc.Service",
              "worker.Dispatcher"
            ],
            "functions": [
              "main",
              "addNewRetrieveMetadataJob",
              "retrieveTokenMetadata"
            ],
            "imports": [
              "context",
              "errors",
              "slices",
              "sync",
              "time",
              "github.com/getsentry/sentry-go",
              "github.com/rs/zerolog/log",
              "gorm.io/gorm",
              "gorm.io/gorm/logger",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/axieinfinity/ronin-wallet-proxy/config",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/cmc",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/redis",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/worker",
              "github.com/axieinfinity/ronin-wallet-proxy/repositories"
            ],
            "side_effects": [
              "Database operations",
              "Network requests to CoinMarketCap",
              "Publishing events to Redis"
            ],
            "risks": [
              "Potential exposure of sensitive information in logs",
              "Error handling may not cover all edge cases",
              "Dependency on external services (CoinMarketCap, Redis)"
            ],
            "complexity": "medium"
          }
        }
      },
      "config": {
        "path": "config",
        "purpose": "Configuration management for a server application, including loading settings from a config file and environment variables.",
        "languages": {
          "Go": 1,
          "YAML": 1
        },
        "key_modules": [
          "config.go",
          "config.yml"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/mitchellh/mapstructure",
          "github.com/rs/zerolog",
          "github.com/spf13/viper",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/cmc",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/coinbase",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/crypto/hmac",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/exchangerate",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/redis",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/worker"
        ],
        "architecture": "The folder follows a modular architecture pattern, separating configuration management into distinct files for Go code and YAML settings, facilitating easy management and loading of application configurations.",
        "file_summaries": {
          "config/config.go": {
            "language": "Go",
            "purpose": "Configuration management for a server application, including loading settings from a config file and environment variables.",
            "key_types": [
              "Schema",
              "Server",
              "Sentry",
              "TLSConfig",
              "Logging",
              "Profiling"
            ],
            "functions": [
              "Init"
            ],
            "imports": [
              "fmt",
              "strconv",
              "strings",
              "sync",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/mitchellh/mapstructure",
              "github.com/rs/zerolog",
              "github.com/spf13/viper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/cmc",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/coinbase",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/crypto/hmac",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/exchangerate",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/redis",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/worker"
            ],
            "side_effects": [
              "Panic on configuration file read errors",
              "Sets global logging level"
            ],
            "risks": [
              "Potential exposure of sensitive information in logs or errors"
            ],
            "complexity": "medium"
          },
          "config/config.yml": {
            "language": "YAML",
            "purpose": "Configuration settings for a wallet proxy service including server settings, profiling, logging, and blockchain chain configurations.",
            "key_types": [
              "profiler",
              "server",
              "profiling",
              "sentry",
              "logging",
              "hmac_internal",
              "chains",
              "exchange_rate_service",
              "providers"
            ],
            "functions": [],
            "imports": [],
            "risks": [
              "Exposure of sensitive information due to redacted fields",
              "Potential misconfiguration leading to service downtime"
            ],
            "complexity": "medium"
          }
        }
      },
      "handlers": {
        "path": "handlers",
        "purpose": "This folder contains handlers for various operations related to blockchain, NFTs, and token information, facilitating communication between the web server and external services.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "blockchain_handler.go",
          "coinbase_handler.go",
          "nft_mapping_handler.go",
          "token_info_handler.go"
        ],
        "dependencies": [
          "github.com/labstack/echo/v4",
          "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/tokeninfo",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/coinbase",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/nft_mapping"
        ],
        "architecture": "The folder follows a modular architecture pattern where each handler is responsible for a specific domain of functionality, promoting separation of concerns and maintainability.",
        "file_summaries": {
          "handlers/blockchain_handler.go": {
            "language": "Go",
            "purpose": "This file defines a handler for blockchain-related operations, including fetching token balances, transaction history, NFT collections, and gas suggestions.",
            "key_types": [
              "BlockchainHandler",
              "blockchainHandler"
            ],
            "functions": [
              "GetConfig",
              "GetTokenBalances",
              "GetTransactionsHistory",
              "GetTransactionsByHash",
              "GetNFTCollections",
              "GetNFTItems",
              "GetNFTItem",
              "GetTokenInfo",
              "GetPriceChart",
              "GetGasSuggestion",
              "SendRPC",
              "SearchToken",
              "PostSearchToken",
              "GetTransactionsHistoryV2",
              "NewBlockchainHandler"
            ],
            "imports": [
              "cmp",
              "net/http",
              "slices",
              "time",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/tokeninfo"
            ],
            "complexity": "medium"
          },
          "handlers/coinbase_handler.go": {
            "language": "Go",
            "purpose": "Handles requests related to Coinbase buy options.",
            "key_types": [
              "CoinbaseHandler",
              "coinbaseHandler",
              "coinbase.Service",
              "coinbase.GetBuyOptionsRequest"
            ],
            "functions": [
              "GetBuyOptions",
              "NewCoinbaseHandler"
            ],
            "imports": [
              "net/http",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/coinbase"
            ],
            "side_effects": [
              "Interacts with external services to fetch buy options",
              "Returns JSON response to the client"
            ],
            "risks": [
              "Potential for handling sensitive financial data",
              "Error handling may expose internal service errors"
            ],
            "complexity": "medium"
          },
          "handlers/nft_mapping_handler.go": {
            "language": "Go",
            "purpose": "Handles NFT mapping operations including saving, retrieving, and listing NFT mappings.",
            "key_types": [
              "NFTMappingHandler",
              "nftMappingHandler",
              "Service",
              "SaveNFTMappingRequest",
              "SaveBatchNFTMappingRequest",
              "GetNFTMappingsListRequest",
              "GetOneNFTMappingRequest",
              "ListResponse",
              "NFTMapping"
            ],
            "functions": [
              "InternalSaveMapping",
              "InternalSaveBatchMapping",
              "InternalGetList",
              "PublicGetOne",
              "PublicGetList",
              "NewNFTMappingHandler"
            ],
            "imports": [
              "net/http",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/nft_mapping"
            ],
            "complexity": "medium"
          },
          "handlers/token_info_handler.go": {
            "language": "Go",
            "purpose": "Handles token information requests and responses in a web server context.",
            "key_types": [
              "TokenInfoHandler",
              "tokenInfoHandler",
              "tokeninfo.Service"
            ],
            "functions": [
              "GetTokenInfosList",
              "SaveTokenInfo",
              "InternalCrawlMetadata",
              "NewTokenInfoHandler"
            ],
            "imports": [
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/tokeninfo"
            ],
            "complexity": "medium"
          }
        }
      },
      "httpclient": {
        "path": "httpclient",
        "purpose": "This folder/module is responsible for implementing an HTTP client with methods for GET and POST requests, handling responses and errors.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "httpclient/httpclient.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/labstack/echo/v4",
          "github.com/rs/zerolog/log"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating HTTP client functionalities and promoting separation of concerns.",
        "file_summaries": {
          "httpclient/httpclient.go": {
            "language": "Go",
            "purpose": "This file implements an HTTP client with methods for GET and POST requests, handling responses and errors.",
            "key_types": [
              "Client",
              "client"
            ],
            "functions": [
              "NewClient",
              "GetData",
              "GetRawData",
              "PostData",
              "PostReturnRawData",
              "processError"
            ],
            "imports": [
              "bytes",
              "context",
              "encoding/json",
              "io",
              "net/http",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log"
            ],
            "side_effects": [
              "Logs the duration of HTTP requests"
            ],
            "risks": [
              "Potential for denial of service if the server is unresponsive",
              "Improper error handling may expose sensitive information"
            ],
            "complexity": "medium"
          }
        }
      },
      "httpclient/graphql": {
        "path": "httpclient/graphql",
        "purpose": "Responsible for providing a GraphQL client implementation that can execute queries and mutations against a GraphQL server.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "doc.go",
          "graphql.go",
          "query.go",
          "scalar.go"
        ],
        "dependencies": [
          "github.com/shurcooL/githubv4",
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient/graphql/internal/jsonutil",
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient/graphql/ident"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the GraphQL client functionality into separate files for client implementation, query construction, and scalar type definitions.",
        "file_summaries": {
          "httpclient/graphql/doc.go": {
            "language": "Go",
            "purpose": "Provides a GraphQL client implementation.",
            "key_types": [
              "graphql"
            ],
            "functions": [],
            "imports": [
              "github.com/shurcooL/githubv4"
            ],
            "complexity": "low"
          },
          "httpclient/graphql/graphql.go": {
            "language": "Go",
            "purpose": "This file implements a GraphQL client that can execute queries and mutations against a GraphQL server.",
            "key_types": [
              "Client",
              "errors",
              "operationType"
            ],
            "functions": [
              "NewClient",
              "Query",
              "QueryJSON",
              "Mutate",
              "do",
              "Error"
            ],
            "imports": [
              "bytes",
              "context",
              "encoding/json",
              "fmt",
              "io",
              "net/http",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient/graphql/internal/jsonutil"
            ],
            "side_effects": [
              "Makes HTTP requests to a GraphQL server",
              "Modifies the state of the HTTP client"
            ],
            "risks": [
              "Potential exposure of sensitive data in error messages",
              "Improper handling of HTTP responses could lead to unhandled errors"
            ],
            "complexity": "medium"
          },
          "httpclient/graphql/query.go": {
            "language": "Go",
            "purpose": "Constructs GraphQL queries and mutations from Go structs.",
            "key_types": [
              "any",
              "map[string]any",
              "reflect.Type",
              "bytes.Buffer"
            ],
            "functions": [
              "constructQuery",
              "constructMutation",
              "queryArguments",
              "writeArgumentType",
              "query",
              "writeQuery"
            ],
            "imports": [
              "bytes",
              "encoding/json",
              "io",
              "reflect",
              "sort",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient/graphql/ident"
            ],
            "complexity": "medium"
          },
          "httpclient/graphql/scalar.go": {
            "language": "Go",
            "purpose": "Defines custom scalar types for use in GraphQL queries.",
            "key_types": [
              "Boolean",
              "Float",
              "ID",
              "Int",
              "String"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "httpclient/graphql/ident": {
        "path": "httpclient/graphql/ident",
        "purpose": "Provides functions for parsing and converting identifier names between various naming conventions.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "ident.go",
          "ident_test.go"
        ],
        "dependencies": [
          "github.com/shurcooL/graphql/ident"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating functionality related to identifier name parsing and conversion, along with corresponding tests.",
        "file_summaries": {
          "httpclient/graphql/ident/ident.go": {
            "language": "Go",
            "purpose": "Provides functions for parsing and converting identifier names between various naming conventions.",
            "key_types": [
              "Name"
            ],
            "functions": [
              "ParseMixedCaps",
              "ParseLowerCamelCase",
              "ParseScreamingSnakeCase",
              "ToMixedCaps",
              "ToLowerCamelCase",
              "isInitialism",
              "isTwoInitialisms",
              "isBrand"
            ],
            "imports": [
              "strings",
              "unicode",
              "unicode/utf8"
            ],
            "complexity": "medium"
          },
          "httpclient/graphql/ident/ident_test.go": {
            "language": "Go",
            "purpose": "This file contains tests for functions that convert between different naming conventions for identifiers.",
            "key_types": [
              "ident.Name"
            ],
            "functions": [
              "Example_lowerCamelCaseToMixedCaps",
              "Example_screamingSnakeCaseToMixedCaps",
              "Example_mixedCapsToLowerCamelCase",
              "TestParseMixedCaps",
              "TestParseLowerCamelCase",
              "TestParseScreamingSnakeCase",
              "TestName_ToMixedCaps",
              "TestName_ToLowerCamelCase",
              "TestMixedCapsToLowerCamelCase",
              "TestLowerCamelCaseToMixedCaps"
            ],
            "imports": [
              "fmt",
              "reflect",
              "testing",
              "github.com/shurcooL/graphql/ident"
            ],
            "complexity": "medium"
          }
        }
      },
      "httpclient/graphql/internal/jsonutil": {
        "path": "httpclient/graphql/internal/jsonutil",
        "purpose": "Provides functions for decoding JSON into a GraphQL query data structure.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "graphql.go"
        ],
        "dependencies": [
          "bytes",
          "encoding/json",
          "errors",
          "fmt",
          "io",
          "reflect",
          "strings"
        ],
        "architecture": "The folder follows a modular architecture pattern, focusing on JSON decoding specific to GraphQL, encapsulating related functionalities within a single file.",
        "file_summaries": {
          "httpclient/graphql/internal/jsonutil/graphql.go": {
            "language": "Go",
            "purpose": "Provides functions for decoding JSON into a GraphQL query data structure.",
            "key_types": [
              "decoder",
              "reflect.Value"
            ],
            "functions": [
              "UnmarshalGraphQL",
              "Decode",
              "decode",
              "pushState",
              "popState",
              "state",
              "popAllVs",
              "fieldByGraphQLName",
              "hasGraphQLName",
              "isGraphQLFragment",
              "unmarshalValue"
            ],
            "imports": [
              "bytes",
              "encoding/json",
              "errors",
              "fmt",
              "io",
              "reflect",
              "strings"
            ],
            "complexity": "high"
          }
        }
      },
      "httpclient/rpc": {
        "path": "httpclient/rpc",
        "purpose": "Responsible for implementing an RPC client to interact with Ethereum smart contracts and retrieve token balances.",
        "languages": {
          "Go": 1,
          "JSON": 2
        },
        "key_modules": [
          "erc20ABI.json",
          "multicallContractABI.json",
          "rpc.go"
        ],
        "dependencies": [
          "github.com/ethereum/go-ethereum",
          "github.com/forta-network/go-multicall",
          "github.com/rs/zerolog/log",
          "golang.org/x/exp/slices"
        ],
        "architecture": "The folder follows a modular architecture pattern, separating ABI definitions in JSON files and the RPC client implementation in Go, facilitating clear interaction with Ethereum smart contracts.",
        "file_summaries": {
          "httpclient/rpc/erc20ABI.json": {
            "language": "JSON",
            "purpose": "Defines the ABI for an ERC20 token contract, specifically the balanceOf function.",
            "key_types": [
              "object",
              "array"
            ],
            "functions": [
              "balanceOf"
            ],
            "imports": [],
            "complexity": "low"
          },
          "httpclient/rpc/multicallContractABI.json": {
            "language": "JSON",
            "purpose": "Defines the ABI for a smart contract function that aggregates multiple calls.",
            "key_types": [
              "tuple",
              "address",
              "bytes",
              "uint256"
            ],
            "functions": [
              "aggregate"
            ],
            "imports": [],
            "complexity": "low"
          },
          "httpclient/rpc/rpc.go": {
            "language": "Go",
            "purpose": "This file implements an RPC client for interacting with Ethereum smart contracts to retrieve token balances.",
            "key_types": [
              "Config",
              "Client",
              "rpcClient",
              "MulticallData"
            ],
            "functions": [
              "GetCurrentBlockNumber",
              "MulticallGetBalances",
              "getNativeTokenBalance",
              "getERC20TokenBalances",
              "NewRPCClient"
            ],
            "imports": [
              "context",
              "errors",
              "math/big",
              "strings",
              "sync",
              "time",
              "github.com/ethereum/go-ethereum",
              "github.com/ethereum/go-ethereum/accounts/abi",
              "github.com/ethereum/go-ethereum/common",
              "github.com/ethereum/go-ethereum/ethclient",
              "github.com/forta-network/go-multicall",
              "github.com/rs/zerolog/log",
              "golang.org/x/exp/slices",
              "github.com/axieinfinity/ronin-wallet-proxy/models"
            ],
            "side_effects": [
              "Logs errors when RPC calls fail"
            ],
            "risks": [
              "Potential for context cancellation errors not being handled properly"
            ],
            "complexity": "medium"
          }
        }
      },
      "middleware": {
        "path": "middleware",
        "purpose": "This folder/module is responsible for implementing various middleware functions for an Echo web server application, including error handling, authentication, and performance monitoring.",
        "languages": {
          "Go": 6
        },
        "key_modules": [
          "custom_requests_total_prometheus.go",
          "error_handler.go",
          "internal_auth.go",
          "latency_alert.go",
          "private_mode.go",
          "wallet_auth.go"
        ],
        "dependencies": [
          "github.com/labstack/echo/v4",
          "github.com/labstack/echo-contrib/echoprometheus",
          "github.com/prometheus/client_golang/prometheus",
          "github.com/rs/zerolog/log",
          "github.com/golang-jwt/jwt",
          "github.com/jackc/pgconn",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ecosystem-go-common/validation",
          "github.com/axieinfinity/ecosystem-go-common/hmac",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/crypto/hmac",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
        ],
        "architecture": "The folder follows a modular architecture pattern, where each middleware file encapsulates specific functionality and can be independently used or combined within the Echo web server framework.",
        "file_summaries": {
          "middleware/custom_requests_total_prometheus.go": {
            "language": "Go",
            "purpose": "This file defines a middleware for tracking custom HTTP request metrics using Prometheus.",
            "key_types": [
              "echo.MiddlewareFunc",
              "prometheus.CounterVec",
              "prometheus.CounterOpts"
            ],
            "functions": [
              "NewCustomRequestsTotalPrometheus"
            ],
            "imports": [
              "strconv",
              "github.com/labstack/echo-contrib/echoprometheus",
              "github.com/labstack/echo/v4",
              "github.com/prometheus/client_golang/prometheus",
              "github.com/rs/zerolog/log"
            ],
            "side_effects": [
              "Registers a new Prometheus counter metric",
              "Logs fatal errors if metric registration fails"
            ],
            "risks": [
              "Potential for panic if type assertions fail",
              "Logging sensitive information if not handled properly"
            ],
            "complexity": "medium"
          },
          "middleware/error_handler.go": {
            "language": "Go",
            "purpose": "Handles global errors for an Echo web server application.",
            "key_types": [
              "error",
              "echo.Context",
              "mErrs.HTTPError",
              "jwt.ValidationError",
              "pgconn.PgError",
              "validation.Errors"
            ],
            "functions": [
              "GlobalErrorHandler",
              "Init"
            ],
            "imports": [
              "context",
              "errors",
              "fmt",
              "net/http",
              "net/url",
              "slices",
              "strings",
              "github.com/golang-jwt/jwt",
              "github.com/jackc/pgconn",
              "github.com/labstack/echo/v4",
              "github.com/labstack/echo/v4/middleware",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ecosystem-go-common/validation",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
            ],
            "side_effects": [
              "Logs errors to the context's logger",
              "Sends JSON response with error details to the client"
            ],
            "risks": [
              "Potential exposure of sensitive error details in logs",
              "Improper handling of JWT errors may lead to unauthorized access"
            ],
            "complexity": "medium"
          },
          "middleware/internal_auth.go": {
            "language": "Go",
            "purpose": "This file implements HMAC authentication middleware for validating HMAC signatures in HTTP requests.",
            "key_types": [
              "Config",
              "MiddlewareFunc",
              "Context"
            ],
            "functions": [
              "HmacAuthentication"
            ],
            "imports": [
              "fmt",
              "net/http",
              "strings",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ecosystem-go-common/hmac",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/crypto/hmac",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
            ],
            "side_effects": [
              "Modifies the request context based on authentication results"
            ],
            "risks": [
              "Potential exposure of sensitive information if error messages are not handled properly"
            ],
            "complexity": "medium"
          },
          "middleware/latency_alert.go": {
            "language": "Go",
            "purpose": "Defines a middleware function to log requests that exceed a specified latency threshold.",
            "key_types": [
              "echo.MiddlewareFunc",
              "echo.HandlerFunc",
              "echo.Context"
            ],
            "functions": [
              "NewLatencyAlert"
            ],
            "imports": [
              "strconv",
              "time",
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log"
            ],
            "side_effects": [
              "Logs a warning message if the request latency exceeds the threshold."
            ],
            "risks": [
              "Potential information leakage through logged request details."
            ],
            "complexity": "medium"
          },
          "middleware/private_mode.go": {
            "language": "Go",
            "purpose": "Middleware function to enforce private mode based on API key validation.",
            "key_types": [
              "echo.MiddlewareFunc",
              "echo.HandlerFunc",
              "echo.Context"
            ],
            "functions": [
              "PrivateMode"
            ],
            "imports": [
              "net/http",
              "github.com/labstack/echo/v4"
            ],
            "side_effects": [
              "Returns HTTP 401 Unauthorized if API key does not match."
            ],
            "risks": [
              "Potential exposure of API key if not handled securely."
            ],
            "complexity": "medium"
          },
          "middleware/wallet_auth.go": {
            "language": "Go",
            "purpose": "This file implements middleware for verifying wallet signatures in HTTP requests.",
            "key_types": [
              "hmac.Config",
              "echo.MiddlewareFunc",
              "error"
            ],
            "functions": [
              "VerifyWalletSignature",
              "newClockSkewValidator"
            ],
            "imports": [
              "fmt",
              "math",
              "net/http",
              "sort",
              "strings",
              "time",
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/crypto/hmac",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
            ],
            "side_effects": [
              "Logs request information"
            ],
            "risks": [
              "Potential for unauthorized access if wallet addresses are not properly whitelisted",
              "Signature validation failures may lead to denial of service"
            ],
            "complexity": "medium"
          }
        }
      },
      "migrations": {
        "path": "migrations",
        "purpose": "This folder contains SQL migration scripts for managing database schema changes, including creating, altering, and dropping tables and columns.",
        "languages": {
          "SQL": 3
        },
        "key_modules": [
          "20230906150000_init_db.sql",
          "20240108180000_add_cmc_addresses.sql",
          "20240124100000_add_nft_mapping.sql"
        ],
        "dependencies": [],
        "architecture": "The folder follows a sequential migration pattern where each file represents a specific change to the database schema, allowing for version control and rollback capabilities.",
        "file_summaries": {
          "migrations/20230906150000_init_db.sql": {
            "language": "SQL",
            "purpose": "This file contains database migration scripts to create and drop a table for storing token information.",
            "key_types": [
              "varchar",
              "float8",
              "bool",
              "text",
              "jsonb",
              "timestamptz"
            ],
            "functions": [
              "CREATE EXTENSION",
              "CREATE TABLE",
              "CREATE INDEX",
              "DROP TABLE",
              "DROP COLLATION"
            ],
            "imports": [],
            "side_effects": [
              "Modifies the database schema by creating extensions, tables, and indexes."
            ],
            "risks": [
              "Potential for SQL injection if user input is not properly sanitized.",
              "Data loss if the DROP TABLE command is executed without backups."
            ],
            "complexity": "medium"
          },
          "migrations/20240108180000_add_cmc_addresses.sql": {
            "language": "SQL",
            "purpose": "This file contains migration scripts to add and remove a column in the token_infos table.",
            "key_types": [
              "table",
              "column",
              "jsonb"
            ],
            "functions": [
              "ALTER TABLE"
            ],
            "imports": [],
            "side_effects": [
              "Modifies the database schema by adding and dropping a column."
            ],
            "risks": [
              "Potential data loss if the column is dropped without proper backups."
            ],
            "complexity": "low"
          },
          "migrations/20240124100000_add_nft_mapping.sql": {
            "language": "SQL",
            "purpose": "Defines a migration for creating and dropping the nft_mappings table in a database.",
            "key_types": [
              "table",
              "index"
            ],
            "functions": [
              "CREATE TABLE",
              "CREATE INDEX",
              "DROP TABLE"
            ],
            "imports": [],
            "side_effects": [
              "Modifies the database schema by creating and dropping tables and indexes."
            ],
            "risks": [
              "Potential data loss if the DROP TABLE command is executed without backups."
            ],
            "complexity": "low"
          }
        }
      },
      "models": {
        "path": "models",
        "purpose": "Defines data structures and methods for handling blockchain-related requests, responses, and data management.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "models/blockchain.go",
          "models/default.go",
          "models/nft_mapping.go",
          "models/price_chart.go",
          "models/token_info.go"
        ],
        "dependencies": [
          "github.com/ethereum/go-ethereum/common",
          "database/sql/driver",
          "encoding/json",
          "errors",
          "strings",
          "github.com/mitchellh/mapstructure",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "time",
          "github.com/lib/pq",
          "github.com/shopspring/decimal"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing related data structures and methods into separate files for clarity and maintainability.",
        "file_summaries": {
          "models/blockchain.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling blockchain token requests and responses.",
            "key_types": [
              "SelectProviderReq",
              "GetTokenBalancesReq",
              "GetTokenBalancesRes",
              "TokenBalance",
              "KnownContract",
              "Transaction",
              "GetTransactionsReq",
              "NFTCollection",
              "NFTItem",
              "GetNFTCollectionsReq",
              "GetNFTItemsReq",
              "GetNFTItemReq",
              "GetTxnByHashReq",
              "GetGasSuggestionReq",
              "EIP1559GasSuggestion",
              "LegacyGasSuggestion",
              "GetGasSuggestionRes"
            ],
            "functions": [
              "GetTokenStandardsIncluded",
              "GenerateCacheKey",
              "Clone",
              "CreateTxn"
            ],
            "imports": [
              "strconv",
              "strings",
              "github.com/ethereum/go-ethereum/common"
            ],
            "complexity": "medium"
          },
          "models/default.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for pagination and response handling.",
            "key_types": [
              "Paging",
              "ListResponse"
            ],
            "functions": [
              "GetPage",
              "GetOffset",
              "GetSize",
              "GetSizeWithDefault"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "models/nft_mapping.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling NFT mappings and requests related to them.",
            "key_types": [
              "Mapping",
              "NFTMapping",
              "NFTMappingFilter",
              "GetOneNFTMappingRequest",
              "SaveNFTMappingRequest",
              "BatchMapping",
              "SaveBatchNFTMappingRequest",
              "GetNFTMappingsListRequest"
            ],
            "functions": [
              "Scan",
              "Value",
              "ToMap",
              "ToFilter",
              "ToMapping",
              "UnmarshalJSON",
              "ToMappings",
              "ToPaging"
            ],
            "imports": [
              "database/sql/driver",
              "encoding/json",
              "errors",
              "strings",
              "github.com/mitchellh/mapstructure",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
            ],
            "complexity": "medium"
          },
          "models/price_chart.go": {
            "language": "Go",
            "purpose": "Defines data structures for price charts and token prices, and provides methods to manage token price data.",
            "key_types": [
              "ChartItem",
              "PriceChart",
              "TokenPrice",
              "TokenPrices"
            ],
            "functions": [
              "NewTokenPrices",
              "Get",
              "Add",
              "Merge",
              "Values"
            ],
            "imports": [
              "time"
            ],
            "complexity": "medium"
          },
          "models/token_info.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling token information and related metadata.",
            "key_types": [
              "QuoteInfo",
              "Metadata",
              "Quote",
              "ContractAddress",
              "ContractAddresses",
              "TokenInfo",
              "GetTokenInfoRequest",
              "DateRange",
              "GetPriceChartRequest",
              "ContractFilter",
              "SearchTokensRequest",
              "PostSearchTokensRequest",
              "SearchTokensResponse",
              "CreateTokenInfoRequest",
              "GetTokenInfoByIDRequest",
              "DexVolumeUsd",
              "DexTokenPool",
              "DexToken"
            ],
            "functions": [
              "Scan",
              "Value",
              "Clone",
              "GetDateRange",
              "ToTokenInfo"
            ],
            "imports": [
              "database/sql/driver",
              "encoding/json",
              "errors",
              "time",
              "github.com/lib/pq",
              "github.com/shopspring/decimal"
            ],
            "complexity": "medium"
          }
        }
      },
      "models/skymavis": {
        "path": "models/skymavis",
        "purpose": "Defines data structures and methods for various game-related models in the Skymavis ecosystem.",
        "languages": {
          "Go": 9
        },
        "key_modules": [
          "axie.go",
          "axie_accessory.go",
          "axiexp.go",
          "default.go",
          "land.go",
          "mkp_erc721token.go",
          "origin.go",
          "part.go",
          "transaction.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-proxy/models"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing related data structures and functions into separate files for clarity and maintainability.",
        "file_summaries": {
          "models/skymavis/axie.go": {
            "language": "Go",
            "purpose": "Defines data structures for Axie models used in a game.",
            "key_types": [
              "Axie",
              "Stat",
              "Type",
              "PartSkinCounter",
              "IAxieMetadata"
            ],
            "functions": [
              "GetClass",
              "GetType",
              "GetParts",
              "GetPartSkinCounter",
              "GetContribution"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "models/skymavis/axie_accessory.go": {
            "language": "Go",
            "purpose": "Defines a struct for Axie accessory instances used in a gaming context.",
            "key_types": [
              "AxieAccessoryInstances"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "models/skymavis/axiexp.go": {
            "language": "Go",
            "purpose": "Defines a struct for AXPInfo with fields related to experience levels in a gaming context.",
            "key_types": [
              "AXPInfo"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "models/skymavis/default.go": {
            "language": "Go",
            "purpose": "Defines token information and a response structure for known contracts in the Skymavis ecosystem.",
            "key_types": [
              "RoninNativeToken",
              "RoninTokenContract",
              "GetKnownContractsResponse"
            ],
            "functions": [],
            "imports": [
              "github.com/axieinfinity/ronin-wallet-proxy/models"
            ],
            "complexity": "low"
          },
          "models/skymavis/land.go": {
            "language": "Go",
            "purpose": "Defines data structures for land items and land in a gaming context.",
            "key_types": [
              "LandItem",
              "Land"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "models/skymavis/mkp_erc721token.go": {
            "language": "Go",
            "purpose": "Defines data structures for ERC721 tokens and provides a function to convert between two token types.",
            "key_types": [
              "MKPErc721Token1",
              "MKPErc721Token"
            ],
            "functions": [
              "ConvertMKPErc721Token"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "models/skymavis/origin.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling items in a game, including their metadata.",
            "key_types": [
              "OriginBaseItem",
              "MetadataExporter",
              "RuneItem",
              "GetRunesResponse",
              "CharmItem",
              "GetCharmsResponse"
            ],
            "functions": [
              "ToMetadata() for RuneItem",
              "ToMetadata() for CharmItem"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "models/skymavis/part.go": {
            "language": "Go",
            "purpose": "Defines types and constants for parts of a game character, including their attributes and abilities.",
            "key_types": [
              "PartType",
              "PartSkin",
              "PartSkinWrap",
              "Part",
              "PartAbility"
            ],
            "functions": [
              "String()",
              "Gen256IntToPartSkin(int) PartSkin",
              "Gen512IntToPartSkin(int) PartSkin",
              "NewPartSkinCounter() PartSkinCounter"
            ],
            "imports": [
              "fmt"
            ],
            "complexity": "medium"
          },
          "models/skymavis/transaction.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling blockchain transaction logs and transactions.",
            "key_types": [
              "Log",
              "Transaction",
              "TransferInternalTxn",
              "TokenTransaction"
            ],
            "functions": [
              "ToTxn (Transaction)",
              "ToTxn (TransferInternalTxn)",
              "ToTxn (TokenTransaction)"
            ],
            "imports": [
              "github.com/axieinfinity/ronin-wallet-proxy/models"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/appaxie": {
        "path": "pkg/appaxie",
        "purpose": "This folder/module is responsible for providing services and data structures to interact with NFT collections in the Axie Infinity ecosystem.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "appaxie_svc.go",
          "config.go",
          "models.go"
        ],
        "dependencies": [
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient/graphql",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/models/skymavis",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/roninabi",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating business logic related to NFT interactions and separating configuration and data models.",
        "file_summaries": {
          "pkg/appaxie/appaxie_svc.go": {
            "language": "Go",
            "purpose": "This file defines a service for interacting with NFT collections, specifically for Axies and land items in the Axie Infinity ecosystem.",
            "key_types": [
              "OwnershipType",
              "Service",
              "service"
            ],
            "functions": [
              "IsSupportedContract",
              "GetNFTOfCollectionForAddr",
              "GetNFTItemByTokenID",
              "GetAxieByID",
              "GetAxiesByOwnerAddress",
              "GetLandItemByTokenID",
              "GetLandItemsByOwnerAddress",
              "GetLandPlotByTokenID",
              "GetLandPlotsByOwnerAddress"
            ],
            "imports": [
              "context",
              "fmt",
              "net/http",
              "slices",
              "strconv",
              "time",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient/graphql",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/models/skymavis",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/roninabi",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "side_effects": [
              "Logs errors when queries fail"
            ],
            "risks": [
              "Potential exposure of sensitive data through logs",
              "Improper handling of nil values could lead to panics"
            ],
            "complexity": "medium"
          },
          "pkg/appaxie/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for the appaxie package.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/appaxie/models.go": {
            "language": "Go",
            "purpose": "Defines data structures and queries for Axie Infinity assets using GraphQL.",
            "key_types": [
              "AxiesListResponse",
              "AxiesQuery",
              "LandItemsListResponse",
              "LandItemByIDQuery",
              "LandItemsQuery",
              "LandsListResponse",
              "LandByIDQuery",
              "LandsQuery",
              "AxieAccessoryListResponse",
              "AxieAccessoriesQuery"
            ],
            "functions": [],
            "imports": [
              "github.com/axieinfinity/ronin-wallet-proxy/models/skymavis"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/cmc": {
        "path": "pkg/cmc",
        "purpose": "Responsible for fetching token lists and metadata, and crawling token descriptions from a web source.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "cmc_svc.go",
          "config.go",
          "models.go"
        ],
        "dependencies": [
          "github.com/EDDYCJY/fake-useragent",
          "github.com/gocolly/colly",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
        ],
        "architecture": "The folder follows a service-oriented architecture, encapsulating functionality related to cryptocurrency data fetching and processing.",
        "file_summaries": {
          "pkg/cmc/cmc_svc.go": {
            "language": "Go",
            "purpose": "Provides a service for fetching token lists and metadata, and crawling token descriptions from a web source.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "GetTokensListResponse",
              "GetTokensMetadataResponse"
            ],
            "functions": [
              "GetTokenList",
              "GetTokensMetadata",
              "CrawlTokenDescription",
              "newCollector",
              "buildHeaders",
              "NewService"
            ],
            "imports": [
              "context",
              "fmt",
              "math/rand",
              "net/http",
              "strings",
              "time",
              "github.com/EDDYCJY/fake-useragent",
              "github.com/gocolly/colly",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient"
            ],
            "side_effects": [
              "Makes HTTP requests to external APIs",
              "Crawls web pages for data"
            ],
            "risks": [
              "Potential for HTTP request failures",
              "Web scraping may violate terms of service of the target website"
            ],
            "complexity": "medium"
          },
          "pkg/cmc/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for API settings and parameters.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/cmc/models.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling token information and responses related to cryptocurrency data.",
            "key_types": [
              "ResponseStatus",
              "TokenInfo",
              "GetTokensListResponse",
              "ContractAddress",
              "Metadata",
              "GetTokensMetadataResponse"
            ],
            "functions": [
              "ToTokenInfo",
              "MetadataToTokenInfo"
            ],
            "imports": [
              "slices",
              "strconv",
              "strings",
              "time",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/coinbase": {
        "path": "pkg/coinbase",
        "purpose": "Responsible for interacting with a Coinbase-like API to retrieve buy options for cryptocurrencies.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "coinbase_svc.go",
          "config.go",
          "models.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient"
        ],
        "architecture": "The folder follows a service-oriented architecture, encapsulating API interactions, configuration, and data models in separate files for modularity and maintainability.",
        "file_summaries": {
          "pkg/coinbase/coinbase_svc.go": {
            "language": "Go",
            "purpose": "Provides a service to get buy options from a Coinbase-like API.",
            "key_types": [
              "Service",
              "svc",
              "Config",
              "GetBuyOptionsRequest"
            ],
            "functions": [
              "GetBuyOptions",
              "buildHeaders",
              "NewService"
            ],
            "imports": [
              "context",
              "fmt",
              "net/http",
              "net/url",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient"
            ],
            "side_effects": [
              "Makes HTTP requests to an external API"
            ],
            "risks": [
              "Potential exposure of API keys if not handled securely"
            ],
            "complexity": "medium"
          },
          "pkg/coinbase/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for the Coinbase API.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/coinbase/models.go": {
            "language": "Go",
            "purpose": "Defines data structures for handling buy options in a cryptocurrency context.",
            "key_types": [
              "GetBuyOptionsRequest",
              "GetBuyOptionsResponse",
              "PaymentMethodLimit",
              "PaymentCurrency",
              "PurchaseNetwork",
              "PurchaseCurrency"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "pkg/coingecko": {
        "path": "pkg/coingecko",
        "purpose": "This folder/module is responsible for interacting with the CoinGecko API to retrieve cryptocurrency data such as token prices, price charts, and token information.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "cgk_svc.go",
          "config.go",
          "metrics.go",
          "models.go"
        ],
        "dependencies": [
          "github.com/prometheus/client_golang/prometheus",
          "github.com/rs/zerolog/log",
          "github.com/samber/lo",
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/worker",
          "github.com/shopspring/decimal"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating functionality related to the CoinGecko API into distinct files, each responsible for specific aspects such as service definition, configuration, metrics, and data models.",
        "file_summaries": {
          "pkg/coingecko/cgk_svc.go": {
            "language": "Go",
            "purpose": "This file defines a service for interacting with the CoinGecko API to retrieve cryptocurrency data such as token prices, price charts, and token information.",
            "key_types": [
              "Service",
              "service",
              "Token",
              "models.PriceChart",
              "models.TokenPrices",
              "models.TokenPrice",
              "models.DexToken"
            ],
            "functions": [
              "GetAllTokens",
              "GetPriceChart",
              "GetTokensPrice",
              "GetTokenPrice",
              "GetTokenPriceByID",
              "GetTokenInfo",
              "GetDexToken",
              "GetDexPriceChart"
            ],
            "imports": [
              "context",
              "fmt",
              "math/rand",
              "net/http",
              "net/url",
              "strconv",
              "strings",
              "time",
              "github.com/prometheus/client_golang/prometheus",
              "github.com/rs/zerolog/log",
              "github.com/samber/lo",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
              "github.com/axieinfinity/ronin-wallet-proxy/models"
            ],
            "side_effects": [
              "Makes HTTP requests to external APIs",
              "Modifies state based on API responses"
            ],
            "risks": [
              "Potential exposure of API keys if not handled securely",
              "Dependency on external API availability and response format"
            ],
            "complexity": "medium"
          },
          "pkg/coingecko/config.go": {
            "language": "Go",
            "purpose": "Defines configuration settings for interacting with the CoinGecko API.",
            "key_types": [
              "Config",
              "time.Duration",
              "worker.Config",
              "map[string]string",
              "map[string]ContractPlatformDetail"
            ],
            "functions": [],
            "imports": [
              "time",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/worker"
            ],
            "complexity": "medium"
          },
          "pkg/coingecko/metrics.go": {
            "language": "Go",
            "purpose": "Defines metrics for tracking request duration using Prometheus",
            "key_types": [
              "HistogramVec",
              "HistogramOpts"
            ],
            "functions": [],
            "imports": [
              "github.com/prometheus/client_golang/prometheus"
            ],
            "complexity": "low"
          },
          "pkg/coingecko/models.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling cryptocurrency token information and market data.",
            "key_types": [
              "ContractPlatformDetail",
              "Token",
              "PriceChartResponse",
              "ErrorMessage",
              "MarketInfo",
              "PoolOHLCVResponse",
              "ObjectID",
              "ObjectRef",
              "ObjectRefs",
              "TransactionCount",
              "DexTokenPool",
              "DexTokenResponse"
            ],
            "functions": [
              "ToTokenInfoMetadata",
              "ToPriceChart",
              "convertChartItem",
              "Error"
            ],
            "imports": [
              "slices",
              "strconv",
              "strings",
              "time",
              "github.com/shopspring/decimal",
              "github.com/axieinfinity/ronin-wallet-proxy/models"
            ],
            "side_effects": [
              "Modifies the state of the Token and PriceChartResponse structures."
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/crypto/hmac": {
        "path": "pkg/crypto/hmac",
        "purpose": "This folder/module is responsible for providing HMAC signing and validation functionalities, including configuration management and unit testing.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "config.go",
          "funcs.go",
          "funcs_test.go",
          "hmac.go",
          "init.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ecosystem-go-common/hmac",
          "crypto/hmac",
          "crypto/sha256",
          "crypto/sha512",
          "encoding/base64",
          "errors",
          "fmt",
          "sort",
          "strings",
          "testing",
          "time",
          "sync"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating HMAC-related functionalities and configurations in separate files, promoting separation of concerns and testability.",
        "file_summaries": {
          "pkg/crypto/hmac/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for HMAC with a whitelist of addresses.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [
              "github.com/axieinfinity/ecosystem-go-common/hmac"
            ],
            "complexity": "low"
          },
          "pkg/crypto/hmac/funcs.go": {
            "language": "Go",
            "purpose": "Provides HMAC signing functions using SHA256 and SHA512 algorithms.",
            "key_types": [
              "[]byte",
              "map[string]string"
            ],
            "functions": [
              "SHA256",
              "SHA512",
              "Sign"
            ],
            "imports": [
              "crypto/hmac",
              "crypto/sha256",
              "crypto/sha512",
              "encoding/base64",
              "errors",
              "fmt",
              "sort",
              "strings"
            ],
            "risks": [
              "Potential for timing attacks if not handled properly in signature verification."
            ],
            "complexity": "medium"
          },
          "pkg/crypto/hmac/funcs_test.go": {
            "language": "Go",
            "purpose": "Unit tests for HMAC signing functionality",
            "key_types": [
              "struct",
              "map",
              "string",
              "byte"
            ],
            "functions": [
              "TestSign"
            ],
            "imports": [
              "testing",
              "time"
            ],
            "complexity": "medium"
          },
          "pkg/crypto/hmac/hmac.go": {
            "language": "Go",
            "purpose": "Provides HMAC validation functionality including signature verification and clock skew validation.",
            "key_types": [
              "HMAC",
              "Config"
            ],
            "functions": [
              "New",
              "validateClockSkew",
              "ValidateSignature"
            ],
            "imports": [
              "encoding/base64",
              "errors",
              "fmt",
              "math",
              "net/http",
              "sort",
              "time"
            ],
            "side_effects": [
              "Prints error messages to console"
            ],
            "risks": [
              "Potential for time-based attacks if clock skew is not properly managed"
            ],
            "complexity": "medium"
          },
          "pkg/crypto/hmac/init.go": {
            "language": "Go",
            "purpose": "This file initializes a singleton instance of the HMAC structure with a configuration.",
            "key_types": [
              "HMAC",
              "Config"
            ],
            "functions": [
              "init",
              "InitInstance"
            ],
            "imports": [
              "sync"
            ],
            "side_effects": [
              "Initializes a global instance of HMAC",
              "Modifies global configuration"
            ],
            "risks": [
              "Potential race conditions if InitInstance is called concurrently without proper synchronization"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/exchangerate": {
        "path": "pkg/exchangerate",
        "purpose": "Responsible for providing services related to fetching and managing cryptocurrency token prices, including configuration management.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "config.go",
          "skynet.go"
        ],
        "dependencies": [
          "github.com/kataras/iris/v12/x/mathx",
          "github.com/patrickmn/go-cache",
          "github.com/rs/zerolog/log",
          "golang.org/x/exp/maps",
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating configuration and service logic related to exchange rates in separate files.",
        "file_summaries": {
          "pkg/exchangerate/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for an exchange rate service.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/exchangerate/skynet.go": {
            "language": "Go",
            "purpose": "This file provides a service for fetching cryptocurrency token prices and managing them using caching.",
            "key_types": [
              "TokenAddress",
              "Currency",
              "TokenPrice",
              "Service",
              "service",
              "skynetTokenResp",
              "skynetTokenBySymbolResp",
              "skynetError"
            ],
            "functions": [
              "getPriceByAddresses",
              "getPriceBySymbol",
              "getErc20TokensPrice",
              "getSymbolTokenPrice",
              "calcTokensPrice",
              "calcTokenPrice",
              "GetTokensPrice",
              "GetTokenPrice",
              "unixTime24HoursAgo",
              "NewServiceV2"
            ],
            "imports": [
              "context",
              "fmt",
              "net/http",
              "net/url",
              "slices",
              "strconv",
              "strings",
              "time",
              "github.com/kataras/iris/v12/x/mathx",
              "github.com/patrickmn/go-cache",
              "github.com/rs/zerolog/log",
              "golang.org/x/exp/maps",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
            ],
            "side_effects": [
              "Logs errors when fetching prices fails"
            ],
            "risks": [
              "Potential exposure of sensitive information if error messages are logged without sanitization"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/helper": {
        "path": "pkg/helper",
        "purpose": "Provides various utility functions and helpers for handling data types, binding, JSON conversion, authentication, and more within the application.",
        "languages": {
          "Go": 12
        },
        "key_modules": [
          "big.go",
          "binder.go",
          "convert_json_key_to_snake_case.go",
          "hmac_token.go",
          "mapstruct_hook.go",
          "par.go",
          "pointer.go",
          "ronin.go",
          "slice.go",
          "strings.go",
          "tls.go",
          "user_agent.go"
        ],
        "dependencies": [
          "github.com/labstack/echo/v4",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/crypto/hmac",
          "github.com/Masterminds/semver",
          "github.com/inhies/go-bytesize",
          "github.com/mitchellh/mapstructure",
          "github.com/ethereum/go-ethereum/common",
          "github.com/ethereum/go-ethereum/common/hexutil",
          "github.com/ethereum/go-ethereum/crypto"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing utility functions and types into separate files for better maintainability and reusability.",
        "file_summaries": {
          "pkg/helper/big.go": {
            "language": "Go",
            "purpose": "Provides a function to determine the maximum of two big integers.",
            "key_types": [
              "*big.Int"
            ],
            "functions": [
              "Max"
            ],
            "imports": [
              "math/big"
            ],
            "complexity": "low"
          },
          "pkg/helper/binder.go": {
            "language": "Go",
            "purpose": "Provides binding functionality for Echo framework with support for headers.",
            "key_types": [
              "BindFunc",
              "echo.Context",
              "echo.Binder"
            ],
            "functions": [
              "Bind",
              "NewBindWithHeaders"
            ],
            "imports": [
              "github.com/labstack/echo/v4"
            ],
            "complexity": "medium"
          },
          "pkg/helper/convert_json_key_to_snake_case.go": {
            "language": "Go",
            "purpose": "Converts JSON keys from camelCase to snake_case.",
            "key_types": [
              "json.RawMessage",
              "map[string]json.RawMessage",
              "[]json.RawMessage"
            ],
            "functions": [
              "ConvertKeysToSnakeCase",
              "_convertKeysForObject",
              "_convertKeysForArray",
              "_fixKey"
            ],
            "imports": [
              "encoding/json",
              "strings"
            ],
            "complexity": "medium"
          },
          "pkg/helper/hmac_token.go": {
            "language": "Go",
            "purpose": "Generates an HMAC access token for authentication purposes.",
            "key_types": [
              "string",
              "error"
            ],
            "functions": [
              "GenerateHMACAccessToken"
            ],
            "imports": [
              "fmt",
              "strings",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/crypto/hmac"
            ],
            "complexity": "medium"
          },
          "pkg/helper/mapstruct_hook.go": {
            "language": "Go",
            "purpose": "Provides decode hook functions for converting string representations to specific types.",
            "key_types": [
              "mapstructure.DecodeHookFunc",
              "reflect.Type",
              "bytesize.ByteSize",
              "semver.Constraints"
            ],
            "functions": [
              "StringToByteSizeHookFunc",
              "StringToSemverConditionHookFunc"
            ],
            "imports": [
              "reflect",
              "github.com/Masterminds/semver",
              "github.com/inhies/go-bytesize",
              "github.com/mitchellh/mapstructure"
            ],
            "complexity": "medium"
          },
          "pkg/helper/par.go": {
            "language": "Go",
            "purpose": "This file provides a helper for handling results of functions that may return an error, including parallel execution of such functions.",
            "key_types": [
              "Result[T]"
            ],
            "functions": [
              "IsOk",
              "IsError",
              "Error",
              "MustGet",
              "TupleToResult",
              "ParDo"
            ],
            "imports": [
              "sync"
            ],
            "side_effects": [
              "Panic if MustGet is called on an error result"
            ],
            "risks": [
              "Potential race conditions if not handled properly in ParDo"
            ],
            "complexity": "medium"
          },
          "pkg/helper/pointer.go": {
            "language": "Go",
            "purpose": "Defines a generic function to create a pointer to a value of any type.",
            "key_types": [
              "T"
            ],
            "functions": [
              "NewPointer"
            ],
            "imports": [],
            "complexity": "low"
          },
          "pkg/helper/ronin.go": {
            "language": "Go",
            "purpose": "Provides utility functions for normalizing Ethereum addresses, hashing messages, and validating signatures.",
            "key_types": [
              "string",
              "common.Hash"
            ],
            "functions": [
              "NormalizeAddress",
              "HashMessage",
              "IsValidSignature"
            ],
            "imports": [
              "fmt",
              "strings",
              "github.com/ethereum/go-ethereum/common",
              "github.com/ethereum/go-ethereum/common/hexutil",
              "github.com/ethereum/go-ethereum/crypto"
            ],
            "risks": [
              "Potential for incorrect address normalization leading to security issues.",
              "Improper handling of signature validation could allow unauthorized access."
            ],
            "complexity": "medium"
          },
          "pkg/helper/slice.go": {
            "language": "Go",
            "purpose": "Provides utility functions for manipulating slices, including filtering, finding indices, converting slices to maps, and mapping items.",
            "key_types": [
              "slice",
              "map",
              "function"
            ],
            "functions": [
              "Filter",
              "IndexOf",
              "SliceToMap",
              "Map",
              "ItemInSlice"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/helper/strings.go": {
            "language": "Go",
            "purpose": "Truncates a string to a specified maximum length, ensuring it does not cut off words.",
            "key_types": [
              "string"
            ],
            "functions": [
              "EllipticalTruncate"
            ],
            "imports": [
              "unicode"
            ],
            "complexity": "low"
          },
          "pkg/helper/tls.go": {
            "language": "Go",
            "purpose": "This file provides a function to convert provided certificate and key data into a TLS configuration.",
            "key_types": [
              "tls.Config",
              "tls.Certificate",
              "x509.CertPool"
            ],
            "functions": [
              "ConvertToTLSConfig"
            ],
            "imports": [
              "crypto/tls",
              "crypto/x509"
            ],
            "complexity": "medium"
          },
          "pkg/helper/user_agent.go": {
            "language": "Go",
            "purpose": "This file provides functionality to parse and handle user agent strings in the context of a web application.",
            "key_types": [
              "UserAgent"
            ],
            "functions": [
              "UserAgentFromContext"
            ],
            "imports": [
              "fmt",
              "strings",
              "github.com/labstack/echo/v4"
            ],
            "risks": [
              "Potential for malformed user agent strings leading to errors"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/nft_mapping": {
        "path": "pkg/nft_mapping",
        "purpose": "Responsible for managing NFT mappings, including saving, searching, and caching.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "nft_mapping_svc.go"
        ],
        "dependencies": [
          "github.com/jellydator/ttlcache/v3",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/repositories"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating NFT mapping functionalities within a dedicated service module.",
        "file_summaries": {
          "pkg/nft_mapping/nft_mapping_svc.go": {
            "language": "Go",
            "purpose": "Provides a service for managing NFT mappings, including saving, searching, and caching.",
            "key_types": [
              "Service",
              "svc",
              "NFTMapping",
              "NFTMappingFilter",
              "Paging"
            ],
            "functions": [
              "Save",
              "SaveBatch",
              "SearchOne",
              "SearchList",
              "subscribeRefreshCacheChannel",
              "publishMessageRefreshCache",
              "NewService"
            ],
            "imports": [
              "context",
              "fmt",
              "time",
              "github.com/jellydator/ttlcache/v3",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/repositories"
            ],
            "side_effects": [
              "Caches NFT mappings",
              "Subscribes to a Redis channel for cache invalidation"
            ],
            "risks": [
              "Potential race conditions in cache management",
              "Error handling for Redis operations may not be sufficient"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/providers": {
        "path": "pkg/providers",
        "purpose": "Responsible for providing interfaces and functionalities to interact with various blockchain services for retrieving token balances, transactions, and NFT collections.",
        "languages": {
          "Go": 10
        },
        "key_modules": [
          "ankr.go",
          "covalent.go",
          "moralis.go",
          "getblock.go",
          "skynet.go",
          "skynetv2.go",
          "provider.go",
          "svc.go",
          "config.go",
          "const.go"
        ],
        "dependencies": [
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient/rpc",
          "github.com/mitchellh/mapstructure",
          "github.com/getsentry/sentry-go",
          "github.com/labstack/echo/v4",
          "github.com/redis/go-redis/v9",
          "github.com/samber/lo",
          "golang.org/x/exp/maps",
          "golang.org/x/exp/slices"
        ],
        "architecture": "The folder follows a modular architecture pattern, where each file represents a specific provider or service interacting with blockchain APIs, encapsulating related functionalities and configurations.",
        "file_summaries": {
          "pkg/providers/ankr.go": {
            "language": "Go",
            "purpose": "Provides an interface for interacting with the Ankr service to retrieve token balances and other blockchain-related data.",
            "key_types": [
              "AnkrProvider",
              "ProviderConfig",
              "ChainConfig",
              "GetTokenBalancesReq",
              "GetTokenBalancesRes",
              "GetTransactionsReq",
              "GetNFTCollectionsReq",
              "GetNFTItemsReq",
              "GetNFTItemReq",
              "GetTxnByHashReq",
              "GetGasSuggestionReq",
              "GetGasSuggestionRes",
              "NFTItem",
              "Transaction"
            ],
            "functions": [
              "GetID",
              "GetTokenBalances",
              "GetTransactions",
              "GetNFTCollections",
              "GetNFTItems",
              "GetNFTItem",
              "GetTransactionByHash",
              "GetGasSuggestion",
              "SendRPC",
              "NewAnkrProvider"
            ],
            "imports": [
              "context",
              "errors",
              "io",
              "net/http",
              "slices",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/ankr",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "side_effects": [
              "Logs errors when service calls fail"
            ],
            "risks": [
              "Potential for logging sensitive information in error messages"
            ],
            "complexity": "medium"
          },
          "pkg/providers/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for providers, including client constraints and chain configurations.",
            "key_types": [
              "ProviderConfig",
              "ClientConstraint",
              "ClientConstraints",
              "ChainConfig",
              "CacheConfig"
            ],
            "functions": [
              "mustNewClientConstraints",
              "EnabledOn"
            ],
            "imports": [
              "strings",
              "time",
              "github.com/Masterminds/semver",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient/rpc",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
            ],
            "side_effects": [
              "Panic on error in mustNewClientConstraints"
            ],
            "complexity": "medium"
          },
          "pkg/providers/config_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the ClientConstraints functionality, specifically testing the EnabledOn method.",
            "key_types": [
              "ClientConstraints",
              "helper.UserAgent"
            ],
            "functions": [
              "TestClientConstraint_EnabledOn"
            ],
            "imports": [
              "testing",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
            ],
            "complexity": "medium"
          },
          "pkg/providers/const.go": {
            "language": "Go",
            "purpose": "Defines a set of constant error codes for use in the application.",
            "key_types": [
              "const"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/providers/covalent.go": {
            "language": "Go",
            "purpose": "Provides functionality to interact with the Covalent API for retrieving token balances, transactions, and NFT collections.",
            "key_types": [
              "CovalentProvider",
              "ProviderConfig",
              "ChainConfig",
              "GetTokenBalancesReq",
              "GetTokenBalancesRes",
              "GetTransactionsReq",
              "GetTransactionsRes",
              "GetNFTCollectionsReq",
              "GetNFTItemsReq",
              "GetNFTItemReq",
              "GetTxnByHashReq",
              "GetGasSuggestionReq",
              "GetGasSuggestionRes"
            ],
            "functions": [
              "GetID",
              "GetTokenBalances",
              "GetTransactions",
              "GetNFTCollections",
              "GetNFTItems",
              "GetNFTItem",
              "GetTransactionByHash",
              "GetGasSuggestion",
              "SendRPC",
              "NewCovalentProvider"
            ],
            "imports": [
              "context",
              "errors",
              "io",
              "slices",
              "strconv",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/covalent",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "side_effects": [
              "Logs fatal errors when parsing provider configuration."
            ],
            "risks": [
              "Potential for unhandled errors when interacting with external services.",
              "Panic calls in unimplemented methods may lead to application crashes."
            ],
            "complexity": "medium"
          },
          "pkg/providers/getblock.go": {
            "language": "Go",
            "purpose": "Provides methods to interact with blockchain data, including token balances and transactions, but currently returns errors for most methods indicating they are not supported.",
            "key_types": [
              "GetBlockProvider",
              "ProviderConfig",
              "getblock.Service",
              "md.GetTokenBalancesReq",
              "md.GetTransactionsReq",
              "md.GetNFTCollectionsReq",
              "md.GetNFTItemsReq",
              "md.GetNFTItemReq",
              "md.GetTxnByHashReq",
              "md.GetGasSuggestionReq",
              "md.GetGasSuggestionRes",
              "md.Transaction",
              "md.NFTItem"
            ],
            "functions": [
              "GetID",
              "GetTokenBalances",
              "GetTransactions",
              "GetNFTCollections",
              "GetNFTItems",
              "GetNFTItem",
              "GetTransactionByHash",
              "GetGasSuggestion",
              "SendRPC",
              "NewGetBlockProvider"
            ],
            "imports": [
              "context",
              "io",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/getblock",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "side_effects": [
              "Logs fatal error if configuration parsing fails"
            ],
            "risks": [
              "Potential for unhandled errors in methods returning nil values"
            ],
            "complexity": "medium"
          },
          "pkg/providers/moralis.go": {
            "language": "Go",
            "purpose": "Provides functionality to interact with the Moralis API for retrieving token balances, transactions, NFT collections, and items.",
            "key_types": [
              "MoralisProvider",
              "ProviderConfig",
              "ChainConfig",
              "GetTokenBalancesReq",
              "GetTokenBalancesRes",
              "GetTransactionsReq",
              "GetTransactionsRes",
              "GetNFTCollectionsReq",
              "GetNFTItemsReq",
              "GetNFTItemReq",
              "GetTxnByHashReq",
              "Transaction",
              "NFTItem"
            ],
            "functions": [
              "GetID",
              "GetTokenBalances",
              "GetTransactions",
              "GetNFTCollections",
              "GetNFTItems",
              "GetNFTItem",
              "GetTransactionByHash",
              "GetGasSuggestion",
              "SendRPC",
              "NewMoralisProvider"
            ],
            "imports": [
              "context",
              "errors",
              "io",
              "net/http",
              "slices",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/ethereum/go-ethereum/common",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/moralis",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "side_effects": [
              "Logs errors when API calls fail",
              "May modify the state of the MoralisProvider instance"
            ],
            "risks": [
              "Potential exposure of sensitive data in logs",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          },
          "pkg/providers/provider.go": {
            "language": "Go",
            "purpose": "Defines a Provider interface for handling token balances, transactions, and NFT collections, along with a function to parse provider configuration.",
            "key_types": [
              "Provider",
              "GetTokenBalancesReq",
              "GetTokenBalancesRes",
              "GetTransactionsReq",
              "GetTransactionsRes",
              "GetNFTCollectionsReq",
              "GetNFTItemsReq",
              "GetNFTItemReq",
              "GetTxnByHashReq",
              "GetGasSuggestionReq",
              "GetGasSuggestionRes",
              "NFTItem",
              "Transaction"
            ],
            "functions": [
              "GetID",
              "GetTokenBalances",
              "GetTransactions",
              "GetNFTCollections",
              "GetNFTItems",
              "GetNFTItem",
              "GetTransactionByHash",
              "GetGasSuggestion",
              "SendRPC",
              "parseProviderConfig"
            ],
            "imports": [
              "context",
              "io",
              "github.com/mitchellh/mapstructure",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
            ],
            "complexity": "medium"
          },
          "pkg/providers/skynet.go": {
            "language": "Go",
            "purpose": "Provides functionalities for interacting with the Skynet service, including fetching token balances, transactions, NFT collections, and items.",
            "key_types": [
              "SkynetProvider",
              "ProviderConfig",
              "GetTokenBalancesReq",
              "GetTokenBalancesRes",
              "GetTransactionsReq",
              "GetTransactionsRes",
              "GetNFTCollectionsReq",
              "GetNFTItemsReq",
              "GetNFTItemReq",
              "Transaction"
            ],
            "functions": [
              "GetID",
              "GetTokenBalances",
              "GetTransactions",
              "GetNFTCollections",
              "GetNFTItems",
              "GetNFTItem",
              "GetTransactionByHash",
              "GetGasSuggestion"
            ],
            "imports": [
              "context",
              "errors",
              "io",
              "net/http",
              "slices",
              "strings",
              "github.com/ethereum/go-ethereum/common",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/appaxie",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/skynet",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "side_effects": [
              "Logs errors when operations fail",
              "May modify the state of external services through API calls"
            ],
            "risks": [
              "Potential exposure of sensitive information in logs",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          },
          "pkg/providers/skynetv2.go": {
            "language": "Go",
            "purpose": "Provides functionalities to interact with the Skynet V2 service, including fetching token balances, transactions, NFT collections, and items.",
            "key_types": [
              "SkynetV2Provider",
              "ProviderConfig",
              "GetTokenBalancesReq",
              "GetTokenBalancesRes",
              "GetTransactionsReq",
              "GetTransactionsRes",
              "GetNFTCollectionsReq",
              "GetNFTItemsReq",
              "GetNFIItemsRes",
              "GetNFTItemReq",
              "Transaction",
              "GetGasSuggestionReq",
              "GetGasSuggestionRes"
            ],
            "functions": [
              "GetID",
              "GetTokenBalances",
              "GetTransactions",
              "GetNFTCollections",
              "GetNFTItems",
              "GetNFTItem",
              "GetTransactionByHash",
              "GetGasSuggestion",
              "SendRPC",
              "NewSkynetV2Provider"
            ],
            "imports": [
              "context",
              "errors",
              "io",
              "net/http",
              "slices",
              "github.com/ethereum/go-ethereum/common",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/skynetv2",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "side_effects": [
              "Logs errors when operations fail",
              "May terminate the application on configuration errors"
            ],
            "risks": [
              "Potential exposure of sensitive information in logs",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          },
          "pkg/providers/svc.go": {
            "language": "Go",
            "purpose": "This file defines a service for managing token balances, transactions, and NFT collections in a blockchain context.",
            "key_types": [
              "Service",
              "service",
              "ChainConfig",
              "ProviderConfig",
              "CacheConfig",
              "TokenPrices",
              "TokenInfo"
            ],
            "functions": [
              "GetSupportedChains",
              "GetTokenBalances",
              "GetTransactions",
              "GetTransactionByHash",
              "GetNFTCollections",
              "GetNFTItems",
              "GetNFTItem",
              "GetGasSuggestion",
              "SendRPC",
              "GetTokenInfo",
              "GetPriceChart"
            ],
            "imports": [
              "cmp",
              "context",
              "encoding/json",
              "fmt",
              "io",
              "math/big",
              "math/rand",
              "net/http",
              "strconv",
              "strings",
              "sync",
              "time",
              "github.com/getsentry/sentry-go",
              "github.com/labstack/echo/v4",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "github.com/samber/lo",
              "golang.org/x/exp/maps",
              "golang.org/x/exp/slices",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-proxy/middleware",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/exchangerate",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/tokeninfo",
              "github.com/axieinfinity/ronin-wallet-proxy/repositories"
            ],
            "side_effects": [
              "Caching token balances and transactions",
              "Logging errors and warnings"
            ],
            "risks": [
              "Potential exposure of sensitive data in logs",
              "Caching may lead to stale data if not managed properly"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/providers/ankr": {
        "path": "pkg/providers/ankr",
        "purpose": "Provides services and data structures for interacting with the Ankr blockchain provider, specifically for retrieving account balances.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "ankr_svc.go",
          "config.go",
          "models.go"
        ],
        "dependencies": [
          "github.com/ethereum/go-ethereum/common",
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
          "github.com/axieinfinity/ronin-wallet-proxy/models"
        ],
        "architecture": "The folder follows a service-oriented architecture, encapsulating service logic, configuration, and data models related to the Ankr provider.",
        "file_summaries": {
          "pkg/providers/ankr/ankr_svc.go": {
            "language": "Go",
            "purpose": "Provides a service to get account balance for a specified wallet address on a blockchain.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "GetAccountBalanceResponse",
              "RPCRequest",
              "GetAccountBalanceParams"
            ],
            "functions": [
              "GetAccountBalance",
              "getAPIKey",
              "buildRequestEndpoint",
              "NewService"
            ],
            "imports": [
              "context",
              "fmt",
              "math/rand",
              "net/http",
              "time",
              "github.com/ethereum/go-ethereum/common",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient"
            ],
            "risks": [
              "Potential exposure of API keys if not handled securely."
            ],
            "complexity": "medium"
          },
          "pkg/providers/ankr/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for the Ankr provider.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/providers/ankr/models.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling RPC requests and responses related to account balances in a blockchain context.",
            "key_types": [
              "RPCRequest",
              "SyncStatus",
              "RPCResponse",
              "GetAccountBalanceParams",
              "AccountBalanceItem",
              "GetAccountBalanceResult",
              "GetAccountBalanceResponse"
            ],
            "functions": [
              "ToTokenBalance"
            ],
            "imports": [
              "strings",
              "github.com/ethereum/go-ethereum/common",
              "github.com/axieinfinity/ronin-wallet-proxy/models"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/providers/covalent": {
        "path": "pkg/providers/covalent",
        "purpose": "Responsible for providing services and data models to interact with the Covalent API for blockchain data, including token balances, transactions, and NFTs.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "config.go",
          "cvl_svc.go",
          "models.go"
        ],
        "dependencies": [
          "github.com/ethereum/go-ethereum/common",
          "github.com/labstack/echo/v4",
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
          "github.com/axieinfinity/ronin-wallet-proxy/models"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating configuration, service logic, and data models for interacting with an external API.",
        "file_summaries": {
          "pkg/providers/covalent/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for interacting with the Covalent API.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/providers/covalent/cvl_svc.go": {
            "language": "Go",
            "purpose": "Provides a service for interacting with blockchain data, including token balances, transactions, and NFTs.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "GetTokenBalancesForAddrResponse",
              "GetERC20TransferForAddrResponse",
              "GetRecentTransactionsForAddrResponse",
              "GetPaginatedTransactionsForAddrResponse",
              "GetTransactionResponse",
              "GetNFTsForAddrResponse",
              "GetNFTMetadataForTokenIDResponse"
            ],
            "functions": [
              "GetTokenBalancesForAddr",
              "GetERC20TransferForAddr",
              "GetRecentTransactionsForAddr",
              "GetPaginatedTransactionsForAddr",
              "GetTransactionByHash",
              "GetNFTsForAddr",
              "GetNFTMetadataForToken",
              "buildHeaders",
              "NewService"
            ],
            "imports": [
              "context",
              "encoding/base64",
              "fmt",
              "math/rand",
              "net/http",
              "net/url",
              "strconv",
              "time",
              "github.com/ethereum/go-ethereum/common",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
              "github.com/axieinfinity/ronin-wallet-proxy/models"
            ],
            "side_effects": [
              "Makes HTTP requests to external services",
              "Generates random numbers for API key selection"
            ],
            "risks": [
              "Potential exposure of API keys if not handled securely",
              "Reliance on external services may lead to failures if those services are down"
            ],
            "complexity": "medium"
          },
          "pkg/providers/covalent/models.go": {
            "language": "Go",
            "purpose": "Defines data models for handling token balances and transactions in a blockchain context.",
            "key_types": [
              "Pagination",
              "TokenBalanceItem",
              "GetTokenBalancesForAddrResponse",
              "GetRecentTransactionsForAddrResponse",
              "PagingLinks",
              "GetPaginatedTransactionsForAddrResponse",
              "TransferDetail",
              "ERC20TransferItem",
              "GetERC20TransferForAddrResponse",
              "NFTCollection"
            ],
            "functions": [
              "ToTokenBalance",
              "ToGetTokenBalancesResponse",
              "ToTransaction"
            ],
            "imports": [
              "fmt",
              "slices",
              "strconv",
              "time",
              "github.com/ethereum/go-ethereum/common",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/providers/gas-collector": {
        "path": "pkg/providers/gas-collector",
        "purpose": "Responsible for collecting and suggesting gas fees for Ethereum transactions based on EIP-1559 and legacy methods.",
        "languages": {
          "Go": 6
        },
        "key_modules": [
          "config.go",
          "eip_1559_gas_collector.go",
          "func.go",
          "gas_collector.go",
          "legacy_gas_collector.go",
          "models.go"
        ],
        "dependencies": [
          "github.com/ethereum/go-ethereum/ethclient",
          "github.com/ethereum/go-ethereum/rpc",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
        ],
        "architecture": "The folder follows a modular architecture pattern, with separate files handling configuration, data structures, and different gas collection strategies.",
        "file_summaries": {
          "pkg/providers/gas-collector/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for a gas collector",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/providers/gas-collector/eip_1559_gas_collector.go": {
            "language": "Go",
            "purpose": "This file implements a gas collector for Ethereum's EIP-1559 fee structure, providing gas fee suggestions based on historical data.",
            "key_types": [
              "EIP1559GasCollector",
              "Config",
              "GetGasSuggestionRes",
              "EIP1559GasSuggestion"
            ],
            "functions": [
              "GetGasSuggestion",
              "newEIP1559GasCollector"
            ],
            "imports": [
              "context",
              "math/big",
              "net/http",
              "github.com/ethereum/go-ethereum/ethclient",
              "github.com/ethereum/go-ethereum/rpc",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "side_effects": [
              "Establishes a connection to an Ethereum client if not provided."
            ],
            "risks": [
              "Potential for denial of service if the RPC endpoint is unresponsive.",
              "Logging sensitive configuration details if an error occurs."
            ],
            "complexity": "medium"
          },
          "pkg/providers/gas-collector/func.go": {
            "language": "Go",
            "purpose": "This file implements functions to collect and calculate gas fees for Ethereum transactions using EIP-1559.",
            "key_types": [
              "AvgBlock",
              "EIP1559GasCollector",
              "ethereum.FeeHistory"
            ],
            "functions": [
              "safeDivCeil",
              "getFeeHistory",
              "getExactBaseFee",
              "emptyFeeHistory",
              "safeMulFloatCeil",
              "avgBaseFee",
              "avgMinerTip",
              "avgGasUsedRatio"
            ],
            "imports": [
              "context",
              "errors",
              "fmt",
              "math/big",
              "github.com/ethereum/go-ethereum",
              "github.com/ethereum/go-ethereum/rpc"
            ],
            "risks": [
              "Potential division by zero in safeDivCeil function"
            ],
            "complexity": "medium"
          },
          "pkg/providers/gas-collector/gas_collector.go": {
            "language": "Go",
            "purpose": "This file defines a GasCollector interface and a function to create a new GasCollector based on configuration.",
            "key_types": [
              "GasCollector",
              "Config"
            ],
            "functions": [
              "NewGasCollector"
            ],
            "imports": [
              "context",
              "strings",
              "github.com/ethereum/go-ethereum/ethclient",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "complexity": "medium"
          },
          "pkg/providers/gas-collector/legacy_gas_collector.go": {
            "language": "Go",
            "purpose": "This file implements a legacy gas collector that suggests gas prices for Ethereum transactions.",
            "key_types": [
              "LegacyGasCollector",
              "Config",
              "GetGasSuggestionRes",
              "LegacyGasSuggestion"
            ],
            "functions": [
              "roundToNearestTenMillion",
              "GetGasSuggestion",
              "newLegacyGasCollector"
            ],
            "imports": [
              "context",
              "fmt",
              "math/big",
              "net/http",
              "github.com/ethereum/go-ethereum/ethclient",
              "github.com/ethereum/go-ethereum/rpc",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "side_effects": [
              "Establishes a connection to an Ethereum client",
              "Logs fatal errors if configuration parsing fails"
            ],
            "risks": [
              "Potential for denial of service if the RPC endpoint is unresponsive",
              "Logging sensitive configuration details could expose them"
            ],
            "complexity": "medium"
          },
          "pkg/providers/gas-collector/models.go": {
            "language": "Go",
            "purpose": "Defines data structures for handling gas fee history in Ethereum transactions.",
            "key_types": [
              "GetFeesHistoryResponse",
              "Block",
              "big.Int"
            ],
            "functions": [],
            "imports": [
              "math/big"
            ],
            "complexity": "low"
          }
        }
      },
      "pkg/providers/getblock": {
        "path": "pkg/providers/getblock",
        "purpose": "This module is responsible for interacting with blockchain RPC endpoints to manage Ethereum fee history and suggest gas fees.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "config.go",
          "func.go",
          "getblock_svc.go",
          "models.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/gas-collector",
          "github.com/ethereum/go-ethereum",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/share",
          "github.com/ethereum/go-ethereum/ethclient",
          "github.com/ethereum/go-ethereum/rpc",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, providing a clear separation of concerns with configuration, service logic, and data models.",
        "file_summaries": {
          "pkg/providers/getblock/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for the GetBlock provider.",
            "key_types": [
              "Config",
              "map[string]string",
              "time.Duration",
              "uint64",
              "[]float64"
            ],
            "functions": [],
            "imports": [
              "time",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/gas-collector"
            ],
            "complexity": "low"
          },
          "pkg/providers/getblock/func.go": {
            "language": "Go",
            "purpose": "This file provides functions to format Ethereum fee history and calculate gas suggestions based on that history.",
            "key_types": [
              "BlockGasFeeHistory",
              "GasSuggestion"
            ],
            "functions": [
              "formatFeeHistory",
              "calculateGasSuggestion"
            ],
            "imports": [
              "math/big",
              "github.com/ethereum/go-ethereum",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "complexity": "medium"
          },
          "pkg/providers/getblock/getblock_svc.go": {
            "language": "Go",
            "purpose": "Provides a service for interacting with blockchain RPC endpoints to send requests and suggest gas fees.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "md.GetGasSuggestionRes",
              "md.LegacyGasSuggestion",
              "Block"
            ],
            "functions": [
              "SendRPC",
              "GasFeeSuggestion",
              "NewService"
            ],
            "imports": [
              "bytes",
              "context",
              "errors",
              "fmt",
              "io",
              "math/big",
              "net/http",
              "github.com/ethereum/go-ethereum/ethclient",
              "github.com/ethereum/go-ethereum/rpc",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "side_effects": [
              "Logs errors if RPC requests fail",
              "Creates HTTP clients with specified timeouts"
            ],
            "risks": [
              "Potential for context cancellation leading to unhandled errors",
              "Improper handling of blockchain endpoints may lead to unsupported operations"
            ],
            "complexity": "medium"
          },
          "pkg/providers/getblock/models.go": {
            "language": "Go",
            "purpose": "Defines data structures for handling fee history in Ethereum transactions.",
            "key_types": [
              "GetFeesHistoryResponse",
              "BlockGasFeeHistory",
              "Block"
            ],
            "functions": [],
            "imports": [
              "math/big"
            ],
            "complexity": "low"
          }
        }
      },
      "pkg/providers/moralis": {
        "path": "pkg/providers/moralis",
        "purpose": "This folder/module is responsible for providing an interface to interact with the Moralis API for retrieving blockchain data such as token balances, NFT collections, and transaction details.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "config.go",
          "models.go",
          "mrl_svc.go"
        ],
        "dependencies": [
          "github.com/ethereum/go-ethereum/common",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/labstack/echo/v4",
          "github.com/mroth/weightedrand/v2",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating configuration, data models, and service logic for interacting with the Moralis API.",
        "file_summaries": {
          "pkg/providers/moralis/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for interacting with the Moralis API.",
            "key_types": [
              "Config",
              "APIKeyShare"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/providers/moralis/models.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling token balances, NFT collections, and transactions in a blockchain context.",
            "key_types": [
              "GetNativeTokenBalanceResponse",
              "Erc20TokenBalance",
              "GetErc20TokenBalancesResponse",
              "NFTCollectionInfo",
              "GetNFTCollectionsForAddrResponse",
              "NormalizedMetadata",
              "NFTItemInfo",
              "GetNFTsOfCollectionForAddrResponse",
              "EventParam",
              "DecodedEvent",
              "Log",
              "InternalTransaction",
              "Transaction"
            ],
            "functions": [
              "ToTokenBalance",
              "ToNFTItem",
              "ToDataField",
              "ToTransaction"
            ],
            "imports": [
              "fmt",
              "strconv",
              "strings",
              "time",
              "github.com/ethereum/go-ethereum/common",
              "github.com/axieinfinity/ronin-wallet-proxy/models"
            ],
            "complexity": "medium"
          },
          "pkg/providers/moralis/mrl_svc.go": {
            "language": "Go",
            "purpose": "This file defines a service for interacting with the Moralis API to retrieve blockchain data such as token balances, NFT collections, and transaction details.",
            "key_types": [
              "Service",
              "service",
              "Config",
              "GetNativeTokenBalanceResponse",
              "GetErc20TokenBalanceWithPriceResponse",
              "GetNFTCollectionsForAddrResponse",
              "GetNFTsOfCollectionForAddrResponse",
              "NFTItemInfo",
              "GetTransactionsForAddrResponse",
              "Transaction"
            ],
            "functions": [
              "GetNativeTokenBalance",
              "GetErc20TokenBalances",
              "GetNFTCollectionsForAddr",
              "GetNFTsOfCollectionForAddr",
              "GetNFTMetadataForToken",
              "GetTransactionsForAddr",
              "GetTransactionByHash"
            ],
            "imports": [
              "context",
              "errors",
              "fmt",
              "math/rand",
              "net/http",
              "net/url",
              "slices",
              "strconv",
              "strings",
              "time",
              "github.com/ethereum/go-ethereum/common",
              "github.com/labstack/echo/v4",
              "github.com/mroth/weightedrand/v2",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
            ],
            "side_effects": [
              "Logs errors when API calls fail"
            ],
            "risks": [
              "Potential exposure of sensitive data through API endpoints",
              "Handling of unverified contracts may lead to security vulnerabilities"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/providers/skynet": {
        "path": "pkg/providers/skynet",
        "purpose": "This folder/module is responsible for providing functionalities related to token balances and NFT collections on the Ethereum blockchain.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "config.go",
          "func.go",
          "models.go",
          "skn_svc.go",
          "types.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-proxy",
          "github.com/ethereum/go-ethereum",
          "github.com/rs/zerolog/log",
          "github.com/orcaman/concurrent-map/v2"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing related functionalities into separate files while maintaining a cohesive structure for handling blockchain interactions.",
        "file_summaries": {
          "pkg/providers/skynet/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for the Skynet provider with various API endpoints and settings.",
            "key_types": [
              "Config",
              "time.Duration",
              "appaxie.Config"
            ],
            "functions": [],
            "imports": [
              "time",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/appaxie"
            ],
            "complexity": "low"
          },
          "pkg/providers/skynet/func.go": {
            "language": "Go",
            "purpose": "This file provides functions to convert JSON keys from camelCase to snake_case and to handle JSON objects and arrays.",
            "key_types": [
              "json.RawMessage",
              "map[string]json.RawMessage",
              "[]json.RawMessage"
            ],
            "functions": [
              "convertKeys",
              "convertKeysForObject",
              "convertKeysForArray",
              "fixKey"
            ],
            "imports": [
              "encoding/json",
              "strings"
            ],
            "complexity": "medium"
          },
          "pkg/providers/skynet/models.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling token balances and NFT items in a blockchain context.",
            "key_types": [
              "PagingRequest",
              "PagingResponse",
              "PagingResponseListItems",
              "SortItem",
              "ErrorMessage",
              "SearchTokenBalancesSummaryForAddrRequest",
              "TokenBalance",
              "TokenBalancesResponse",
              "NFTItemResponse",
              "SearchNFTsRequest",
              "SearchNFTsResponse",
              "AddressRequest",
              "BlockRequest",
              "TimeRequest",
              "SearchTokenTransferSearchRequest",
              "TokenTransferItem",
              "SearchTokenTransferResponse",
              "SearchTransactionsRequest",
              "LogResponse"
            ],
            "functions": [
              "GetTotal",
              "Error",
              "ToTokenBalance",
              "ToNFTItem",
              "ToNFTItemWithoutOwner",
              "ToTransaction"
            ],
            "imports": [
              "encoding/json",
              "fmt",
              "math/big",
              "strconv",
              "strings",
              "time",
              "github.com/ethereum/go-ethereum/common",
              "github.com/ethereum/go-ethereum/common/hexutil",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/models/skymavis",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
            ],
            "complexity": "medium"
          },
          "pkg/providers/skynet/skn_svc.go": {
            "language": "Go",
            "purpose": "This file defines a service for interacting with token balances and NFT collections on the Ethereum blockchain.",
            "key_types": [
              "Service",
              "service",
              "TokenBalancesResponse",
              "PagingRequest",
              "GetAccountInfoResponse"
            ],
            "functions": [
              "SearchTokenBalancesSummaryForAddr",
              "SearchTokenBalancesForAddr",
              "SearchNFTItemBalanceOfCollectionForAddr",
              "SearchNFTsOfCollectionForAddr",
              "SearchNFTByTokenID",
              "SearchNFTsByIDs",
              "SearchTransactions",
              "SearchTokenTransfer",
              "GetTransactionByHash",
              "GetRonTransactions",
              "GetGasSuggestion",
              "GetTokenStandard",
              "SearchActivities",
              "SearchActivitiesV2",
              "SearchTokenBalanceOfERC1155CollectionForAddr",
              "getKnownContracts",
              "getTokenBalanceForHome",
              "searchTokenBalancesSummaryForAddrV2"
            ],
            "imports": [
              "context",
              "encoding/json",
              "errors",
              "fmt",
              "math/big",
              "net/http",
              "slices",
              "sort",
              "strconv",
              "strings",
              "sync",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/ethereum/go-ethereum/common",
              "github.com/ethereum/go-ethereum/common/hexutil",
              "github.com/ethereum/go-ethereum/ethclient",
              "github.com/ethereum/go-ethereum/rpc",
              "github.com/orcaman/concurrent-map/v2",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient/rpc",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/models/skymavis",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "complexity": "medium"
          },
          "pkg/providers/skynet/types.go": {
            "language": "Go",
            "purpose": "Defines types and constants related to token standards, transfer types, and activities in a blockchain context.",
            "key_types": [
              "PagingStyle",
              "TokenStandard",
              "TransferType",
              "ActivityType",
              "ActionType",
              "TxStatus"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "pkg/providers/skynetv2": {
        "path": "pkg/providers/skynetv2",
        "purpose": "Responsible for providing functionalities to interact with a blockchain wallet, including retrieving token balances, NFT collections, and transaction details.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "config.go",
          "models.go",
          "skn_v2_svc.go",
          "types.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/gas-collector",
          "github.com/ethereum/go-ethereum/common",
          "github.com/ethereum/go-ethereum/ethclient",
          "github.com/ethereum/go-ethereum/rpc",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/models/skymavis",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/share",
          "github.com/axieinfinity/ecosystem-go-common/errors"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing related functionalities into separate files for configuration, models, services, and types.",
        "file_summaries": {
          "pkg/providers/skynetv2/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for the Skynet V2 provider.",
            "key_types": [
              "Config",
              "time.Duration",
              "gascollector.Config"
            ],
            "functions": [],
            "imports": [
              "time",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/gas-collector"
            ],
            "complexity": "low"
          },
          "pkg/providers/skynetv2/models.go": {
            "language": "Go",
            "purpose": "Defines data models and request/response structures for interacting with a blockchain API.",
            "key_types": [
              "PagingReq",
              "PagingResponse",
              "PagingResListItems",
              "SortItem",
              "ErrorMessage",
              "AddressRequest",
              "BlockRequest",
              "TimeRequest",
              "TokenBalance",
              "TokenBalancesRes",
              "TransactionItem",
              "LogResponse",
              "NFTItemResponse",
              "SearchNFTsReq",
              "SearchNFTsRes",
              "SearchTokenTransfersReq",
              "TokenTransferItem"
            ],
            "functions": [
              "BuildQueryParams",
              "GetTotal",
              "Error",
              "ToTokenBalance",
              "ToTransaction",
              "ToNFTItem"
            ],
            "imports": [
              "encoding/json",
              "math/big",
              "net/url",
              "strconv",
              "strings",
              "time",
              "github.com/ethereum/go-ethereum/common",
              "github.com/ethereum/go-ethereum/common/hexutil",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/models/skymavis",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
            ],
            "complexity": "medium"
          },
          "pkg/providers/skynetv2/skn_v2_svc.go": {
            "language": "Go",
            "purpose": "This file defines a service for interacting with a blockchain wallet, providing functionalities to retrieve token balances, NFT collections, and transaction details.",
            "key_types": [
              "Service",
              "service",
              "TokenBalancesRes",
              "PagingReq",
              "TransactionItem",
              "SearchNFTsRes",
              "GetNFTByCollectionAndTokenIDRes"
            ],
            "functions": [
              "GetTokenBalances",
              "GetNFTCollections",
              "GetTransactionByHash",
              "GetNFTsOfCollectionForAddr",
              "GetNFTByCollectionAndTokenID"
            ],
            "imports": [
              "context",
              "errors",
              "fmt",
              "math/big",
              "net/http",
              "net/url",
              "slices",
              "strconv",
              "strings",
              "sync",
              "time",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/ethereum/go-ethereum/common",
              "github.com/ethereum/go-ethereum/ethclient",
              "github.com/ethereum/go-ethereum/rpc",
              "github.com/rs/zerolog/log",
              "golang.org/x/exp/maps",
              "github.com/axieinfinity/ronin-wallet-proxy/httpclient",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/models/skymavis",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/gas-collector",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "complexity": "medium"
          },
          "pkg/providers/skynetv2/types.go": {
            "language": "Go",
            "purpose": "Defines types and constants related to token standards, transfer types, activity types, action types, and transaction statuses.",
            "key_types": [
              "PagingStyle",
              "TokenStandard",
              "TransferType",
              "ActivityType",
              "ActionType",
              "TxStatus"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "pkg/redis": {
        "path": "pkg/redis",
        "purpose": "This folder/module is responsible for defining a Redis client configuration and providing functionality to create and connect to a Redis client.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "redis.go"
        ],
        "dependencies": [
          "github.com/prometheus/client_golang/prometheus",
          "github.com/redis/go-redis/extra/redisprometheus/v9",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating Redis client functionality within a single Go file, promoting separation of concerns and reusability.",
        "file_summaries": {
          "pkg/redis/redis.go": {
            "language": "Go",
            "purpose": "This file defines a Redis client configuration and provides a function to create and connect to a Redis client.",
            "key_types": [
              "Redis"
            ],
            "functions": [
              "NewRedisClient"
            ],
            "imports": [
              "context",
              "crypto/tls",
              "crypto/x509",
              "fmt",
              "os",
              "time",
              "github.com/prometheus/client_golang/prometheus",
              "github.com/redis/go-redis/extra/redisprometheus/v9",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log"
            ],
            "side_effects": [
              "Logs connection attempts and errors to Redis server",
              "Reads certificate file from the filesystem if TLS is configured"
            ],
            "risks": [
              "Potential exposure of sensitive information if logs are not handled properly",
              "Insecure TLS configuration if InsecureSkipVerify is set to true"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/roninabi": {
        "path": "pkg/roninabi",
        "purpose": "Responsible for defining and managing Ethereum contract ABIs and related methods for token swaps and liquidity management.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "abi.go",
          "katana_method.go"
        ],
        "dependencies": [
          "github.com/ethereum/go-ethereum/accounts/abi"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating functionality related to Ethereum contract ABIs and token management in separate Go files.",
        "file_summaries": {
          "pkg/roninabi/abi.go": {
            "language": "Go",
            "purpose": "Defines constants and embeds ABI JSON files for various Ethereum contracts, and initializes a map of contract names to their ABIs.",
            "key_types": [
              "string",
              "map[string]string",
              "map[string]*abi.ABI"
            ],
            "functions": [
              "parseABI",
              "init"
            ],
            "imports": [
              "embed",
              "strings",
              "github.com/ethereum/go-ethereum/accounts/abi"
            ],
            "side_effects": [
              "Panic on error during ABI parsing"
            ],
            "risks": [
              "Potential panic if ABI JSON is malformed"
            ],
            "complexity": "medium"
          },
          "pkg/roninabi/katana_method.go": {
            "language": "Go",
            "purpose": "Defines constants for various Katana methods related to token swaps and liquidity management.",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          }
        }
      },
      "pkg/roninabi/abi": {
        "path": "pkg/roninabi/abi",
        "purpose": "This folder contains the ABI (Application Binary Interface) definitions and smart contract implementations for various components of the Ronin blockchain ecosystem, including staking pools, token standards, and auction management.",
        "languages": {
          "JSON": 10,
          "Solidity": 22
        },
        "key_modules": [
          "AXSStakingPool.json",
          "AtiaBlessing.json",
          "Axie.json",
          "AxieAccessoryCollection.json",
          "AxieCharm.json",
          "AxieRune.json",
          "ClockAution.json",
          "ERC1155.json",
          "ERC20.json",
          "ERC20StakingPool.json",
          "ERC721.json",
          "Exchange.json",
          "KatanaRouter.json",
          "LandDelegation.json",
          "LandItem.json",
          "LandPlot.json",
          "LandStakingPool.json",
          "MarketGateway.json",
          "OrderExchange.json",
          "Portal.json",
          "RONStaking.json",
          "RewardDispender.json",
          "RoninGatewayV2.json",
          "SideChainGateway.json"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture, where each file represents a distinct smart contract or ABI definition, allowing for clear separation of concerns and easier maintenance.",
        "file_summaries": {
          "pkg/roninabi/abi/AXSStakingPool.json": {
            "language": "Solidity",
            "purpose": "Defines events and functions for an AXS Staking Pool contract.",
            "key_types": [
              "event",
              "function"
            ],
            "functions": [
              "admin",
              "changeAdmin",
              "claimPendingRewards",
              "emergencyUnstake",
              "getPendingRewards",
              "getStakingAmount",
              "getStakingTotal",
              "methodPaused",
              "pause",
              "pauseAll",
              "paused",
              "removeAdmin",
              "restakeRewards",
              "stake",
              "unpause",
              "unpauseAll",
              "unstake"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/AtiaBlessing.json": {
            "language": "Solidity",
            "purpose": "Defines a smart contract with various functions and events related to user streaks and role management.",
            "key_types": [
              "constructor",
              "error",
              "event",
              "function"
            ],
            "functions": [
              "activateStreak",
              "getStreak",
              "initialize",
              "grantRole",
              "revokeRole",
              "hasRole",
              "getRoleMember",
              "getRoleMemberCount",
              "getRoleAdmin",
              "hasCurrentlyActivated",
              "activeStreakLifeTime",
              "DEFAULT_ADMIN_ROLE",
              "startedAtBlock",
              "supportsInterface"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/Axie.json": {
            "language": "Solidity",
            "purpose": "Defines events and a constructor for an Axie-related smart contract.",
            "key_types": [
              "constructor",
              "event",
              "tuple",
              "struct"
            ],
            "functions": [],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/AxieAccessoryCollection.json": {
            "language": "JSON",
            "purpose": "Defines the structure of an Axie accessory collection with events and roles.",
            "key_types": [
              "constructor",
              "event",
              "tuple",
              "bytes32"
            ],
            "functions": [
              "DEFAULT_ADMIN_ROLE",
              "MINTER_ROLE"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/AxieCharm.json": {
            "language": "JSON",
            "purpose": "Defines the structure of an Ethereum smart contract ABI for AxieCharm, including events and functions.",
            "key_types": [
              "constructor",
              "event",
              "function"
            ],
            "functions": [
              "DEFAULT_ADMIN_ROLE",
              "MINTER_ROLE",
              "PAUSER_ROLE",
              "balanceOf",
              "balanceOfBatch",
              "burn",
              "burnBatch",
              "getRoleAdmin"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/AxieRune.json": {
            "language": "JSON",
            "purpose": "Defines the structure of an Ethereum smart contract ABI for AxieRune, including events and functions.",
            "key_types": [
              "constructor",
              "event",
              "function"
            ],
            "functions": [
              "DEFAULT_ADMIN_ROLE",
              "MINTER_ROLE",
              "PAUSER_ROLE",
              "balanceOf",
              "balanceOfBatch",
              "burn",
              "burnBatch",
              "getRoleAdmin"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/ClockAution.json": {
            "language": "Solidity",
            "purpose": "Defines events and functions for managing auctions in a smart contract.",
            "key_types": [
              "address",
              "uint256",
              "bytes"
            ],
            "functions": [
              "addOperators",
              "admin",
              "auctions",
              "batchCreateAuctions",
              "cancelAuction",
              "changeAdmin",
              "completeInitilization",
              "createAuction"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/ERC1155.json": {
            "language": "JSON",
            "purpose": "Defines the ERC1155 token standard events and functions for a smart contract.",
            "key_types": [
              "event",
              "function"
            ],
            "functions": [
              "balanceOf",
              "balanceOfBatch",
              "isApprovedForAll",
              "safeBatchTransferFrom",
              "safeTransferFrom",
              "setApprovalForAll",
              "supportsInterface"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/ERC20.json": {
            "language": "Solidity",
            "purpose": "Defines the ERC20 token standard events and functions.",
            "key_types": [
              "event",
              "function"
            ],
            "functions": [
              "allowance",
              "approve",
              "balanceOf",
              "totalSupply",
              "transfer",
              "transferFrom"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/ERC20StakingPool.json": {
            "language": "Solidity",
            "purpose": "Defines events and functions for an ERC20 staking pool contract.",
            "key_types": [
              "address",
              "uint256",
              "IERC20"
            ],
            "functions": [
              "admin",
              "changeAdmin",
              "claimPendingRewards",
              "emergencyUnstake",
              "getPendingRewards",
              "getStakingAmount",
              "getStakingTotal",
              "methodPaused",
              "pause",
              "pauseAll",
              "paused",
              "removeAdmin",
              "restakeRewards",
              "stake",
              "unpause",
              "unpauseAll",
              "unstake",
              "unstakeAll"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/ERC721.json": {
            "language": "JSON",
            "purpose": "Defines the ABI (Application Binary Interface) for an ERC721 token contract, specifying events and functions.",
            "key_types": [
              "event",
              "function"
            ],
            "functions": [
              "approve",
              "balanceOf",
              "getApproved",
              "isApprovedForAll",
              "ownerOf",
              "safeTransferFrom",
              "setApprovalForAll",
              "transferFrom"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/Exchange.json": {
            "language": "JSON",
            "purpose": "Defines the ABI (Application Binary Interface) for the Exchange contract, including its events, functions, and constructor.",
            "key_types": [
              "IERC20",
              "AbstractAuction"
            ],
            "functions": [
              "addAuctionType",
              "changeAdmin",
              "createOrGetListing",
              "getListing",
              "getListingState",
              "removeAdmin",
              "canFacilitateListing",
              "admin",
              "auctionTypes",
              "autoRevalidate",
              "listings"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/KatanaRouter.json": {
            "language": "Solidity",
            "purpose": "Defines a smart contract for managing liquidity in a decentralized exchange.",
            "key_types": [
              "address",
              "uint256"
            ],
            "functions": [
              "constructor",
              "fallback",
              "WRON",
              "addLiquidity",
              "addLiquidityRON",
              "factory",
              "getAmountIn",
              "getAmountOut",
              "getAmountsIn",
              "getAmountsOut",
              "quote",
              "removeLiquidity",
              "removeLiquidityRON"
            ],
            "imports": [],
            "risks": [
              "Potential for reentrancy attacks in payable functions",
              "Incorrect handling of liquidity can lead to loss of funds"
            ],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/LandDelegation.json": {
            "language": "Solidity",
            "purpose": "Defines the structure and errors for land delegation in a smart contract.",
            "key_types": [
              "error",
              "event",
              "function"
            ],
            "functions": [
              "delegateLand",
              "delegateLandBatch",
              "delegationAmountsMap",
              "delegationMap",
              "DEFAULT_ADMIN_ROLE"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/LandItem.json": {
            "language": "Solidity",
            "purpose": "Defines a smart contract for managing land items with functionalities for admin management, approvals, and minting.",
            "key_types": [
              "constructor",
              "event"
            ],
            "functions": [
              "addMinters",
              "changeAdmin",
              "approve",
              "balanceOf",
              "deconstructItemId"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/LandPlot.json": {
            "language": "Solidity",
            "purpose": "Defines a smart contract for managing land plots, including events for admin changes, approvals, and minting.",
            "key_types": [
              "constructor",
              "event",
              "function"
            ],
            "functions": [
              "addMinters",
              "admin",
              "approve",
              "balanceOf",
              "batchMint",
              "changeAdmin",
              "getEstateData",
              "isApprovedForAll",
              "isMinter",
              "landOfOwner"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/LandStakingPool.json": {
            "language": "Solidity",
            "purpose": "Defines the events and functions for a land staking pool contract.",
            "key_types": [
              "constructor",
              "event",
              "function"
            ],
            "functions": [
              "claimPendingRewards",
              "emergencyUnstake",
              "emergencyUnstakeSome",
              "getPendingRewards",
              "getStakedLandTypes",
              "getStakedLands",
              "getStakingAmount",
              "getStakingTotal",
              "getTotalStakedPerLandType",
              "initialize"
            ],
            "imports": [],
            "side_effects": [
              "State changes in the contract's storage when functions are called."
            ],
            "risks": [
              "Potential for reentrancy attacks if not properly handled."
            ],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/MarketGateway.json": {
            "language": "Solidity",
            "purpose": "Defines the ABI for the MarketGateway contract, including events and functions related to market operations.",
            "key_types": [
              "constructor",
              "event",
              "function"
            ],
            "functions": [
              "DEFAULT_ADMIN_ROLE",
              "DOMAIN_SEPARATOR",
              "WRON",
              "getInterface",
              "getReferralConfig",
              "getRoleAdmin",
              "getRoleMember",
              "getRoleMemberCount",
              "grantRole",
              "hasRole"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/OrderExchange.json": {
            "language": "Solidity",
            "purpose": "Defines the ABI for an order exchange contract, including events and functions related to order management.",
            "key_types": [
              "constructor",
              "event",
              "function"
            ],
            "functions": [
              "cancelOrder",
              "getRoleAdmin",
              "getRoleMember",
              "getRoleMemberCount",
              "DEFAULT_ADMIN_ROLE",
              "INTERFACE_NAME",
              "MARKET_OPERATOR"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/Portal.json": {
            "language": "Solidity",
            "purpose": "Defines the structure and events for a smart contract related to a portal system.",
            "key_types": [
              "constructor",
              "event",
              "function",
              "struct MarketAsset.Asset",
              "struct PortalAsset.AssetWithRarity"
            ],
            "functions": [
              "DEFAULT_ADMIN_ROLE",
              "DOMAIN_SEPARATOR",
              "PORTAL_OPERATOR",
              "burnSLP",
              "burnedSLP",
              "calculateWithdrawalFee"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/RONStaking.json": {
            "language": "Solidity",
            "purpose": "Defines the errors and events related to staking functionality in a smart contract.",
            "key_types": [
              "error",
              "event"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/roninabi/abi/RewardDispender.json": {
            "language": "Solidity",
            "purpose": "Defines the ABI for a reward dispenser contract, including events, errors, and functions related to managing reward pools.",
            "key_types": [
              "error",
              "event",
              "function"
            ],
            "functions": [
              "cancelPool",
              "createRewardPool",
              "dispendRewardBatch",
              "getPoolInfo",
              "getPoolRewardList",
              "getPools"
            ],
            "imports": [],
            "complexity": "medium"
          },
          "pkg/roninabi/abi/RoninGatewayV2.json": {
            "language": "Solidity",
            "purpose": "Defines errors and events for the Ronin Gateway contract.",
            "key_types": [
              "error",
              "event"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/roninabi/abi/SideChainGateway.json": {
            "language": "JSON",
            "purpose": "Defines the ABI (Application Binary Interface) for the SideChainGateway contract, including events and functions.",
            "key_types": [
              "event",
              "function"
            ],
            "functions": [
              "acknowledWithdrawalOnMainchain",
              "admin",
              "changeAdmin",
              "deposits",
              "getPendingWithdrawals",
              "getWithdrawalSignatures",
              "getWithdrawalSigners",
              "maxPendingWithdrawal",
              "pause",
              "paused",
              "registry",
              "removeAdmin",
              "requestSignatureAgain"
            ],
            "imports": [],
            "complexity": "medium"
          }
        }
      },
      "pkg/share": {
        "path": "pkg/share",
        "purpose": "This folder/module is responsible for providing shared functionalities and types related to blockchain interactions, including custom data types, constants, and error handling.",
        "languages": {
          "Go": 6
        },
        "key_modules": [
          "big_int.go",
          "big_int_test.go",
          "const_chain.go",
          "const_provider.go",
          "error.go",
          "response.go"
        ],
        "dependencies": [
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/share",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ronin-wallet-proxy/models"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing related functionalities into separate files for better maintainability and testability.",
        "file_summaries": {
          "pkg/share/big_int.go": {
            "language": "Go",
            "purpose": "Defines a custom big integer type with JSON marshaling and unmarshaling capabilities.",
            "key_types": [
              "MyBigInt",
              "big.Int"
            ],
            "functions": [
              "Marshal",
              "UnmarshalJSON"
            ],
            "imports": [
              "bytes",
              "encoding/json",
              "fmt",
              "math/big"
            ],
            "complexity": "medium"
          },
          "pkg/share/big_int_test.go": {
            "language": "Go",
            "purpose": "This file contains tests for the MyBigInt type in the share package.",
            "key_types": [
              "TokenBalanceResponse",
              "MyBigInt"
            ],
            "functions": [
              "TestMyBigInt"
            ],
            "imports": [
              "encoding/json",
              "fmt",
              "testing",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
            ],
            "side_effects": [
              "Prints the token balance response to the console",
              "Errors are reported if the balance is incorrect"
            ],
            "complexity": "medium"
          },
          "pkg/share/const_chain.go": {
            "language": "Go",
            "purpose": "Defines constants for various blockchain networks and gas suggestion types.",
            "key_types": [
              "string"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/share/const_provider.go": {
            "language": "Go",
            "purpose": "Defines constants for various providers and functions related to blockchain interactions.",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/share/error.go": {
            "language": "Go",
            "purpose": "Defines error variables for handling specific error cases in the application.",
            "key_types": [
              "error"
            ],
            "functions": [
              "errors.NewWithCode"
            ],
            "imports": [
              "net/http",
              "github.com/axieinfinity/ecosystem-go-common/errors"
            ],
            "complexity": "low"
          },
          "pkg/share/response.go": {
            "language": "Go",
            "purpose": "Defines an empty response structure for transaction lists.",
            "key_types": [
              "GetTransactionsRes",
              "ListResponse",
              "Transaction"
            ],
            "functions": [],
            "imports": [
              "github.com/axieinfinity/ronin-wallet-proxy/models"
            ],
            "complexity": "low"
          }
        }
      },
      "pkg/tokeninfo": {
        "path": "pkg/tokeninfo",
        "purpose": "Provides a service for managing token information, including retrieval, creation, and updates of token data.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "tokeninfo_svc.go"
        ],
        "dependencies": [
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/share",
          "github.com/axieinfinity/ronin-wallet-proxy/repositories"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating token management functionalities within a dedicated service module.",
        "file_summaries": {
          "pkg/tokeninfo/tokeninfo_svc.go": {
            "language": "Go",
            "purpose": "Provides a service for managing token information, including retrieval, creation, and updates of token data.",
            "key_types": [
              "Service",
              "service"
            ],
            "functions": [
              "GetByID",
              "CreateNewTokenInfo",
              "UpdateTokenInfo",
              "SearchToken",
              "SearchByMultiContracts",
              "GetTokenInfosList",
              "GetByChainAndAddress",
              "FixTokenMetadata",
              "updateCache",
              "searchTokenByChain",
              "searchTokenByQuery",
              "buildCacheTokenInfo",
              "waitingToRefreshCache",
              "fireRefreshCacheEvent",
              "NewService"
            ],
            "imports": [
              "context",
              "strings",
              "sync",
              "github.com/redis/go-redis/v9",
              "github.com/rs/zerolog/log",
              "github.com/axieinfinity/ecosystem-go-common/errors",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/share",
              "github.com/axieinfinity/ronin-wallet-proxy/repositories"
            ],
            "side_effects": [
              "Updates cache asynchronously",
              "Publishes events to refresh cache"
            ],
            "risks": [
              "Potential race conditions due to concurrent access to shared data",
              "Error handling may not cover all edge cases"
            ],
            "complexity": "medium"
          }
        }
      },
      "pkg/worker": {
        "path": "pkg/worker",
        "purpose": "This folder/module is responsible for managing a pool of worker goroutines to process jobs concurrently.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "config.go",
          "dispatcher.go",
          "job.go",
          "worker.go"
        ],
        "dependencies": [
          "sync",
          "time",
          "github.com/rs/zerolog/log"
        ],
        "architecture": "The folder follows a concurrent processing architecture using goroutines, with a dispatcher managing worker pools and job execution.",
        "file_summaries": {
          "pkg/worker/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for a worker package.",
            "key_types": [
              "Config"
            ],
            "functions": [],
            "imports": [
              "time"
            ],
            "complexity": "low"
          },
          "pkg/worker/dispatcher.go": {
            "language": "Go",
            "purpose": "This file implements a Dispatcher that manages a pool of worker goroutines to process jobs concurrently.",
            "key_types": [
              "Dispatcher",
              "Config",
              "Job",
              "Worker"
            ],
            "functions": [
              "NewDispatcher",
              "Run",
              "dispatch",
              "Stop",
              "AddNewJob"
            ],
            "imports": [
              "sync"
            ],
            "side_effects": [
              "Starts goroutines for workers",
              "Blocks on worker availability"
            ],
            "risks": [
              "Potential deadlock if job queue is not managed properly"
            ],
            "complexity": "medium"
          },
          "pkg/worker/job.go": {
            "language": "Go",
            "purpose": "Defines a Job type with an executable function.",
            "key_types": [
              "Job"
            ],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "pkg/worker/worker.go": {
            "language": "Go",
            "purpose": "This file defines a Worker type that manages job execution in a worker pool.",
            "key_types": [
              "Worker",
              "Job"
            ],
            "functions": [
              "NewWorker",
              "Start",
              "Stop"
            ],
            "imports": [
              "sync",
              "github.com/rs/zerolog/log"
            ],
            "side_effects": [
              "Starts a goroutine for job processing",
              "Logs errors during job execution"
            ],
            "risks": [
              "Potential deadlock if not managed properly with WaitGroup"
            ],
            "complexity": "medium"
          }
        }
      },
      "repositories": {
        "path": "repositories",
        "purpose": "Responsible for managing database interactions related to NFTs and tokens, including pagination and various CRUD operations.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "default.go",
          "nft_display_mapping.go",
          "token.go"
        ],
        "dependencies": [
          "gorm.io/gorm",
          "context",
          "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
          "github.com/axieinfinity/ronin-wallet-proxy/models"
        ],
        "architecture": "The folder follows a repository pattern, encapsulating database access logic and providing a clean API for data operations.",
        "file_summaries": {
          "repositories/default.go": {
            "language": "Go",
            "purpose": "Provides a pagination function for database queries using GORM.",
            "key_types": [
              "int",
              "func",
              "*gorm.DB"
            ],
            "functions": [
              "paginate"
            ],
            "imports": [
              "gorm.io/gorm"
            ],
            "side_effects": [
              "Modifies the database query parameters based on pagination logic."
            ],
            "complexity": "medium"
          },
          "repositories/nft_display_mapping.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing NFT display mappings, including saving, searching, and batch operations.",
            "key_types": [
              "NFTDisplayMappingRepo",
              "nftDisplayMappingRepo",
              "NFTMapping",
              "NFTMappingFilter",
              "Paging"
            ],
            "functions": [
              "Save",
              "SaveBatch",
              "SearchOne",
              "SearchList",
              "NewNFTMappingRepo"
            ],
            "imports": [
              "context",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-proxy/models"
            ],
            "side_effects": [
              "Database transactions for saving and searching NFT mappings."
            ],
            "risks": [
              "Potential SQL injection if filter.ToMap() is not properly sanitized."
            ],
            "complexity": "medium"
          },
          "repositories/token.go": {
            "language": "Go",
            "purpose": "This file defines a repository interface and its implementation for managing token information in a database.",
            "key_types": [
              "TokenInfoRepositories",
              "tokenInfoRepo",
              "TokenInfo"
            ],
            "functions": [
              "GetByID",
              "CreateNewTokenInfo",
              "UpsertTokenInfo",
              "UpsertListOfTokenInfo",
              "UpdateTokenDescription",
              "UpdateTokenMetadata",
              "GetByCoingeckoIDs",
              "GetTokenByID",
              "GetAllTokens",
              "GetTokenNoDescription",
              "SearchByNameAndSymbol",
              "DeleteTokenInfoByIDs",
              "NewTokenInfoRepo"
            ],
            "imports": [
              "context",
              "slices",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "gorm.io/gorm",
              "gorm.io/gorm/clause",
              "github.com/axieinfinity/ronin-wallet-proxy/models"
            ],
            "side_effects": [
              "Database transactions are initiated and may modify the database state."
            ],
            "risks": [
              "Potential SQL injection if user input is not properly sanitized.",
              "Error handling may expose sensitive information if not managed correctly."
            ],
            "complexity": "medium"
          }
        }
      },
      "root": {
        "path": "root",
        "purpose": "This folder/module is responsible for the Ronin Wallet proxy, providing functionality for querying wallet information and managing services.",
        "languages": {
          "Markdown": 2,
          "YAML": 2,
          "bash": 1
        },
        "key_modules": [
          "README.md",
          "SECURITY.md",
          "docker-compose.yml",
          "entrypoint.sh",
          ".golangci.yaml"
        ],
        "dependencies": [
          "Skynet API",
          "Moralis",
          "Getblock.io",
          "Coingecko"
        ],
        "architecture": "The folder follows a microservices architecture pattern, utilizing Docker for service management and configuration files for linting and documentation.",
        "file_summaries": {
          ".golangci.yaml": {
            "language": "YAML",
            "purpose": "Configuration file for GolangCI-Lint, specifying linter settings and rules.",
            "key_types": [
              "linters-settings",
              "rules",
              "files",
              "deny",
              "settings"
            ],
            "functions": [],
            "imports": [],
            "complexity": "medium"
          },
          "README.md": {
            "language": "Markdown",
            "purpose": "Documentation for the Ronin Wallet proxy, detailing its functionality and usage.",
            "key_types": [],
            "functions": [
              "Query account balance and erc20 token balances",
              "Query owned NFT collections",
              "Query owned NFT items belonging to a collection",
              "Query NFT item detail with metadata",
              "Query native token transfer transactions (for Ronin network only)",
              "Query recent transactions made by a wallet",
              "Query token transfer transactions relating to a wallet",
              "Query transaction detail",
              "Query gas fee suggestion",
              "Submit RPC call"
            ],
            "imports": [
              "Skynet API",
              "Moralis",
              "Getblock.io",
              "Coingecko"
            ],
            "complexity": "low"
          },
          "SECURITY.md": {
            "language": "Markdown",
            "purpose": "Documentation of the security policy for the project, including supported versions and vulnerability reporting.",
            "key_types": [],
            "functions": [],
            "imports": [],
            "complexity": "low"
          },
          "docker-compose.yml": {
            "language": "YAML",
            "purpose": "Defines services for a Docker application including PostgreSQL and Redis.",
            "key_types": [
              "services",
              "environment"
            ],
            "functions": [],
            "imports": [],
            "side_effects": [
              "Creates Docker containers for PostgreSQL and Redis services."
            ],
            "risks": [
              "Exposing database ports to the host may lead to unauthorized access."
            ],
            "complexity": "low"
          },
          "entrypoint.sh": {
            "language": "bash",
            "purpose": "This script serves as an entry point to run a service application.",
            "key_types": [],
            "functions": [
              "main"
            ],
            "imports": [],
            "side_effects": [
              "Executes an external application './app' with passed arguments."
            ],
            "complexity": "low"
          }
        }
      },
      "routes": {
        "path": "routes",
        "purpose": "Responsible for setting up and managing API routes for an Echo web server, including public, private, and internal routes.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "init.go",
          "internal.go",
          "private.go",
          "public.go"
        ],
        "dependencies": [
          "github.com/labstack/echo/v4",
          "github.com/rs/zerolog/log",
          "gorm.io/plugin/prometheus",
          "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
          "github.com/axieinfinity/ronin-wallet-proxy/config",
          "github.com/axieinfinity/ronin-wallet-proxy/handlers",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/coinbase",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/exchangerate",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/nft_mapping",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/redis",
          "github.com/axieinfinity/ronin-wallet-proxy/repositories"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing routes into separate files for public, private, and internal APIs, facilitating maintainability and scalability.",
        "file_summaries": {
          "routes/init.go": {
            "language": "Go",
            "purpose": "Sets up routes for an Echo web server and initializes various services and handlers.",
            "key_types": [
              "echo.Echo",
              "config.Schema",
              "postgresql.Client",
              "redis.Client",
              "coingecko.Service",
              "coinbase.Service",
              "exchangerate.ServiceV2",
              "nftmapping.Service",
              "handlers.NFTMappingHandler",
              "handlers.CoinbaseHandler"
            ],
            "functions": [
              "SetupRoutes",
              "NewClient",
              "NewRedisClient",
              "NewService",
              "NewServiceV2",
              "NewNFTMappingRepo",
              "NewNFTMappingHandler",
              "NewCoinbaseHandler",
              "registerPublic",
              "registerPrivate",
              "registerInternal"
            ],
            "imports": [
              "github.com/labstack/echo/v4",
              "github.com/rs/zerolog/log",
              "gorm.io/plugin/prometheus",
              "github.com/axieinfinity/ecosystem-go-common/database/postgresql",
              "github.com/axieinfinity/ronin-wallet-proxy/config",
              "github.com/axieinfinity/ronin-wallet-proxy/handlers",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/coinbase",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/exchangerate",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/nft_mapping",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/redis",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/tokeninfo",
              "github.com/axieinfinity/ronin-wallet-proxy/repositories"
            ],
            "side_effects": [
              "Establishes database connection",
              "Initializes Redis client",
              "Sets up various services and handlers"
            ],
            "risks": [
              "Potential for database connection failure",
              "Error handling may lead to application crash if not managed properly"
            ],
            "complexity": "medium"
          },
          "routes/internal.go": {
            "language": "Go",
            "purpose": "Defines internal API routes for handling token information and NFT mappings.",
            "key_types": [
              "echo.Echo",
              "config.Schema",
              "handlers.TokenInfoHandler",
              "handlers.NFTMappingHandler"
            ],
            "functions": [
              "registerInternal"
            ],
            "imports": [
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/labstack/echo/v4",
              "github.com/axieinfinity/ronin-wallet-proxy/config",
              "github.com/axieinfinity/ronin-wallet-proxy/handlers",
              "github.com/axieinfinity/ronin-wallet-proxy/middleware",
              "github.com/axieinfinity/ronin-wallet-proxy/models"
            ],
            "side_effects": [
              "Registers routes with middleware for authentication and request binding."
            ],
            "risks": [
              "Potential exposure of sensitive token information if not properly secured."
            ],
            "complexity": "medium"
          },
          "routes/private.go": {
            "language": "Go",
            "purpose": "Defines a route registration function for private routes using the Echo framework.",
            "key_types": [
              "echo.Echo"
            ],
            "functions": [
              "registerPrivate"
            ],
            "imports": [
              "github.com/labstack/echo/v4"
            ],
            "complexity": "low"
          },
          "routes/public.go": {
            "language": "Go",
            "purpose": "Defines public API routes for health checks, NFT mappings, and blockchain interactions.",
            "key_types": [
              "APIVersion",
              "echo.Echo",
              "config.Schema",
              "handlers.BlockchainHandler",
              "handlers.NFTMappingHandler",
              "handlers.CoinbaseHandler"
            ],
            "functions": [
              "HealthCheck",
              "registerPublic"
            ],
            "imports": [
              "net/http",
              "github.com/labstack/echo/v4",
              "github.com/labstack/echo/v4/middleware",
              "github.com/axieinfinity/ecosystem-go-common/echo/middleware",
              "github.com/axieinfinity/ronin-wallet-proxy/config",
              "github.com/axieinfinity/ronin-wallet-proxy/handlers",
              "github.com/axieinfinity/ronin-wallet-proxy/models",
              "github.com/axieinfinity/ronin-wallet-proxy/pkg/coinbase"
            ],
            "side_effects": [
              "Modifies HTTP response based on API calls",
              "Sets up middleware for CORS and static file serving"
            ],
            "risks": [
              "Potential exposure of sensitive API specifications if not properly secured",
              "Improper handling of user input could lead to security vulnerabilities"
            ],
            "complexity": "medium"
          }
        }
      },
      "tests": {
        "path": "tests",
        "purpose": "This folder contains tests for the web server implementation, ensuring the functionality and security of the ECDSA signing endpoint.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "tests/main.go"
        ],
        "dependencies": [
          "github.com/ethereum/go-ethereum",
          "github.com/labstack/echo/v4"
        ],
        "architecture": "The folder follows a modular architecture pattern, focusing on testing the web server's functionality and handling of ECDSA signing requests.",
        "file_summaries": {
          "tests/main.go": {
            "language": "Go",
            "purpose": "This file implements a web server that provides an endpoint to sign messages using ECDSA private keys.",
            "key_types": [
              "SignRequest",
              "ecdsa.PrivateKey"
            ],
            "functions": [
              "signHash",
              "signMessage",
              "main"
            ],
            "imports": [
              "context",
              "crypto/ecdsa",
              "fmt",
              "log",
              "net/http",
              "os",
              "os/signal",
              "sort",
              "strings",
              "time",
              "github.com/ethereum/go-ethereum/common",
              "github.com/ethereum/go-ethereum/common/hexutil",
              "github.com/ethereum/go-ethereum/crypto",
              "github.com/labstack/echo/v4"
            ],
            "side_effects": [
              "Starts an HTTP server on port 8888",
              "Listens for OS interrupt signals to gracefully shut down the server"
            ],
            "risks": [
              "Potential exposure of private keys if not handled securely",
              "Improper error handling may lead to application crashes"
            ],
            "complexity": "medium"
          }
        }
      }
    }
  }
}