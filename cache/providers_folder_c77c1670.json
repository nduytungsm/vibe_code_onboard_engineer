{
  "content_hash": "8d62fa7ccca8e30eac0d26ab8861dce3",
  "timestamp": "2025-09-26T07:42:48.692538+07:00",
  "result": {
    "path": "pkg/providers",
    "purpose": "Responsible for providing interfaces and implementations to interact with various blockchain services for retrieving token balances, transactions, and NFT collections.",
    "languages": {
      "Go": 10
    },
    "key_modules": [
      "ankr.go",
      "config.go",
      "covalent.go",
      "getblock.go",
      "moralis.go",
      "provider.go",
      "skynet.go",
      "skynetv2.go",
      "svc.go"
    ],
    "dependencies": [
      "github.com/rs/zerolog/log",
      "github.com/axieinfinity/ecosystem-go-common/errors",
      "github.com/ethereum/go-ethereum/common",
      "github.com/labstack/echo/v4",
      "github.com/redis/go-redis/v9",
      "github.com/getsentry/sentry-go",
      "github.com/Masterminds/semver",
      "github.com/mitchellh/mapstructure"
    ],
    "architecture": "The folder follows a modular architecture pattern, where each file represents a specific provider or configuration related to blockchain interactions, encapsulating related functionalities and types.",
    "file_summaries": {
      "pkg/providers/ankr.go": {
        "language": "Go",
        "purpose": "Provides an interface for interacting with the Ankr service to retrieve token balances and other blockchain-related data.",
        "key_types": [
          "AnkrProvider",
          "ProviderConfig",
          "ChainConfig",
          "GetTokenBalancesReq",
          "GetTokenBalancesRes",
          "GetTransactionsReq",
          "GetNFTCollectionsReq",
          "GetNFTItemsReq",
          "GetNFTItemReq",
          "GetTxnByHashReq",
          "GetGasSuggestionReq",
          "GetGasSuggestionRes",
          "NFTItem",
          "Transaction"
        ],
        "functions": [
          "GetID",
          "GetTokenBalances",
          "GetTransactions",
          "GetNFTCollections",
          "GetNFTItems",
          "GetNFTItem",
          "GetTransactionByHash",
          "GetGasSuggestion",
          "SendRPC",
          "NewAnkrProvider"
        ],
        "imports": [
          "context",
          "errors",
          "io",
          "net/http",
          "slices",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/ankr",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
        ],
        "side_effects": [
          "Logs errors when service calls fail",
          "May terminate the program on configuration errors"
        ],
        "risks": [
          "Potential exposure of sensitive information in logs",
          "Error handling may not cover all edge cases"
        ],
        "complexity": "medium"
      },
      "pkg/providers/config.go": {
        "language": "Go",
        "purpose": "Defines configuration structures and constraints for providers in a blockchain context.",
        "key_types": [
          "ProviderConfig",
          "ClientConstraint",
          "ClientConstraints",
          "ChainConfig",
          "CacheConfig"
        ],
        "functions": [
          "mustNewClientConstraints",
          "EnabledOn"
        ],
        "imports": [
          "strings",
          "time",
          "github.com/Masterminds/semver",
          "github.com/axieinfinity/ronin-wallet-proxy/httpclient/rpc",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
        ],
        "side_effects": [
          "Panic on error in mustNewClientConstraints"
        ],
        "risks": [
          "Potential panic if version constraint is invalid"
        ],
        "complexity": "medium"
      },
      "pkg/providers/config_test.go": {
        "language": "Go",
        "purpose": "Unit tests for the ClientConstraints functionality in the providers package.",
        "key_types": [
          "ClientConstraints",
          "helper.UserAgent"
        ],
        "functions": [
          "TestClientConstraint_EnabledOn"
        ],
        "imports": [
          "testing",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
        ],
        "complexity": "medium"
      },
      "pkg/providers/const.go": {
        "language": "Go",
        "purpose": "Defines a set of constant error codes for use in the application.",
        "key_types": [
          "const"
        ],
        "functions": [],
        "imports": [],
        "complexity": "low"
      },
      "pkg/providers/covalent.go": {
        "language": "Go",
        "purpose": "Provides functionality to interact with the Covalent API for retrieving token balances, transactions, and NFT collections.",
        "key_types": [
          "CovalentProvider",
          "ProviderConfig",
          "ChainConfig"
        ],
        "functions": [
          "GetID",
          "GetTokenBalances",
          "GetTransactions",
          "GetNFTCollections",
          "GetNFTItems",
          "GetNFTItem",
          "GetTransactionByHash",
          "GetGasSuggestion",
          "SendRPC",
          "NewCovalentProvider"
        ],
        "imports": [
          "context",
          "errors",
          "io",
          "slices",
          "strconv",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/covalent",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
        ],
        "side_effects": [
          "Logs fatal errors when parsing provider configuration."
        ],
        "risks": [
          "Potential for unhandled errors when interacting with external services.",
          "Panic in unimplemented methods could lead to application crashes."
        ],
        "complexity": "medium"
      },
      "pkg/providers/getblock.go": {
        "language": "Go",
        "purpose": "Provides methods to interact with blockchain data, specifically for getting token balances, transactions, and NFT collections.",
        "key_types": [
          "GetBlockProvider",
          "ProviderConfig",
          "getblock.Service",
          "md.GetTokenBalancesReq",
          "md.GetTransactionsReq",
          "md.GetNFTCollectionsReq",
          "md.GetNFTItemsReq",
          "md.GetNFTItemReq",
          "md.GetTxnByHashReq",
          "md.GetGasSuggestionReq",
          "md.GetGasSuggestionRes",
          "md.NFTItem",
          "md.Transaction"
        ],
        "functions": [
          "GetID",
          "GetTokenBalances",
          "GetTransactions",
          "GetNFTCollections",
          "GetNFTItems",
          "GetNFTItem",
          "GetTransactionByHash",
          "GetGasSuggestion",
          "SendRPC",
          "NewGetBlockProvider"
        ],
        "imports": [
          "context",
          "io",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/getblock",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
        ],
        "side_effects": [
          "Logs fatal error if configuration parsing fails"
        ],
        "risks": [
          "Potential for unhandled errors in RPC calls",
          "Returning nil responses for unsupported functions may lead to confusion"
        ],
        "complexity": "medium"
      },
      "pkg/providers/moralis.go": {
        "language": "Go",
        "purpose": "This file defines the MoralisProvider struct and its methods for interacting with the Moralis API to retrieve token balances, transactions, NFT collections, and NFT items.",
        "key_types": [
          "MoralisProvider",
          "ProviderConfig",
          "ChainConfig",
          "GetTokenBalancesReq",
          "GetTokenBalancesRes",
          "GetTransactionsReq",
          "GetTransactionsRes",
          "GetNFTCollectionsReq",
          "GetNFTItemsReq",
          "GetNFTItemReq",
          "GetTxnByHashReq",
          "GetGasSuggestionReq",
          "GetGasSuggestionRes"
        ],
        "functions": [
          "GetID",
          "GetTokenBalances",
          "GetTransactions",
          "GetNFTCollections",
          "GetNFTItems",
          "GetNFTItem",
          "GetTransactionByHash",
          "GetGasSuggestion",
          "SendRPC",
          "NewMoralisProvider"
        ],
        "imports": [
          "context",
          "errors",
          "io",
          "net/http",
          "slices",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/ethereum/go-ethereum/common",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/moralis",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
        ],
        "side_effects": [
          "Logs errors when API calls fail",
          "May modify the state of the MoralisProvider instance"
        ],
        "risks": [
          "Potential exposure of sensitive information in logs",
          "Error handling may not cover all edge cases"
        ],
        "complexity": "medium"
      },
      "pkg/providers/provider.go": {
        "language": "Go",
        "purpose": "Defines a Provider interface for handling token balances, transactions, and NFT collections, along with a function to parse provider configuration.",
        "key_types": [
          "Provider",
          "GetTokenBalancesReq",
          "GetTokenBalancesRes",
          "GetTransactionsReq",
          "GetTransactionsRes",
          "GetNFTCollectionsReq",
          "GetNFIItemsRes",
          "GetNFTItemReq",
          "NFTItem",
          "GetTxnByHashReq",
          "Transaction",
          "GetGasSuggestionReq",
          "GetGasSuggestionRes"
        ],
        "functions": [
          "GetID",
          "GetTokenBalances",
          "GetTransactions",
          "GetNFTCollections",
          "GetNFTItems",
          "GetNFTItem",
          "GetTransactionByHash",
          "GetGasSuggestion",
          "SendRPC",
          "parseProviderConfig"
        ],
        "imports": [
          "context",
          "io",
          "github.com/mitchellh/mapstructure",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper"
        ],
        "complexity": "medium"
      },
      "pkg/providers/skynet.go": {
        "language": "Go",
        "purpose": "This file defines the SkynetProvider struct and its methods for interacting with a Skynet service, including fetching token balances, transactions, NFT collections, and items.",
        "key_types": [
          "SkynetProvider",
          "ProviderConfig",
          "GetTokenBalancesReq",
          "GetTokenBalancesRes",
          "GetTransactionsReq",
          "GetTransactionsRes",
          "GetNFTCollectionsReq",
          "GetNFTItemsReq",
          "NFTItem",
          "Transaction"
        ],
        "functions": [
          "GetID",
          "GetTokenBalances",
          "GetTransactions",
          "GetNFTCollections",
          "GetNFTItems",
          "getErc1155NFTItems",
          "getErc721NFTItems",
          "GetNFTItem",
          "GetTransactionByHash",
          "GetGasSuggestion"
        ],
        "imports": [
          "context",
          "errors",
          "io",
          "net/http",
          "slices",
          "strings",
          "github.com/ethereum/go-ethereum/common",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/appaxie",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/skynet",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
        ],
        "side_effects": [
          "Logs errors when service calls fail",
          "May return internal server error responses"
        ],
        "risks": [
          "Potential exposure of sensitive information in error logs",
          "Handling of context cancellation may lead to unhandled errors"
        ],
        "complexity": "medium"
      },
      "pkg/providers/skynetv2.go": {
        "language": "Go",
        "purpose": "Provides functionalities to interact with the Skynet V2 service, including fetching token balances, transactions, NFT collections, and items.",
        "key_types": [
          "SkynetV2Provider",
          "ProviderConfig",
          "md.GetTokenBalancesReq",
          "md.GetTransactionsReq",
          "md.GetNFTCollectionsReq",
          "md.GetNFTItemsReq",
          "md.GetNFTItemReq",
          "md.GetTxnByHashReq",
          "md.GetGasSuggestionReq"
        ],
        "functions": [
          "GetID",
          "GetTokenBalances",
          "GetTransactions",
          "GetNFTCollections",
          "GetNFTItems",
          "GetNFTItem",
          "GetTransactionByHash",
          "GetGasSuggestion",
          "SendRPC",
          "NewSkynetV2Provider"
        ],
        "imports": [
          "context",
          "errors",
          "io",
          "net/http",
          "slices",
          "github.com/ethereum/go-ethereum/common",
          "github.com/rs/zerolog/log",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/providers/skynetv2",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/share"
        ],
        "side_effects": [
          "Logs errors when operations fail",
          "May terminate the program on configuration errors"
        ],
        "risks": [
          "Potential exposure of sensitive information in logs",
          "Error handling may not cover all edge cases"
        ],
        "complexity": "medium"
      },
      "pkg/providers/svc.go": {
        "language": "Go",
        "purpose": "This file defines a service for managing token balances, transactions, and NFT collections in a blockchain context.",
        "key_types": [
          "Service",
          "service",
          "ChainConfig",
          "ProviderConfig",
          "CacheConfig"
        ],
        "functions": [
          "humanoidTokenBalance",
          "GetSupportedChains",
          "GetTokenBalances",
          "GetTransactions",
          "getFromCache",
          "saveToCache"
        ],
        "imports": [
          "cmp",
          "context",
          "encoding/json",
          "fmt",
          "io",
          "math/big",
          "math/rand",
          "net/http",
          "strconv",
          "strings",
          "sync",
          "time",
          "github.com/getsentry/sentry-go",
          "github.com/labstack/echo/v4",
          "github.com/redis/go-redis/v9",
          "github.com/rs/zerolog/log",
          "github.com/samber/lo",
          "golang.org/x/exp/maps",
          "golang.org/x/exp/slices",
          "github.com/axieinfinity/ecosystem-go-common/errors",
          "github.com/axieinfinity/ronin-wallet-proxy/middleware",
          "github.com/axieinfinity/ronin-wallet-proxy/models",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/coingecko",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/exchangerate",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/share",
          "github.com/axieinfinity/ronin-wallet-proxy/pkg/tokeninfo",
          "github.com/axieinfinity/ronin-wallet-proxy/repositories"
        ],
        "side_effects": [
          "Interacts with Redis for caching token balances",
          "Logs warnings and errors"
        ],
        "risks": [
          "Potential exposure of sensitive data in logs",
          "Caching may lead to stale data if not managed properly"
        ],
        "complexity": "medium"
      }
    }
  }
}