{
  "content_hash": "d0fbbfcf7973a2159a587339a451f97c",
  "timestamp": "2025-09-26T13:35:58.578126+07:00",
  "result": {
    "path": "internal/services",
    "purpose": "This folder contains services responsible for managing user interactions, game data, rewards, and HTTP server functionalities within the wallet system.",
    "languages": {
      "Go": 8
    },
    "key_modules": [
      "check_in_wallet.go",
      "definitions.go",
      "game_data.go",
      "restful.go",
      "reward.go",
      "reward_distributor.go",
      "task_monitor.go"
    ],
    "dependencies": [
      "github.com/axieinfinity/ronin-wallet-services/internal/commons",
      "github.com/axieinfinity/ronin-wallet-services/internal/enums/quest_center",
      "github.com/axieinfinity/ronin-wallet-services/internal/repositories",
      "github.com/axieinfinity/ronin-wallet-services/internal/repositories/models",
      "github.com/axieinfinity/ronin-wallet-services/internal/routers/dtos/enums",
      "github.com/axieinfinity/ronin-wallet-services/pkg/helper",
      "github.com/axieinfinity/ronin-wallet-services/pkg/id-generator",
      "github.com/axieinfinity/ronin-wallet-services/pkg/http",
      "github.com/axieinfinity/ronin-wallet-services/pkg/metrics",
      "github.com/axieinfinity/ronin-wallet-services/pkg/middlewares",
      "github.com/hibiken/asynq",
      "github.com/ethereum/go-ethereum/common",
      "github.com/shopspring/decimal",
      "go.uber.org/zap",
      "golang.org/x/sync/errgroup"
    ],
    "architecture": "The folder follows a service-oriented architecture pattern, where each file represents a distinct service handling specific functionalities and interactions within the wallet system.",
    "file_summaries": {
      "internal/services/check_in_wallet.go": {
        "language": "Go",
        "purpose": "This file implements a service for managing check-in streaks for users in a wallet system.",
        "key_types": [
          "CheckInWalletStreak",
          "CheckInWallet",
          "checkInWallet"
        ],
        "functions": [
          "NewCheckInWalletService",
          "CheckInWallet",
          "CheckInStreak",
          "CheckInStreakV2",
          "extractDateOnly"
        ],
        "imports": [
          "context",
          "errors",
          "fmt",
          "time",
          "github.com/axieinfinity/ronin-wallet-services/internal/commons",
          "github.com/axieinfinity/ronin-wallet-services/internal/enums/quest_center",
          "github.com/axieinfinity/ronin-wallet-services/internal/repositories",
          "github.com/axieinfinity/ronin-wallet-services/internal/repositories/models",
          "github.com/axieinfinity/ronin-wallet-services/internal/routers/dtos/enums",
          "github.com/axieinfinity/ronin-wallet-services/internal/services/quest-center",
          "github.com/axieinfinity/ronin-wallet-services/pkg/helper",
          "github.com/axieinfinity/ronin-wallet-services/pkg/id-generator",
          "go.uber.org/zap"
        ],
        "side_effects": [
          "Interacts with user and check-in repositories to log check-ins and retrieve streak data."
        ],
        "risks": [
          "Potential for errors in user creation or check-in logging which could lead to incorrect streak data."
        ],
        "complexity": "medium"
      },
      "internal/services/definitions.go": {
        "language": "Go",
        "purpose": "Defines error constants and a function for error handling in the context of quest management.",
        "key_types": [
          "error",
          "string",
          "int"
        ],
        "functions": [
          "wrapError"
        ],
        "imports": [
          "errors",
          "fmt",
          "runtime",
          "github.com/axieinfinity/ronin-wallet-services/internal/routers/middlewares",
          "go.uber.org/zap"
        ],
        "side_effects": [
          "Logs errors using a logger"
        ],
        "risks": [
          "Potential for unhandled errors if not properly logged or managed"
        ],
        "complexity": "medium"
      },
      "internal/services/game_data.go": {
        "language": "Go",
        "purpose": "This file defines a service for managing game data, including checking in game, finding game registrations, and tracking player statistics.",
        "key_types": [
          "GameDataServiceConfig",
          "GameDataService",
          "gameDataService"
        ],
        "functions": [
          "NewGameDataService",
          "FindGameCheckInStreak",
          "FindGameRegistrationExternal",
          "FindPVPWonMatch",
          "FindAtiaStreak",
          "acquireData"
        ],
        "imports": [
          "context",
          "encoding/base64",
          "errors",
          "fmt",
          "strings",
          "time",
          "go.uber.org/zap",
          "github.com/axieinfinity/ronin-wallet-services/internal/enums/quest_center",
          "github.com/axieinfinity/ronin-wallet-services/internal/repositories/models",
          "github.com/axieinfinity/ronin-wallet-services/internal/routers/middlewares",
          "github.com/axieinfinity/ronin-wallet-services/pkg/http"
        ],
        "side_effects": [
          "Logs errors and information using zap logger"
        ],
        "risks": [
          "Potential SQL injection if user input is not properly sanitized in queries"
        ],
        "complexity": "medium"
      },
      "internal/services/restful.go": {
        "language": "Go",
        "purpose": "This file implements a RESTful service with metrics support using HTTP servers.",
        "key_types": [
          "HTTPMetric",
          "HTTPRestful",
          "RestfulConfig",
          "RestfulService",
          "restfulService"
        ],
        "functions": [
          "NewRestfulService",
          "ProvideHttpRestful",
          "ProvideHttpMetric",
          "Start",
          "Shutdown",
          "Stop"
        ],
        "imports": [
          "context",
          "fmt",
          "net/http",
          "time",
          "github.com/google/wire",
          "go.uber.org/zap",
          "golang.org/x/sync/errgroup",
          "github.com/axieinfinity/ronin-wallet-services/pkg/http",
          "github.com/axieinfinity/ronin-wallet-services/pkg/metrics",
          "github.com/axieinfinity/ronin-wallet-services/pkg/middlewares"
        ],
        "side_effects": [
          "Starts HTTP and metrics servers",
          "Shuts down servers on context cancellation"
        ],
        "risks": [
          "Potential denial of service if servers are not properly managed",
          "Improper handling of context may lead to resource leaks"
        ],
        "complexity": "medium"
      },
      "internal/services/reward.go": {
        "language": "Go",
        "purpose": "This file defines a RewardService for handling reward signature requests and responses.",
        "key_types": [
          "RewardService",
          "RewardConfig",
          "rewardService",
          "signatureRequest",
          "signatureForward",
          "RewardSignatureRes",
          "RewardSigResponse"
        ],
        "functions": [
          "NewRewardService",
          "wrapErr",
          "GetClaimSigs",
          "formRequestBody"
        ],
        "imports": [
          "context",
          "net/http",
          "github.com/ethereum/go-ethereum/common",
          "github.com/shopspring/decimal",
          "go.uber.org/zap",
          "github.com/axieinfinity/ronin-wallet-services/pkg/http"
        ],
        "side_effects": [
          "Makes HTTP requests to external services",
          "Logs errors using zap logger"
        ],
        "risks": [
          "Potential exposure of API key if not handled securely",
          "Handling of external service responses may lead to unexpected behavior if not validated"
        ],
        "complexity": "medium"
      },
      "internal/services/reward_distributor.go": {
        "language": "Go",
        "purpose": "This file defines a reward distributor service that manages asynchronous task handling.",
        "key_types": [
          "rewardDistributorService"
        ],
        "functions": [
          "NewRewardDistributorService",
          "Start",
          "Stop"
        ],
        "imports": [
          "context",
          "github.com/hibiken/asynq",
          "github.com/axieinfinity/ronin-wallet-services/internal/applications"
        ],
        "side_effects": [
          "Starts and stops an asynchronous server"
        ],
        "complexity": "medium"
      },
      "internal/services/task_monitor.go": {
        "language": "Go",
        "purpose": "This file defines a TaskMonitorService that manages the lifecycle of an HTTP server.",
        "key_types": [
          "TaskMonitorService",
          "taskMonitor"
        ],
        "functions": [
          "NewTaskMonitor",
          "Start",
          "Stop"
        ],
        "imports": [
          "context",
          "net/http",
          "github.com/axieinfinity/ronin-wallet-services/internal/applications"
        ],
        "side_effects": [
          "Starts an HTTP server",
          "Shuts down the HTTP server"
        ],
        "risks": [
          "Potential denial of service if the server is not properly managed"
        ],
        "complexity": "medium"
      }
    }
  }
}