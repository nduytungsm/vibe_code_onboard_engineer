{
  "content_hash": "f1e8f4ae979a14496b3d5777639677ef",
  "timestamp": "2025-09-26T14:09:39.201572+07:00",
  "result": {
    "purpose": "This project is a comprehensive wallet service for managing blockchain transactions, user interactions, and rewards in a gaming ecosystem. It provides functionalities such as quest management, user profiles, notifications, and integration with various external services like Discord and Coinbase.",
    "architecture": "The project follows a microservices architecture, utilizing modular components for each service, with a focus on separation of concerns and maintainability. It employs a combination of RESTful APIs, asynchronous task processing, and database migrations for managing state and data.",
    "data_models": [
      "User",
      "Quest",
      "Reward",
      "Transaction",
      "Notification",
      "Device",
      "Event"
    ],
    "external_services": [
      "Discord API",
      "Coinbase API",
      "OpenAI API",
      "Alchemy API",
      "Moralis API",
      "CoinGecko API",
      "Sentry",
      "Prometheus"
    ],
    "languages": {
      "Bash": 1,
      "Go": 200,
      "JSON": 10,
      "Markdown": 3,
      "SQL": 60,
      "YAML": 20
    },
    "folder_summaries": {
      "cmd/antenna": {
        "path": "cmd/antenna",
        "purpose": "Responsible for the initialization, configuration, and routing of the Antenna application.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "config.go",
          "main.go",
          "routes.go",
          "wire.go",
          "wire_gen.go"
        ],
        "dependencies": [
          "Google Wire"
        ],
        "architecture": "The folder follows a modular architecture pattern, utilizing dependency injection for managing application components.",
        "file_summaries": {
          "cmd/antenna/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for the antenna service in the application.",
            "key_types": [
              "config"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/antenna/main.go": {
            "language": "Go",
            "purpose": "Initializes and starts the Antenna application with configuration and logging.",
            "key_types": [
              "main"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/antenna/routes.go": {
            "language": "Go",
            "purpose": "Defines route handlers for private and public groups in an antenna service.",
            "key_types": [
              "PrivateGroup",
              "PublicGroup",
              "NewPrivateGroup"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "cmd/antenna/wire.go": {
            "language": "Go",
            "purpose": "This file sets up dependency injection for the antenna application using Google Wire.",
            "key_types": [
              "wireAntennaApp",
              "applications.NewApplication",
              "provideHttpServer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/antenna/wire_gen.go": {
            "language": "Go",
            "purpose": "Generates dependency injection code for the antenna application using Wire.",
            "key_types": [
              "wireAntennaApp"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "cmd/cms": {
        "path": "cmd/cms",
        "purpose": "Responsible for the configuration, initialization, and dependency injection of the CMS application.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "config.go",
          "main.go",
          "wire.go",
          "wire_gen.go"
        ],
        "dependencies": [
          "Google Wire"
        ],
        "architecture": "The folder follows a modular architecture pattern, utilizing dependency injection to manage application components.",
        "file_summaries": {
          "cmd/cms/config.go": {
            "language": "Go",
            "purpose": "Defines the configuration structure for the CMS application.",
            "key_types": [
              "cmsConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "cmd/cms/main.go": {
            "language": "Go",
            "purpose": "Initializes and starts the reward distributor application.",
            "key_types": [
              "main",
              "NewConfig",
              "Start"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/cms/wire.go": {
            "language": "Go",
            "purpose": "This file sets up dependency injection for the CMS application using Google Wire.",
            "key_types": [
              "wireCMSApp",
              "provideSugarLogger",
              "provideServices"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/cms/wire_gen.go": {
            "language": "Go",
            "purpose": "Generates dependency injection code for the CMS application using Wire.",
            "key_types": [
              "wireCMSApp",
              "NewEchoMiddleware",
              "NewBannerHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "cmd/consumer": {
        "path": "cmd/consumer",
        "purpose": "Responsible for the consumer service in a wallet application, handling configuration, initialization, and dependency injection.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "config.go",
          "main.go",
          "wire.go",
          "wire_gen.go"
        ],
        "dependencies": [
          "Google Wire"
        ],
        "architecture": "The folder follows a modular architecture pattern, utilizing dependency injection to manage components and configurations.",
        "file_summaries": {
          "cmd/consumer/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for a consumer service in a wallet application.",
            "key_types": [
              "consumerConfig",
              "ContractsTrackingServiceConfig",
              "ContractsTrackingConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/consumer/main.go": {
            "language": "Go",
            "purpose": "Main entry point for the consumer application, initializing configuration, logging, and starting the app.",
            "key_types": [
              "main()"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/consumer/wire.go": {
            "language": "Go",
            "purpose": "This file sets up dependency injection for the consumer application using Google Wire.",
            "key_types": [
              "wireConsumerApp",
              "provideConsumerApp",
              "provideRoninLogConsumer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/consumer/wire_gen.go": {
            "language": "Go",
            "purpose": "Generates dependency injection code for the consumer application using Wire.",
            "key_types": [
              "wireConsumerApp",
              "provideContractsTracking",
              "provideMetricsService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "cmd/cron_job": {
        "path": "cmd/cron_job",
        "purpose": "Responsible for managing and executing scheduled tasks within the application using cron jobs.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "config.go",
          "main.go",
          "wire_gen.go"
        ],
        "dependencies": [
          "Wire"
        ],
        "architecture": "The folder follows a modular architecture pattern, utilizing dependency injection for managing services and configurations related to cron jobs.",
        "file_summaries": {
          "cmd/cron_job/config.go": {
            "language": "Go",
            "purpose": "Defines the configuration structure for cron jobs in the application.",
            "key_types": [
              "cronJobConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/cron_job/main.go": {
            "language": "Go",
            "purpose": "This file initializes and starts a cron jobs application.",
            "key_types": [
              "main",
              "NewConfig",
              "Start"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/cron_job/wire_gen.go": {
            "language": "Go",
            "purpose": "Generates dependency injection code for cron job services using Wire.",
            "key_types": [
              "wireCronJob",
              "provideSugarLogger",
              "provideServices"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "cmd/device_manager": {
        "path": "cmd/device_manager",
        "purpose": "Responsible for managing device-related operations and services within the application.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "config.go",
          "main.go",
          "routes.go",
          "wire.go",
          "wire_gen.go"
        ],
        "dependencies": [
          "Google Wire"
        ],
        "architecture": "The folder follows a modular architecture pattern, utilizing dependency injection for better management of components and services.",
        "file_summaries": {
          "cmd/device_manager/config.go": {
            "language": "Go",
            "purpose": "Defines the configuration structure for the device manager application.",
            "key_types": [
              "deviceManagerConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/device_manager/main.go": {
            "language": "Go",
            "purpose": "Initializes and starts the device manager application.",
            "key_types": [
              "main",
              "NewConfig",
              "Start"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/device_manager/routes.go": {
            "language": "Go",
            "purpose": "Defines routes for device management services with public and private groups.",
            "key_types": [
              "PrivateGroup",
              "PublicGroup",
              "NewPrivateGroup"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/device_manager/wire.go": {
            "language": "Go",
            "purpose": "This file sets up dependency injection for the device manager application using Google Wire.",
            "key_types": [
              "wireDeviceManager",
              "provideSugarLogger",
              "provideHttpServer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/device_manager/wire_gen.go": {
            "language": "Go",
            "purpose": "Generates dependency injection code for the device manager application.",
            "key_types": [
              "wireDeviceManager",
              "provideSugarLogger",
              "provideHttpServer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "cmd/discovery": {
        "path": "cmd/discovery",
        "purpose": "Responsible for the configuration, initialization, and dependency injection of the discovery service in the application.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "config.go",
          "main.go",
          "wire.go",
          "wire_gen.go"
        ],
        "dependencies": [
          "Google Wire"
        ],
        "architecture": "The folder follows a modular architecture pattern, utilizing dependency injection to manage service dependencies and configuration.",
        "file_summaries": {
          "cmd/discovery/config.go": {
            "language": "Go",
            "purpose": "Defines the configuration structure for the discovery service in the application.",
            "key_types": [
              "DiscoveryConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/discovery/main.go": {
            "language": "Go",
            "purpose": "Initializes and starts the Discovery center application.",
            "key_types": [
              "main"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/discovery/wire.go": {
            "language": "Go",
            "purpose": "This file sets up dependency injection for the discovery application using Google Wire.",
            "key_types": [
              "wireDiscoveryApp",
              "provideAuthSvc",
              "provideRouters"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/discovery/wire_gen.go": {
            "language": "Go",
            "purpose": "Generates dependency injection code for the discovery module using Wire.",
            "key_types": [
              "wireDiscoveryApp"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "cmd/doc": {
        "path": "cmd/doc",
        "purpose": "Responsible for generating and defining Swagger documentation for the API used in the Quest feature of Ronin Wallet.",
        "languages": {
          "Go": 1,
          "JSON": 1,
          "YAML": 1
        },
        "key_modules": [
          "docs.go",
          "swagger.json",
          "swagger.yaml"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on documentation generation and API specification definition.",
        "file_summaries": {
          "cmd/doc/docs.go": {
            "language": "Go",
            "purpose": "Generates Swagger documentation for an API using swaggo.",
            "key_types": [
              "docTemplate"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/doc/swagger.json": {
            "language": "JSON",
            "purpose": "Defines the Swagger API documentation for the Quest API used in Ronin Wallet.",
            "key_types": [
              "info",
              "paths",
              "responses"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/doc/swagger.yaml": {
            "language": "YAML",
            "purpose": "Defines API specifications for quest-related responses in a Swagger format.",
            "key_types": [
              "responses.PaginationDTO",
              "responses.ParticipantQuestDetailInfoDTO",
              "responses.RolePermission"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "cmd/proxy": {
        "path": "cmd/proxy",
        "purpose": "Responsible for managing the proxy service in the Ronin wallet application, including configuration, routing, and dependency injection.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "config.go",
          "main.go",
          "routes.go",
          "wire.go",
          "wire_gen.go"
        ],
        "dependencies": [
          "Wire"
        ],
        "architecture": "The folder follows a modular architecture pattern, utilizing dependency injection to manage service interactions and HTTP routing for the proxy functionality.",
        "file_summaries": {
          "cmd/proxy/config.go": {
            "language": "Go",
            "purpose": "Configuration management for the proxy service in the Ronin wallet application.",
            "key_types": [
              "DatabasesConfig",
              "ProxyConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/proxy/main.go": {
            "language": "Go",
            "purpose": "This file initializes and starts a proxy application for wallet services.",
            "key_types": [
              "main"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/proxy/routes.go": {
            "language": "Go",
            "purpose": "Defines HTTP route groups for proxy services in a wallet application.",
            "key_types": [
              "PrivateGroup",
              "PublicGroup",
              "NewPrivateGroup"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/proxy/wire.go": {
            "language": "Go",
            "purpose": "This file sets up dependency injection for the proxy services in the Ronin wallet application.",
            "key_types": [
              "main",
              "services",
              "repositories"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/proxy/wire_gen.go": {
            "language": "Go",
            "purpose": "Generates dependency injection code using Wire for the proxy package.",
            "key_types": [
              "main",
              "services",
              "repositories"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "cmd/push_notification": {
        "path": "cmd/push_notification",
        "purpose": "Responsible for managing push notifications in a wallet application.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "config.go",
          "main.go",
          "routes.go",
          "wire.go",
          "wire_gen.go"
        ],
        "dependencies": [
          "Google Wire"
        ],
        "architecture": "The folder follows a modular architecture pattern, utilizing dependency injection for managing components and services.",
        "file_summaries": {
          "cmd/push_notification/config.go": {
            "language": "Go",
            "purpose": "Configuration struct for push notification service in a wallet application.",
            "key_types": [
              "pushNotificationConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/push_notification/main.go": {
            "language": "Go",
            "purpose": "Initializes and starts a push notification application.",
            "key_types": [
              "main",
              "NewConfig",
              "Start"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/push_notification/routes.go": {
            "language": "Go",
            "purpose": "Defines routes and handlers for push notification services in an internal API.",
            "key_types": [
              "PrivateGroup",
              "NewPrivateGroup",
              "GroupHandlers"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/push_notification/wire.go": {
            "language": "Go",
            "purpose": "This file sets up dependency injection for the push notification application using Google Wire.",
            "key_types": [
              "wirePushNotificationApp",
              "provideSugarLogger",
              "provideHttpServer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/push_notification/wire_gen.go": {
            "language": "Go",
            "purpose": "Generates dependency injection code for push notification services using Wire.",
            "key_types": [
              "wirePushNotificationApp"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "cmd/quest_center": {
        "path": "cmd/quest_center",
        "purpose": "Responsible for the configuration, routing, and dependency injection of the quest center application in the Ronin wallet services.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "config.go",
          "main.go",
          "routes.go",
          "wire.go",
          "wire_gen.go"
        ],
        "dependencies": [
          "Wire"
        ],
        "architecture": "The folder follows a modular architecture pattern, focusing on separation of concerns with distinct files for configuration, routing, and dependency management.",
        "file_summaries": {
          "cmd/quest_center/config.go": {
            "language": "Go",
            "purpose": "Configuration setup for the quest center application in the Ronin wallet services.",
            "key_types": [
              "configSchema",
              "apiInfo",
              "LoggerConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/quest_center/main.go": {
            "language": "Go",
            "purpose": "Main entry point for the Ronin Wallet Quest API service.",
            "key_types": [
              "main",
              "newCliApp",
              "waitForShutdownSignal"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/quest_center/routes.go": {
            "language": "Go",
            "purpose": "Defines routing groups for user and private quest-related endpoints in a web service.",
            "key_types": [
              "PublicGroup",
              "PrivateGroup",
              "UserGroup"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/quest_center/wire.go": {
            "language": "Go",
            "purpose": "This file sets up dependency injection for the quest center service in a web application.",
            "key_types": [
              "wire.ProviderSet",
              "InitializeQuestCenter",
              "NewQuestCenterService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/quest_center/wire_gen.go": {
            "language": "Go",
            "purpose": "Generates dependency injection code for the quest center service using Wire.",
            "key_types": [
              "main",
              "services",
              "handlers"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "cmd/task_scheduler": {
        "path": "cmd/task_scheduler",
        "purpose": "Responsible for initializing and managing a task scheduling application, including configuration and dependency injection.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "config.go",
          "main.go",
          "wire.go",
          "wire_gen.go"
        ],
        "dependencies": [
          "Google Wire"
        ],
        "architecture": "The folder follows a modular architecture pattern, utilizing dependency injection for managing components and configurations.",
        "file_summaries": {
          "cmd/task_scheduler/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for task scheduling and application settings.",
            "key_types": [
              "AsyncQueueSchedulerConfig",
              "ScheduledTaskConfig",
              "Config"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/task_scheduler/main.go": {
            "language": "Go",
            "purpose": "Initializes and starts a task scheduler application with configuration and logging.",
            "key_types": [
              "main"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/task_scheduler/wire.go": {
            "language": "Go",
            "purpose": "This file sets up dependency injection for a task scheduler application using Google Wire.",
            "key_types": [
              "wireTaskScheduler",
              "provideScheduler",
              "provideAsyncQueueClient"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/task_scheduler/wire_gen.go": {
            "language": "Go",
            "purpose": "Generates dependency injection code for a task scheduler application.",
            "key_types": [
              "wireTaskScheduler",
              "provideScheduler",
              "provideHttpServer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "cmd/task_server": {
        "path": "cmd/task_server",
        "purpose": "Responsible for the task server application, including configuration management, dependency injection, and application startup.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "config.go",
          "main.go",
          "wire.go",
          "wire_gen.go"
        ],
        "dependencies": [
          "Google Wire"
        ],
        "architecture": "The folder follows a modular architecture pattern, utilizing dependency injection for managing components and services.",
        "file_summaries": {
          "cmd/task_server/config.go": {
            "language": "Go",
            "purpose": "Configuration management for task server components and services.",
            "key_types": [
              "ProvidersConfig",
              "DatabasesConfig",
              "Config"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/task_server/main.go": {
            "language": "Go",
            "purpose": "Main entry point for the task server application, handling configuration, logging, and application startup.",
            "key_types": [
              "main()"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/task_server/wire.go": {
            "language": "Go",
            "purpose": "This file sets up dependency injection for the task server using Google Wire.",
            "key_types": [
              "wireTaskServer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/task_server/wire_gen.go": {
            "language": "Go",
            "purpose": "Generates dependency injection code for the task server using Wire.",
            "key_types": [
              "main",
              "services",
              "repositories"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "cmd/wallet_manager": {
        "path": "cmd/wallet_manager",
        "purpose": "Responsible for managing wallet operations, including configuration, routing, and dependency injection for the wallet manager application.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "config.go",
          "main.go",
          "routes.go",
          "wire.go",
          "wire_gen.go"
        ],
        "dependencies": [
          "Google Wire"
        ],
        "architecture": "The folder follows a modular architecture pattern, utilizing dependency injection for managing components and services within the wallet manager application.",
        "file_summaries": {
          "cmd/wallet_manager/config.go": {
            "language": "Go",
            "purpose": "Defines the configuration schema for the wallet manager application.",
            "key_types": [
              "configSchema"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "cmd/wallet_manager/main.go": {
            "language": "Go",
            "purpose": "Initializes and starts the wallet manager application.",
            "key_types": [
              "main"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/wallet_manager/routes.go": {
            "language": "Go",
            "purpose": "Defines route groups for public and private API endpoints in a wallet management service.",
            "key_types": [
              "NewPrivateGroup",
              "NewPublicGroup",
              "PublicGroup"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/wallet_manager/wire.go": {
            "language": "Go",
            "purpose": "This file sets up dependency injection for the wallet manager application using Google Wire.",
            "key_types": [
              "wireWalletManager",
              "provideHttpServer",
              "NewApplication"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "cmd/wallet_manager/wire_gen.go": {
            "language": "Go",
            "purpose": "Generates dependency injection code for the wallet manager application.",
            "key_types": [
              "wireWalletManager"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "config": {
        "path": "config",
        "purpose": "This folder contains configuration files for various applications and services within the system, defining settings for servers, databases, logging, and other parameters.",
        "languages": {
          "YAML": 12
        },
        "key_modules": [
          "config.antenna.yaml",
          "config.cms.yaml",
          "config.consumer.yaml",
          "config.cron_job.yaml",
          "config.device-manager.yml",
          "config.discovery.yml",
          "config.proxy.yaml",
          "config.push-notification.yml",
          "config.quest.center.yml",
          "config.reward.distributor.yaml",
          "config.task-scheduler.yaml",
          "config.task-server.yaml",
          "config.wallet.manager.yml"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each configuration file is dedicated to a specific application or service, allowing for clear separation of concerns and easier management of settings.",
        "file_summaries": {
          "config/config.antenna.yaml": {
            "language": "YAML",
            "purpose": "Configuration file for the Antenna application, defining server settings, logging, Redis, HTTP clients, and Kafka consumers.",
            "key_types": [
              "application",
              "server",
              "logging"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "config/config.cms.yaml": {
            "language": "YAML",
            "purpose": "Configuration file for the wallet CMS system, defining application settings, database connection, and logging parameters.",
            "key_types": [
              "application",
              "restful",
              "postgres"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "config/config.consumer.yaml": {
            "language": "YAML",
            "purpose": "Configuration file for the wallet Ronin log consumer service.",
            "key_types": [
              "logger",
              "metrics",
              "log_tracking_service"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "config/config.cron_job.yaml": {
            "language": "YAML",
            "purpose": "Configuration file for a cron job system managing scheduled tasks and application settings.",
            "key_types": [
              "cron_service",
              "data_providers",
              "logger"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "config/config.device-manager.yml": {
            "language": "YAML",
            "purpose": "Configuration file for the wallet device manager application.",
            "key_types": [
              "application",
              "http_server",
              "postgres"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "config/config.discovery.yml": {
            "language": "YAML",
            "purpose": "Configuration file for server, database, logging, and external services settings.",
            "key_types": [
              "server",
              "postgres",
              "redis"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "config/config.proxy.yaml": {
            "language": "YAML",
            "purpose": "Configuration file for the wallet-proxy application, defining server, database, caching, and logging settings.",
            "key_types": [
              "application",
              "server",
              "databases"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "config/config.push-notification.yml": {
            "language": "YAML",
            "purpose": "Configuration file for push notification service settings and parameters.",
            "key_types": [
              "application",
              "server",
              "notification_consumer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "config/config.quest.center.yml": {
            "language": "YAML",
            "purpose": "Configuration file for the quest center service, defining various service settings and parameters.",
            "key_types": [
              "profiler",
              "server",
              "database configurations"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "config/config.reward.distributor.yaml": {
            "language": "YAML",
            "purpose": "Configuration file for the wallet quest reward distributor service.",
            "key_types": [
              "processor",
              "async_queue_server",
              "logger"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "config/config.task-scheduler.yaml": {
            "language": "YAML",
            "purpose": "Configuration file for the wallet task scheduler application.",
            "key_types": [
              "application",
              "scheduled_tasks",
              "redis"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "config/config.task-server.yaml": {
            "language": "YAML",
            "purpose": "Configuration file for the wallet task server, defining application settings, database connections, and task parameters.",
            "key_types": [
              "application",
              "databases",
              "tasks"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "config/config.wallet.manager.yml": {
            "language": "YAML",
            "purpose": "Configuration file for the wallet proxy application managing server, database, logging, authentication, and external API settings.",
            "key_types": [
              "application",
              "server",
              "postgres"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/applications": {
        "path": "internal/applications",
        "purpose": "Defines the structure and behavior of applications, including configuration, startup, shutdown, and service management.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "application.go",
          "service.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating application and service definitions in separate files for better organization and maintainability.",
        "file_summaries": {
          "internal/applications/application.go": {
            "language": "Go",
            "purpose": "Defines an application structure with configuration, startup, and shutdown handling.",
            "key_types": [
              "ApplicationConfig",
              "Application",
              "NewApplication"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/applications/service.go": {
            "language": "Go",
            "purpose": "Defines service interfaces and a wrapper for daemon services.",
            "key_types": [
              "Service",
              "DaemonService",
              "daemonService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/commons": {
        "path": "internal/commons",
        "purpose": "Provides common utilities and constants used across the application.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "address.go",
          "constant.go",
          "date.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating common functionalities and constants to promote code reuse and maintainability.",
        "file_summaries": {
          "internal/commons/address.go": {
            "language": "Go",
            "purpose": "Converts a hexadecimal hash string to a lowercase Ethereum address.",
            "key_types": [
              "AddressFromTopic"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/commons/constant.go": {
            "language": "Go",
            "purpose": "Defines constants used across the application for authentication, date formatting, file handling, and API versioning.",
            "key_types": [],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/commons/date.go": {
            "language": "Go",
            "purpose": "Provides utility functions for date manipulation in UTC.",
            "key_types": [
              "DateUTC",
              "NumDaysBetweenTime"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/antenna/consumers": {
        "path": "internal/domains/antenna/consumers",
        "purpose": "Responsible for handling events and processing notifications related to token transfers, ensuring idempotency in message processing, and monitoring consumer routines.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "block_full_event.go",
          "idempotency.go",
          "metrics.go"
        ],
        "dependencies": [
          "Redis",
          "Kafka",
          "Prometheus"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing related functionalities into separate files for handling events, ensuring message processing idempotency, and monitoring metrics.",
        "file_summaries": {
          "internal/domains/antenna/consumers/block_full_event.go": {
            "language": "Go",
            "purpose": "Handles block full events and processes notifications related to token transfers.",
            "key_types": [
              "BlockFullEventHandler",
              "NewBlockFullEventHandler",
              "NotificationFilterConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/antenna/consumers/idempotency.go": {
            "language": "Go",
            "purpose": "Handles idempotency for processing messages using Redis and Kafka.",
            "key_types": [
              "IdempotencyMessageHandler",
              "NewIdempotencyHandler",
              "Process"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/antenna/consumers/metrics.go": {
            "language": "Go",
            "purpose": "Defines and initializes Prometheus metrics for monitoring consumer routines in the antenna service.",
            "key_types": [
              "metricCollectors",
              "initMetrics"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/antenna/models": {
        "path": "internal/domains/antenna/models",
        "purpose": "Defines data models for handling blockchain-related events and notifications.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "message.go",
          "noti.go",
          "token.go",
          "transfer.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing data models related to blockchain events and notifications in separate files for clarity and maintainability.",
        "file_summaries": {
          "internal/domains/antenna/models/message.go": {
            "language": "Go",
            "purpose": "Defines data models for handling block full events in a blockchain context.",
            "key_types": [
              "BlockFullEvent",
              "Block",
              "IdempotencyMessage"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/antenna/models/noti.go": {
            "language": "Go",
            "purpose": "Defines the NotificationPayload struct for handling notification data in the application.",
            "key_types": [
              "NotificationPayload"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/antenna/models/token.go": {
            "language": "go",
            "purpose": "Defines the RoninToken model with attributes for a cryptocurrency token.",
            "key_types": [
              "RoninToken"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/antenna/models/transfer.go": {
            "language": "Go",
            "purpose": "Defines the TokenTransfer model for handling token transfer data in a blockchain context.",
            "key_types": [
              "TokenTransfer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/antenna/services": {
        "path": "internal/domains/antenna/services",
        "purpose": "This folder/module is responsible for providing various services related to account management, notifications, token handling, and checkpoint management within the antenna domain.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "cache_codec.go",
          "checkpoint.go",
          "notification.go",
          "skynet_token.go",
          "tranfer_decoder.go"
        ],
        "dependencies": [
          "Redis"
        ],
        "architecture": "The folder follows a service-oriented architecture pattern, where each file defines a specific service with its own responsibilities and interactions, primarily focused on handling data related to accounts, notifications, and transactions.",
        "file_summaries": {
          "internal/domains/antenna/services/cache_codec.go": {
            "language": "Go",
            "purpose": "Defines cache codecs for account and token data in the antenna service.",
            "key_types": [
              "accountCacheCodec",
              "tokenCacheCodec",
              "CacheKey"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/antenna/services/checkpoint.go": {
            "language": "Go",
            "purpose": "Provides a service for managing checkpoints in a wallet system using Redis.",
            "key_types": [
              "CheckpointService",
              "NewCheckpointService",
              "checkpointService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/antenna/services/notification.go": {
            "language": "Go",
            "purpose": "Provides a notification service for processing on-chain notifications to user devices.",
            "key_types": [
              "NotificationService",
              "NewNotificationService",
              "notificationService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/antenna/services/skynet_token.go": {
            "language": "Go",
            "purpose": "Provides a service for retrieving tokens from Skynet and caching them using Redis.",
            "key_types": [
              "SkynetTokenService",
              "NewSkynetTokenService",
              "skynetTokenService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/antenna/services/tranfer_decoder.go": {
            "language": "Go",
            "purpose": "Decodes logs into token transfer information for Ethereum transactions.",
            "key_types": [
              "TransferDecoder"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/bridge/handlers": {
        "path": "internal/domains/bridge/handlers",
        "purpose": "Handles bridge-related HTTP requests and responses for a wallet service.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "bridge.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on handling specific domain-related HTTP interactions.",
        "file_summaries": {
          "internal/domains/bridge/handlers/bridge.go": {
            "language": "Go",
            "purpose": "Handles bridge-related HTTP requests and responses for a wallet service.",
            "key_types": [
              "BridgeHandler",
              "NewBridgeHandler",
              "getProviders"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/bridge/handlers/dtos": {
        "path": "internal/domains/bridge/handlers/dtos",
        "purpose": "Defines data transfer objects (DTOs) for handling bridge-related requests and responses.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "requests.go",
          "responses.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on data transfer objects to facilitate communication between different components of the bridge domain.",
        "file_summaries": {
          "internal/domains/bridge/handlers/dtos/requests.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects (DTOs) for handling bridge-related requests.",
            "key_types": [
              "ListProviders",
              "GetProviderTokens",
              "FindBestQuote"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/bridge/handlers/dtos/responses.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects (DTOs) for handling responses related to blockchain chains, providers, tokens, and quotes.",
            "key_types": [
              "Chain",
              "Provider",
              "Token"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/bridge/services": {
        "path": "internal/domains/bridge/services",
        "purpose": "Defines the BridgeService interface and its implementation for managing bridge-related operations.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "bridge.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating the bridge-related business logic within a dedicated service module.",
        "file_summaries": {
          "internal/domains/bridge/services/bridge.go": {
            "language": "Go",
            "purpose": "Defines the BridgeService interface and its implementation for managing bridge-related operations.",
            "key_types": [
              "BridgeService",
              "bridgeService",
              "NewBridgeService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/bridge/services/providers": {
        "path": "internal/domains/bridge/services/providers",
        "purpose": "Responsible for defining provider interfaces and configurations for bridge services in a blockchain wallet application.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "provider.go",
          "relay.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating provider-related functionalities for bridge services.",
        "file_summaries": {
          "internal/domains/bridge/services/providers/provider.go": {
            "language": "Go",
            "purpose": "Defines the Provider interface and configuration for bridge services in a blockchain wallet application.",
            "key_types": [
              "Provider",
              "SupportedProviderCfg",
              "Config"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/bridge/services/providers/relay.go": {
            "language": "Go",
            "purpose": "Defines a Relay provider for handling bridge services in a wallet application.",
            "key_types": [
              "Relay",
              "NewRelayProvider",
              "wrapErr"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/captcha/services": {
        "path": "internal/domains/captcha/services",
        "purpose": "Responsible for implementing services related to captcha verification.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "verify.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture pattern, focusing on encapsulating captcha verification logic within dedicated service files.",
        "file_summaries": {
          "internal/domains/captcha/services/verify.go": {
            "language": "Go",
            "purpose": "Implements a service for verifying captcha challenges using a turnstile client.",
            "key_types": [
              "CaptchaVerifyService",
              "NewCaptchaVerifyService",
              "turnstileCaptchaVerifyService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/deception/models": {
        "path": "internal/domains/deception/models",
        "purpose": "Defines models for handling token deception statuses.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "token.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on encapsulating the data models related to token deception.",
        "file_summaries": {
          "internal/domains/deception/models/token.go": {
            "language": "Go",
            "purpose": "Defines models for handling token deception statuses.",
            "key_types": [
              "Token",
              "DeceptionResult",
              "DeceptionStatus"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/deception/services": {
        "path": "internal/domains/deception/services",
        "purpose": "Responsible for providing services related to detecting deceptive tokens.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "token.go",
          "token_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture pattern, focusing on the implementation of services and their corresponding tests.",
        "file_summaries": {
          "internal/domains/deception/services/token.go": {
            "language": "Go",
            "purpose": "Provides a service for detecting deceptive tokens.",
            "key_types": [
              "DeceptionTokenService",
              "NewDeceptionTokenService",
              "DetectToken"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/deception/services/token_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the DetectToken function in the deception token service.",
            "key_types": [
              "Test_deceptionTokenServiceImpl_DetectToken"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/devicemanager/handlers": {
        "path": "internal/domains/devicemanager/handlers",
        "purpose": "Handles HTTP requests related to devices and wallet operations for the device manager service.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "devices.go",
          "wallet.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing handlers for different functionalities related to device management and wallet operations.",
        "file_summaries": {
          "internal/domains/devicemanager/handlers/devices.go": {
            "language": "Go",
            "purpose": "Handles device-related HTTP requests for the device manager service.",
            "key_types": [
              "DeviceHandler",
              "NewDeviceHandler",
              "Setup"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/devicemanager/handlers/wallet.go": {
            "language": "Go",
            "purpose": "Handles wallet-related device operations such as registration, reset, and retrieval.",
            "key_types": [
              "WalletHandler",
              "Registration",
              "Reset"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/devicemanager/handlers/dtos/requests": {
        "path": "internal/domains/devicemanager/handlers/dtos/requests",
        "purpose": "Defines data transfer objects for device registration and management.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "device.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on data transfer objects (DTOs) that facilitate communication between different layers of the application.",
        "file_summaries": {
          "internal/domains/devicemanager/handlers/dtos/requests/device.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects for device registration and management.",
            "key_types": [
              "DeviceRegistration",
              "DeviceReset",
              "UpdatePushToken"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/devicemanager/handlers/dtos/responses": {
        "path": "internal/domains/devicemanager/handlers/dtos/responses",
        "purpose": "Defines data transfer objects for device management responses.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "device.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on data transfer objects that facilitate communication between different layers of the application.",
        "file_summaries": {
          "internal/domains/devicemanager/handlers/dtos/responses/device.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects for device management responses.",
            "key_types": [
              "SliceResult",
              "Pagination"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/devicemanager/models": {
        "path": "internal/domains/devicemanager/models",
        "purpose": "Defines the Device model and related functionality for managing device data.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "device.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a domain-driven design pattern, focusing on the Device model and its associated logic.",
        "file_summaries": {
          "internal/domains/devicemanager/models/device.go": {
            "language": "Go",
            "purpose": "Defines the Device model and related functionality for managing device data.",
            "key_types": [
              "Device",
              "DeviceFilter",
              "IsChanged"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/devicemanager/repos": {
        "path": "internal/domains/devicemanager/repos",
        "purpose": "Responsible for managing device data in a database through repository interfaces and models.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "device.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "Follows a repository pattern to abstract data access and manipulation for device management.",
        "file_summaries": {
          "internal/domains/devicemanager/repos/device.go": {
            "language": "Go",
            "purpose": "Defines a repository interface and implementation for managing device data in a database.",
            "key_types": [
              "DeviceRepo interface",
              "repo struct",
              "GetDevice method"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/devicemanager/repos/models.go": {
            "language": "Go",
            "purpose": "Defines the device model and conversion functions for the device manager domain.",
            "key_types": [
              "device struct",
              "ToMap function",
              "fromDevice function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/devicemanager/services": {
        "path": "internal/domains/devicemanager/services",
        "purpose": "Responsible for managing device records through the DeviceService interface and its implementation.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "device.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture, focusing on defining and implementing services related to device management.",
        "file_summaries": {
          "internal/domains/devicemanager/services/device.go": {
            "language": "Go",
            "purpose": "Defines the DeviceService interface and its implementation for managing device records.",
            "key_types": [
              "DeviceService",
              "deviceService",
              "RegisterDevice"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/dex/handlers": {
        "path": "internal/domains/dex/handlers",
        "purpose": "Handles routing and processing of decentralized exchange (DEX) operations.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "dex.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on handling specific functionalities related to DEX operations.",
        "file_summaries": {
          "internal/domains/dex/handlers/dex.go": {
            "language": "Go",
            "purpose": "Handles routing and processing of decentralized exchange (DEX) operations.",
            "key_types": [
              "DexRouterHandler",
              "NewDexRouterHandler",
              "Setup"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/dex/handlers/dtos/requests": {
        "path": "internal/domains/dex/handlers/dtos/requests",
        "purpose": "This folder/module is responsible for defining data transfer objects (DTOs) used for routing requests within the application.",
        "languages": {
          "go": 1
        },
        "key_modules": [
          "route.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on separation of concerns by encapsulating DTO definitions related to request handling.",
        "file_summaries": {
          "internal/domains/dex/handlers/dtos/requests/route.go": {
            "language": "go",
            "purpose": "Defines a data transfer object for routing requests by ID.",
            "key_types": [
              "RouteByID"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/dex/handlers/dtos/responses": {
        "path": "internal/domains/dex/handlers/dtos/responses",
        "purpose": "Defines response structures and utility functions for handling API responses.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "generic.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on DTOs (Data Transfer Objects) for API responses, promoting separation of concerns and reusability.",
        "file_summaries": {
          "internal/domains/dex/handlers/dtos/responses/generic.go": {
            "language": "Go",
            "purpose": "Defines response structures and utility functions for handling API responses.",
            "key_types": [
              "Response",
              "Paging",
              "Paginated"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/dex/models": {
        "path": "internal/domains/dex/models",
        "purpose": "Defines data models for handling routes and token transactions in a decentralized exchange.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "route.go",
          "tokens.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on data modeling for decentralized exchange functionalities.",
        "file_summaries": {
          "internal/domains/dex/models/route.go": {
            "language": "Go",
            "purpose": "Defines data models for handling routes and token transactions in a decentralized exchange.",
            "key_types": [
              "CallData",
              "Token",
              "RoutePool"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/dex/models/tokens.go": {
            "language": "go",
            "purpose": "Defines data models for listing tokens with pagination support.",
            "key_types": [
              "ListTokenRequest",
              "Pagination",
              "ListTokenResponse"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/dex/services": {
        "path": "internal/domains/dex/services",
        "purpose": "Responsible for routing in a decentralized exchange through the DexRouterService interface and its implementation.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "router.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture pattern, focusing on defining and implementing services related to decentralized exchange functionalities.",
        "file_summaries": {
          "internal/domains/dex/services/router.go": {
            "language": "Go",
            "purpose": "Defines the DexRouterService interface and its implementation for routing in a decentralized exchange.",
            "key_types": [
              "DexRouterService",
              "DexRouterConfig",
              "NewDexRouterService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/dex/services/provider": {
        "path": "internal/domains/dex/services/provider",
        "purpose": "Responsible for providing services related to decentralized exchange operations, including token handling, route fetching, and cross-chain swaps.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "katana.go",
          "kyberswap.go",
          "provider.go",
          "relay.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each file represents a specific service related to decentralized exchange functionalities.",
        "file_summaries": {
          "internal/domains/dex/services/provider/katana.go": {
            "language": "Go",
            "purpose": "Defines the Katana service for handling token operations in a decentralized exchange context.",
            "key_types": [
              "Katana",
              "NewKatana",
              "KatanaExtraConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/dex/services/provider/kyberswap.go": {
            "language": "Go",
            "purpose": "Implements the KyberSwap provider for a decentralized exchange service.",
            "key_types": [
              "KyberSwap",
              "NewKyberSwap",
              "GetRoutes"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/dex/services/provider/provider.go": {
            "language": "Go",
            "purpose": "Defines a provider service for decentralized exchange (DEX) operations including route fetching and fee calculations.",
            "key_types": [
              "ExtraFee",
              "Config",
              "DexRouter"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/dex/services/provider/relay.go": {
            "language": "Go",
            "purpose": "Implements a relay service for cross-chain swaps in a decentralized exchange.",
            "key_types": [
              "RelaySwap",
              "NewRelaySwap",
              "CrossChainSupported"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/discovery/handlers/dtos/requests": {
        "path": "internal/domains/discovery/handlers/dtos/requests",
        "purpose": "This folder is responsible for defining request data transfer objects (DTOs) used in the discovery domain's handler layer.",
        "languages": {
          "go": 1
        },
        "key_modules": [
          "trending-token.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a layered architecture pattern, focusing on separating data transfer objects from business logic.",
        "file_summaries": {
          "internal/domains/discovery/handlers/dtos/requests/trending-token.go": {
            "language": "go",
            "purpose": "Defines a request structure for trending token queries.",
            "key_types": [
              "TrendingTokenRequest"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/discovery/models": {
        "path": "internal/domains/discovery/models",
        "purpose": "Defines models and types for trending tokens in a discovery service.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "trending-token.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on encapsulating domain-specific models related to discovery services.",
        "file_summaries": {
          "internal/domains/discovery/models/trending-token.go": {
            "language": "Go",
            "purpose": "Defines models and types for trending tokens in a discovery service.",
            "key_types": [
              "SortDimension",
              "TimeRange",
              "TrendingToken"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/discovery/services": {
        "path": "internal/domains/discovery/services",
        "purpose": "Provides services for trending tokens and OHLCV chart data retrieval.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "trending-token.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture, focusing on providing specific functionalities related to trending tokens.",
        "file_summaries": {
          "internal/domains/discovery/services/trending-token.go": {
            "language": "Go",
            "purpose": "Provides services for trending tokens and OHLCV chart data retrieval.",
            "key_types": [
              "TrendingTokenService",
              "geckoTrendingTokenService",
              "NewTrendingTokenService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/manager/handlers": {
        "path": "internal/domains/manager/handlers",
        "purpose": "Handles various HTTP requests and services related to application version management, Coinbase API interactions, notifications, and operator management within the manager domain.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "app_version.go",
          "coinbase.go",
          "noti.go",
          "operators.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each file is responsible for handling specific aspects of the manager domain's functionality, promoting separation of concerns.",
        "file_summaries": {
          "internal/domains/manager/handlers/app_version.go": {
            "language": "Go",
            "purpose": "Handles application version management and mandatory updates.",
            "key_types": [
              "AppInternalVersionHandler",
              "AppVersionHandler",
              "NewInternalAppVersionHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/handlers/coinbase.go": {
            "language": "Go",
            "purpose": "Handles Coinbase-related API requests for onramping and asset selection.",
            "key_types": [
              "CoinbaseHandler",
              "NewCoinbaseHandler",
              "createOnrampToken",
              "selectAssets"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/handlers/noti.go": {
            "language": "Go",
            "purpose": "Handles notification-related HTTP routes and services for a manager domain.",
            "key_types": [
              "InternalNotiHandler",
              "NotiHandler",
              "NewInternalNotiHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/handlers/operators.go": {
            "language": "Go",
            "purpose": "Handles operator-related HTTP requests and responses for the manager domain.",
            "key_types": [
              "InternalOperatorHandler",
              "OperatorHandler",
              "Setup"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/manager/handlers/dtos/requests": {
        "path": "internal/domains/manager/handlers/dtos/requests",
        "purpose": "Defines data transfer objects (DTOs) for various request types related to application management, authorization, Coinbase operations, mandatory updates, notifications, and operator management.",
        "languages": {
          "Go": 7
        },
        "key_modules": [
          "app_version.go",
          "auth.go",
          "coinbase.go",
          "generic.go",
          "mandatory_update.go",
          "noti.go",
          "operator.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing DTOs by their specific request types to promote separation of concerns and maintainability.",
        "file_summaries": {
          "internal/domains/manager/handlers/dtos/requests/app_version.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects for managing application version requests.",
            "key_types": [
              "CreateVersion",
              "PublishVersion",
              "Delete"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/manager/handlers/dtos/requests/auth.go": {
            "language": "go",
            "purpose": "Defines a structure for handling authorization requests.",
            "key_types": [
              "Authorization"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/manager/handlers/dtos/requests/coinbase.go": {
            "language": "Go",
            "purpose": "Defines request data transfer objects for handling Coinbase-related operations.",
            "key_types": [
              "Address",
              "CbOnrampToken",
              "CbSelectAssets"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/manager/handlers/dtos/requests/generic.go": {
            "language": "Go",
            "purpose": "Defines a Paging struct for handling pagination parameters in requests.",
            "key_types": [
              "Paging"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/manager/handlers/dtos/requests/mandatory_update.go": {
            "language": "Go",
            "purpose": "Defines request data transfer objects for mandatory update operations.",
            "key_types": [
              "SetMandatoryUpdate",
              "GetVersionStatus",
              "GetLatestVersion"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/manager/handlers/dtos/requests/noti.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects (DTOs) for notification management requests.",
            "key_types": [
              "WhitelistNoti",
              "UpsertNewsNoti",
              "ListNoti"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/handlers/dtos/requests/operator.go": {
            "language": "go",
            "purpose": "Defines data transfer objects for operator management requests.",
            "key_types": [
              "CreateOperator",
              "ListOperators",
              "DeleteOperator"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/manager/handlers/dtos/responses": {
        "path": "internal/domains/manager/handlers/dtos/responses",
        "purpose": "This folder/module is responsible for defining response data structures for various API interactions and data transfer objects (DTOs) used in the application.",
        "languages": {
          "go": 6
        },
        "key_modules": [
          "app_version.go",
          "auth.go",
          "coinbase.go",
          "generics.go",
          "noti.go",
          "operator.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing response DTOs and structures for different functionalities within the application, promoting separation of concerns.",
        "file_summaries": {
          "internal/domains/manager/handlers/dtos/responses/app_version.go": {
            "language": "go",
            "purpose": "Defines the response structure for application version information.",
            "key_types": [
              "Version"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/manager/handlers/dtos/responses/auth.go": {
            "language": "go",
            "purpose": "Defines the Auth response structure for authentication-related data.",
            "key_types": [
              "Auth"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/manager/handlers/dtos/responses/coinbase.go": {
            "language": "Go",
            "purpose": "Defines response data structures for Coinbase-related API interactions.",
            "key_types": [
              "CbSessionToken",
              "CbSelectAssets"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/manager/handlers/dtos/responses/generics.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects for server responses and pagination handling.",
            "key_types": [
              "Paging",
              "Paginated[T]",
              "ServerResponseDTO[T]"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/handlers/dtos/responses/noti.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects (DTOs) for notification responses in the application.",
            "key_types": [
              "UpsertNoti",
              "NotiButton",
              "NotiListingItem"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/handlers/dtos/responses/operator.go": {
            "language": "Go",
            "purpose": "Defines the Operator response data structure for API responses.",
            "key_types": [
              "Operator"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/manager/middlewares": {
        "path": "internal/domains/manager/middlewares",
        "purpose": "Provides middleware functionalities for authentication and authorization in the manager domain.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "auth.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on middleware components that handle cross-cutting concerns like authentication and authorization.",
        "file_summaries": {
          "internal/domains/manager/middlewares/auth.go": {
            "language": "Go",
            "purpose": "Provides authentication and authorization middleware for managing operator access.",
            "key_types": [
              "AuthenMdw",
              "ProvideOperatorAuth",
              "SetCtxAuthInfo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/manager/models": {
        "path": "internal/domains/manager/models",
        "purpose": "Defines various data models related to application management, including versioning, operator interactions, history tracking, mandatory updates, and notifications.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "app_version.go",
          "auth.go",
          "generic.go",
          "mandatory_update.go",
          "noti.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each file defines a specific entity model used for managing different aspects of the application.",
        "file_summaries": {
          "internal/domains/manager/models/app_version.go": {
            "language": "Go",
            "purpose": "Defines the VersionEntity model for managing application version data.",
            "key_types": [
              "VersionEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/manager/models/auth.go": {
            "language": "Go",
            "purpose": "Defines the OperatorEntity model for database interactions.",
            "key_types": [
              "OperatorEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/manager/models/generic.go": {
            "language": "Go",
            "purpose": "Defines the HistoryEntity model for tracking changes in an application.",
            "key_types": [
              "HistoryEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/manager/models/mandatory_update.go": {
            "language": "Go",
            "purpose": "Defines the MandatoryUpdateEntity model for database interactions.",
            "key_types": [
              "MandatoryUpdateEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/manager/models/noti.go": {
            "language": "Go",
            "purpose": "Defines data models for notifications in the application.",
            "key_types": [
              "NotificationEntity",
              "NotificationListingItem"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/manager/repos": {
        "path": "internal/domains/manager/repos",
        "purpose": "Responsible for managing various repositories related to application versioning, mandatory updates, notifications, and operators in a database.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "app_version.go",
          "mandatory_update.go",
          "noti.go",
          "operator.go",
          "helpers.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a repository pattern, encapsulating database operations for different entities and providing a clear interface for data management.",
        "file_summaries": {
          "internal/domains/manager/repos/app_version.go": {
            "language": "Go",
            "purpose": "Manages application version data and operations in a database.",
            "key_types": [
              "appVersionRepo",
              "NewAppVersionRepo",
              "Create"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/repos/helpers.go": {
            "language": "Go",
            "purpose": "Provides helper functions for managing database transactions in a GORM context.",
            "key_types": [
              "bindTx",
              "txFromContext"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/manager/repos/mandatory_update.go": {
            "language": "Go",
            "purpose": "Defines a repository for managing mandatory updates in a database.",
            "key_types": [
              "mandatoryUpdateRepo",
              "NewMandatoryUpdateRepo",
              "Create"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/repos/noti.go": {
            "language": "Go",
            "purpose": "Defines a repository interface and implementation for managing notifications and whitelists in a database.",
            "key_types": [
              "NotiRepo",
              "notiRepo",
              "NewNotiRepo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/repos/operator.go": {
            "language": "Go",
            "purpose": "Defines the OperatorRepo interface and its implementation for managing operator entities in a database.",
            "key_types": [
              "OperatorRepo",
              "operatorRepo",
              "NewOperatorRepo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/manager/services": {
        "path": "internal/domains/manager/services",
        "purpose": "Responsible for managing various services related to application versioning, authentication, notifications, and updates within the manager domain.",
        "languages": {
          "Go": 8
        },
        "key_modules": [
          "app_version.go",
          "auth.go",
          "coinbase.go",
          "helpers.go",
          "mandatory_update.go",
          "noti.go",
          "noti_helper.go",
          "operators.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture pattern, where each file represents a distinct service responsible for specific functionalities within the application.",
        "file_summaries": {
          "internal/domains/manager/services/app_version.go": {
            "language": "Go",
            "purpose": "Defines the application version service interface and its implementation for managing app versions.",
            "key_types": [
              "AppVersionSvc",
              "appVersionSvc",
              "NewAppVersionSvc"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/services/auth.go": {
            "language": "Go",
            "purpose": "Provides authentication and authorization services for the application.",
            "key_types": [
              "AuthSvc",
              "AuthCfg",
              "authSvc"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/services/coinbase.go": {
            "language": "Go",
            "purpose": "Provides services for interacting with Coinbase API for session token creation and asset selection.",
            "key_types": [
              "CoinbaseSvc",
              "coinbaseSvc",
              "NewCoinbaseSvc"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/services/helpers.go": {
            "language": "Go",
            "purpose": "Provides error handling utilities for various services in the manager domain.",
            "key_types": [
              "wrapErr",
              "wrapError"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/services/mandatory_update.go": {
            "language": "Go",
            "purpose": "Manages mandatory updates for an application, including creation and removal of updates.",
            "key_types": [
              "MandatoryUpdateSvc",
              "mandatoryUpdateSvc",
              "NewMandatoryUpdateSvc"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/services/noti.go": {
            "language": "Go",
            "purpose": "This file defines a notification service interface and its implementation for managing notifications.",
            "key_types": [
              "NotiSvc",
              "notiSvc",
              "NewNotiSvc"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/services/noti_helper.go": {
            "language": "Go",
            "purpose": "Handles the processing of notification whitelists in a service.",
            "key_types": [
              "processWhitelist"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/manager/services/operators.go": {
            "language": "Go",
            "purpose": "Defines the Operator service for managing operators in the system.",
            "key_types": [
              "OperatorSvc",
              "operatorSvc",
              "NewOperatorSvc"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/manager/services/tasks": {
        "path": "internal/domains/manager/services/tasks",
        "purpose": "Handles notification tasks for the manager domain.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "noti.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on encapsulating notification-related tasks within the manager domain.",
        "file_summaries": {
          "internal/domains/manager/services/tasks/noti.go": {
            "language": "Go",
            "purpose": "Handles notification tasks for the manager domain.",
            "key_types": [
              "NotiTaskHandler",
              "NotiPayload",
              "notiTaskHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/notification/consumers": {
        "path": "internal/domains/notification/consumers",
        "purpose": "Handles the parsing and processing of notification messages from a Kafka consumer.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "notifications.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on the separation of concerns by handling notification message processing independently.",
        "file_summaries": {
          "internal/domains/notification/consumers/notifications.go": {
            "language": "Go",
            "purpose": "Handles the parsing and processing of notification messages from a Kafka consumer.",
            "key_types": [
              "PostNotificationMessageHandler",
              "NewPostNotificationMessageHandler",
              "Parse",
              "Process"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/notification/handlers": {
        "path": "internal/domains/notification/handlers",
        "purpose": "Handles push notification requests and sends notifications asynchronously.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "push.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on handling specific types of notifications through dedicated handler files.",
        "file_summaries": {
          "internal/domains/notification/handlers/push.go": {
            "language": "Go",
            "purpose": "Handles push notification requests and sends notifications asynchronously.",
            "key_types": [
              "NewInternalPushHandler",
              "internalPushHandler",
              "push"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/notification/models": {
        "path": "internal/domains/notification/models",
        "purpose": "Responsible for defining models and structures related to notification types and handling push notifications.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "apn.go",
          "const.go",
          "message.go",
          "push.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing related functionalities into separate files for clarity and maintainability.",
        "file_summaries": {
          "internal/domains/notification/models/apn.go": {
            "language": "Go",
            "purpose": "Defines push notification types for Apple Push Notification service (APNs).",
            "key_types": [
              "EPushType",
              "PushTypeAlert",
              "PushTypeBackground"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/notification/models/const.go": {
            "language": "Go",
            "purpose": "Defines constant values used in the notification domain.",
            "key_types": [],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/notification/models/message.go": {
            "language": "Go",
            "purpose": "Defines the PostNotificationMessage structure and methods for handling notification messages.",
            "key_types": [
              "PostNotificationMessage",
              "CreatedTime",
              "GetIdempotencyKey"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/notification/models/push.go": {
            "language": "Go",
            "purpose": "Defines models and structures for handling push notifications.",
            "key_types": [
              "Recipient",
              "Payload",
              "PostNotificationRequest"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/notification/services": {
        "path": "internal/domains/notification/services",
        "purpose": "Responsible for managing notification services and checkpoints within a wallet system.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "checkpoint.go",
          "notification.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture, encapsulating notification-related functionalities into distinct service modules.",
        "file_summaries": {
          "internal/domains/notification/services/checkpoint.go": {
            "language": "Go",
            "purpose": "Provides a service for managing notification checkpoints in a wallet system.",
            "key_types": [
              "CheckpointService",
              "NewCheckpointService",
              "checkpointService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/notification/services/notification.go": {
            "language": "Go",
            "purpose": "Defines a notification service for sending notifications to recipients.",
            "key_types": [
              "NotificationService",
              "service",
              "NewNotificationService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/notification/services/push": {
        "path": "internal/domains/notification/services/push",
        "purpose": "Responsible for handling push notifications across different platforms, including Apple's APNs and Firebase Cloud Messaging.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "apns.go",
          "apns_token.go",
          "config.go",
          "fcm.go",
          "interface.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating functionality related to push notifications in separate files, each handling specific aspects of the service.",
        "file_summaries": {
          "internal/domains/notification/services/push/apns.go": {
            "language": "Go",
            "purpose": "Handles sending push notifications via Apple's APNs service.",
            "key_types": [
              "apnsPushClient",
              "SendNotification",
              "newAPNSPushClient"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/notification/services/push/apns_token.go": {
            "language": "Go",
            "purpose": "Manages Apple Provider Authentication Tokens for push notifications.",
            "key_types": [
              "Token",
              "GetAccessToken",
              "Apply"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/notification/services/push/config.go": {
            "language": "Go",
            "purpose": "Defines configuration settings for push notification services.",
            "key_types": [
              "Config",
              "String"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/notification/services/push/fcm.go": {
            "language": "Go",
            "purpose": "Handles push notifications using Firebase Cloud Messaging (FCM) for Android and iOS.",
            "key_types": [
              "fcmPushClient",
              "buildAndroidNotificationConfig",
              "buildIosNotificationConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/notification/services/push/interface.go": {
            "language": "Go",
            "purpose": "Defines an interface for push notification clients and a factory function to create them based on configuration.",
            "key_types": [
              "Client interface",
              "clientContractor type",
              "NewClient function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/proxy/handlers": {
        "path": "internal/domains/proxy/handlers",
        "purpose": "Handles various HTTP requests and API endpoints for a proxy service, including activity, AI, balance, configuration, DApp, fiat, profile, RPC, simulation, and token-related functionalities.",
        "languages": {
          "Go": 10
        },
        "key_modules": [
          "activity.go",
          "ai.go",
          "balance.go",
          "config.go",
          "dapp.go",
          "fiat.go",
          "profile.go",
          "rpc.go",
          "simulate.go",
          "token.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each file corresponds to a specific domain or functionality within the proxy service, promoting separation of concerns and maintainability.",
        "file_summaries": {
          "internal/domains/proxy/handlers/activity.go": {
            "language": "Go",
            "purpose": "Handles activity-related HTTP requests for a proxy service.",
            "key_types": [
              "activityHandler",
              "NewActivityHandler",
              "getActivities"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/ai.go": {
            "language": "Go",
            "purpose": "Handles AI-related requests for processing chat functions.",
            "key_types": [
              "AIHandler",
              "NewAIHandler",
              "ProcessChat"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/balance.go": {
            "language": "Go",
            "purpose": "Handles balance-related API endpoints for portfolio and NFT collections.",
            "key_types": [
              "balanceHandler",
              "NewBalanceHandler",
              "Setup"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/config.go": {
            "language": "Go",
            "purpose": "Handles configuration retrieval for blockchain chains in a proxy service.",
            "key_types": [
              "configHandler",
              "NewConfigHandler",
              "Setup"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/dapp.go": {
            "language": "Go",
            "purpose": "Handles DApp-related HTTP requests for scanning, retrieving, and deleting DApps.",
            "key_types": [
              "dappHandler",
              "NewDAppHandler",
              "privateDAppHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/fiat.go": {
            "language": "Go",
            "purpose": "Handles fiat token price requests and responses.",
            "key_types": [
              "fiatHandler",
              "NewFiatHandler",
              "getTokenPrices"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/profile.go": {
            "language": "Go",
            "purpose": "Handles profile-related HTTP requests for checking profile existence.",
            "key_types": [
              "profileHandler",
              "NewProfileHandler",
              "checkProfileExistence"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/rpc.go": {
            "language": "Go",
            "purpose": "Handles RPC requests for a specific blockchain chain.",
            "key_types": [
              "rpcHandler",
              "NewRpcHandler",
              "executeRpc"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/simulate.go": {
            "language": "Go",
            "purpose": "Handles simulation requests for JSON-RPC in a web service.",
            "key_types": [
              "simulationHandler",
              "NewSimulationHandler",
              "simulateJsonRPC"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/token.go": {
            "language": "Go",
            "purpose": "Handles token-related HTTP requests for a proxy service.",
            "key_types": [
              "NewTokenHandler",
              "GetToken",
              "ListTokens"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/proxy/handlers/dtos/requests": {
        "path": "internal/domains/proxy/handlers/dtos/requests",
        "purpose": "Defines data transfer objects (DTOs) for various requests handled by the proxy service.",
        "languages": {
          "go": 10
        },
        "key_modules": [
          "activity.go",
          "ai.go",
          "balance.go",
          "dapp.go",
          "fiat.go",
          "profile.go",
          "rpc.go",
          "simulate.go",
          "token.go",
          "token_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing DTOs by their specific request types for clarity and maintainability.",
        "file_summaries": {
          "internal/domains/proxy/handlers/dtos/requests/activity.go": {
            "language": "go",
            "purpose": "Defines data transfer objects (DTOs) for handling portfolio activities and transactions in a proxy service.",
            "key_types": [
              "PortfolioActivityDTO",
              "GetTxByHashDTO",
              "GetTransfersDTO"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/dtos/requests/ai.go": {
            "language": "go",
            "purpose": "Defines data transfer objects for AI tool choice requests.",
            "key_types": [
              "ToolChoiceRequest",
              "Message",
              "Function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/proxy/handlers/dtos/requests/balance.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects (DTOs) for handling portfolio balance and NFT collections/ items requests.",
            "key_types": [
              "PortfolioBalanceDTO",
              "PortfolioCollectionsDTO",
              "PortfolioNFTItemsDTO"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/dtos/requests/dapp.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects for DApp requests.",
            "key_types": [
              "DAppByURL",
              "DAppScan"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/proxy/handlers/dtos/requests/fiat.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects for handling fiat token information requests.",
            "key_types": [
              "TokenFiatInfoDTO",
              "GetTokenFiatInfoDTO"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/proxy/handlers/dtos/requests/profile.go": {
            "language": "Go",
            "purpose": "Defines a request structure for checking profile existence.",
            "key_types": [
              "CheckProfileExistence"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/proxy/handlers/dtos/requests/rpc.go": {
            "language": "Go",
            "purpose": "Defines an RPC request structure and custom JSON unmarshalling logic.",
            "key_types": [
              "RpcRequest",
              "UnmarshalJSON",
              "rawToMap"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/dtos/requests/simulate.go": {
            "language": "Go",
            "purpose": "Defines request types and methods for simulating Ethereum transactions.",
            "key_types": [
              "SimulateMethod",
              "JsonRPCSimulate",
              "Value()"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/dtos/requests/token.go": {
            "language": "Go",
            "purpose": "Defines request data transfer objects (DTOs) for token-related operations in a proxy service.",
            "key_types": [
              "TokenByID",
              "GetToken",
              "ListTokens"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/dtos/requests/token_test.go": {
            "language": "Go",
            "purpose": "Unit tests for validating token request structures and time range inputs.",
            "key_types": [
              "TestGetToken_Validate",
              "TestTokenPriceChart_ValidateTimeRange"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/proxy/handlers/dtos/responses": {
        "path": "internal/domains/proxy/handlers/dtos/responses",
        "purpose": "Defines data transfer objects (DTOs) for various types of responses in a proxy service, including AI chat completions, chain configurations, server responses, and RPC responses.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "ai.go",
          "config.go",
          "responses.go",
          "rpc.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing data transfer objects related to different response types in separate files for clarity and maintainability.",
        "file_summaries": {
          "internal/domains/proxy/handlers/dtos/responses/ai.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects for AI chat completion responses.",
            "key_types": [
              "ChatCompletionResponse",
              "Choice",
              "Message"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/dtos/responses/config.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects for chain configuration responses in a proxy service.",
            "key_types": [
              "SimulationChainConfig",
              "ChainConfig",
              "TokenCfg"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/dtos/responses/responses.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects for server responses and pagination handling.",
            "key_types": [
              "Paging",
              "Paginated[T]",
              "ServerResponseDTO[T]"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/handlers/dtos/responses/rpc.go": {
            "language": "Go",
            "purpose": "Defines the RpcResponse structure for handling RPC responses.",
            "key_types": [
              "RpcResponse"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/proxy/models": {
        "path": "internal/domains/proxy/models",
        "purpose": "Defines data models for handling proxy activities, token transactions, and related configurations in a proxy service.",
        "languages": {
          "Go": 10
        },
        "key_modules": [
          "activity.go",
          "balance.go",
          "coingecko.go",
          "common.go",
          "config.go",
          "dapp.go",
          "fiat.go",
          "nft.go",
          "profile.go",
          "simulate.go",
          "token.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing related data models into separate files for clarity and maintainability.",
        "file_summaries": {
          "internal/domains/proxy/models/activity.go": {
            "language": "Go",
            "purpose": "Defines data models for handling proxy activity and token transactions.",
            "key_types": [
              "Gas",
              "TxToken",
              "TokenBalanceDiff"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/models/balance.go": {
            "language": "Go",
            "purpose": "Defines data models for managing token and NFT allocations in a proxy service.",
            "key_types": [
              "Erc20Allocation",
              "NftAllocation",
              "PortfolioTokenItem"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/models/coingecko.go": {
            "language": "Go",
            "purpose": "Defines a model for managing Coingecko platform mappings and native tokens.",
            "key_types": [
              "CoingeckoPlatforms",
              "NewCoingeckoPlatforms",
              "Add"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/models/common.go": {
            "language": "Go",
            "purpose": "Defines user cursor management for pagination in a proxy model.",
            "key_types": [
              "Entities",
              "UserCursor",
              "FindUserCursor"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/models/config.go": {
            "language": "Go",
            "purpose": "Defines configuration models for blockchain proxy services.",
            "key_types": [
              "ChainCfg",
              "TokenCfg",
              "ChainProvider"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/models/dapp.go": {
            "language": "Go",
            "purpose": "Defines data models for DApp scanning results and site information.",
            "key_types": [
              "DAppScanResult",
              "DAppSite",
              "ScanStatus"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/proxy/models/fiat.go": {
            "language": "Go",
            "purpose": "Defines the TokenFiatInfo struct for representing fiat token information.",
            "key_types": [
              "TokenFiatInfo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/proxy/models/nft.go": {
            "language": "Go",
            "purpose": "Defines the CollectionDetail struct for NFT collection data.",
            "key_types": [
              "CollectionDetail"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/proxy/models/profile.go": {
            "language": "go",
            "purpose": "Defines a model for checking the existence of a profile based on an address.",
            "key_types": [
              "ProfileExistence"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/proxy/models/simulate.go": {
            "language": "Go",
            "purpose": "Defines simulation-related RPC methods and their constants for Ethereum transactions.",
            "key_types": [
              "SimulateRPCMethod",
              "SimulationStatus"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/models/token.go": {
            "language": "Go",
            "purpose": "Defines token models and related types for a proxy service.",
            "key_types": [
              "Token",
              "InternalToken",
              "TokenPlatformSource"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/proxy/repos": {
        "path": "internal/domains/proxy/repos",
        "purpose": "Responsible for managing database interactions related to DApp sites and tokens, including defining models and repository interfaces.",
        "languages": {
          "Go": 6
        },
        "key_modules": [
          "constants.go",
          "dappsite.go",
          "dappsite_model.go",
          "token.go",
          "token_model.go",
          "token_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a repository pattern, encapsulating database access logic and providing a clear interface for data operations.",
        "file_summaries": {
          "internal/domains/proxy/repos/constants.go": {
            "language": "Go",
            "purpose": "Defines constants for database column names and table names related to token repositories.",
            "key_types": [],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/proxy/repos/dappsite.go": {
            "language": "Go",
            "purpose": "This file defines a repository interface and implementation for managing DApp site records in a database.",
            "key_types": [
              "DAppSiteRepo",
              "dappSiteRepo",
              "NewDAppSiteRepo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/repos/dappsite_model.go": {
            "language": "Go",
            "purpose": "Defines the dappSite model and conversion functions for database interactions.",
            "key_types": [
              "dappSite",
              "fromDBDAppSite",
              "fromDAppSite"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/proxy/repos/token.go": {
            "language": "Go",
            "purpose": "Defines a repository interface and implementation for managing token data in a database.",
            "key_types": [
              "TokenRepo interface",
              "pgTokenRepo struct",
              "NewPgTokenRepo function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/repos/token_model.go": {
            "language": "Go",
            "purpose": "Defines the Token and TokenPlatform structures for managing cryptocurrency token data in a database.",
            "key_types": [
              "Token",
              "TokenPlatform",
              "fromDBTokenPlatforms"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/repos/token_test.go": {
            "language": "go",
            "purpose": "Unit tests for CRUD operations on the PgToken repository using a PostgreSQL container.",
            "key_types": [
              "TestNewPgTokenRepo_CRUD"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/proxy/services": {
        "path": "internal/domains/proxy/services",
        "purpose": "Responsible for providing various services related to user activity, balance management, AI processing, cryptocurrency data fetching, and decentralized application management.",
        "languages": {
          "Go": 14
        },
        "key_modules": [
          "activity.go",
          "ai.go",
          "balance.go",
          "coingecko.go",
          "config.go",
          "dapp.go",
          "fiat.go",
          "metrics.go",
          "profile.go",
          "provider.go",
          "rpc.go",
          "simulate.go",
          "token.go",
          "utils.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture pattern, where each file defines a specific service interface and its implementation, promoting modularity and separation of concerns.",
        "file_summaries": {
          "internal/domains/proxy/services/activity.go": {
            "language": "Go",
            "purpose": "Defines the ActivityService interface and its implementation for managing user activity and transfer history.",
            "key_types": [
              "ActivityService",
              "activityService",
              "NewActivityService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/ai.go": {
            "language": "Go",
            "purpose": "Implements an AI service for processing chat requests using OpenAI's API.",
            "key_types": [
              "AIService",
              "ai",
              "ProcessChat"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/balance.go": {
            "language": "Go",
            "purpose": "Defines the BalanceService interface and its implementation for managing portfolio balance and NFT items.",
            "key_types": [
              "BalanceService",
              "balanceService",
              "GetPortfolioBalance"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/coingecko.go": {
            "language": "Go",
            "purpose": "Defines the Coingecko service interface and its implementation for fetching cryptocurrency data.",
            "key_types": [
              "CoingeckoService",
              "NewCoingeckoService",
              "GetCoingeckoPlatforms"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/config.go": {
            "language": "Go",
            "purpose": "Defines configuration structures for various services including token management and caching settings.",
            "key_types": [
              "Config"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/proxy/services/dapp.go": {
            "language": "Go",
            "purpose": "Defines a service for managing decentralized application (DApp) sites, including retrieval, deletion, and scanning functionalities.",
            "key_types": [
              "DAppService",
              "dappService",
              "NewDAppService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/fiat.go": {
            "language": "Go",
            "purpose": "Implements a service for retrieving fiat information related to tokens.",
            "key_types": [
              "FiatService",
              "fiatService",
              "GetTokenFiatInfo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/metrics.go": {
            "language": "Go",
            "purpose": "This file defines metrics for monitoring provider and service performance in a wallet proxy.",
            "key_types": [
              "observeProviderFn",
              "observeServiceFn",
              "AllMetrics"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/profile.go": {
            "language": "Go",
            "purpose": "Provides a service to check the existence of user profiles.",
            "key_types": [
              "ProfileService",
              "profileService",
              "CheckProfileExistence"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/provider.go": {
            "language": "Go",
            "purpose": "Defines a service for managing multi-chain providers based on chain ID and method.",
            "key_types": [
              "ProviderService",
              "providerMap",
              "providerMapBuilder"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/rpc.go": {
            "language": "Go",
            "purpose": "Defines an RPC service for executing remote procedure calls.",
            "key_types": [
              "RpcService",
              "rpcService",
              "Execute"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/simulate.go": {
            "language": "Go",
            "purpose": "Implements a simulation service for processing RPC requests in a blockchain context.",
            "key_types": [
              "SimulationService",
              "blockaidSimulationService",
              "SimulateRPC"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/token.go": {
            "language": "Go",
            "purpose": "Defines the TokenService interface and its methods for managing token-related operations.",
            "key_types": [
              "TokenService",
              "caches",
              "tokenService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/utils.go": {
            "language": "Go",
            "purpose": "Utility functions for handling NFT items in a portfolio.",
            "key_types": [
              "combineNftItems",
              "inlineSortNftItems"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/proxy/services/providers": {
        "path": "internal/domains/proxy/services/providers",
        "purpose": "Responsible for defining various providers that interact with different blockchain APIs and manage multi-chain data.",
        "languages": {
          "Go": 9
        },
        "key_modules": [
          "alchemy.go",
          "cache.go",
          "chained.go",
          "getblock.go",
          "moralis.evm.go",
          "moralis.solana.go",
          "provider.go",
          "skynet.go",
          "utils.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each file defines a specific provider or utility related to blockchain interactions, promoting separation of concerns and reusability.",
        "file_summaries": {
          "internal/domains/proxy/services/providers/alchemy.go": {
            "language": "Go",
            "purpose": "Defines the AlchemyProvider for interacting with the Alchemy API in a multi-chain environment.",
            "key_types": [
              "AlchemyProvider",
              "AlchemyProviderName",
              "AlchemyProviderCreator"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/providers/cache.go": {
            "language": "Go",
            "purpose": "Provides caching functionality for portfolio-related data in a multi-chain provider context.",
            "key_types": [
              "CachedProvider",
              "GetPortfolioBalance",
              "GetTokenFiatInfo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/providers/chained.go": {
            "language": "Go",
            "purpose": "Defines circuit breaker settings and structures for handling provider methods in a proxy service.",
            "key_types": [
              "cbSetting",
              "providerCircuitBreakers",
              "newProviderCircuitBreakers"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/providers/getblock.go": {
            "language": "Go",
            "purpose": "Defines a provider for interacting with the GetBlock API to retrieve blockchain data.",
            "key_types": [
              "GetBlockProvider",
              "GetBlockProviderName",
              "GetBlockProviderCreator"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/providers/moralis.evm.go": {
            "language": "Go",
            "purpose": "Defines a Moralis provider for handling Ethereum Virtual Machine (EVM) interactions.",
            "key_types": [
              "moralisProvider",
              "EvmMoralisProviderCreator",
              "MoralisProviderName"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/providers/moralis.solana.go": {
            "language": "Go",
            "purpose": "Defines a provider for interacting with the Moralis API specifically for the Solana blockchain.",
            "key_types": [
              "MoralisSolanaProvider",
              "MoralisSolanaProviderName",
              "MoralisSolanaProviderCreator"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/providers/provider.go": {
            "language": "Go",
            "purpose": "Defines a multi-chain provider interface for handling portfolio and transaction data.",
            "key_types": [
              "MultiChainProvider",
              "PaginatedResponse",
              "activitiesListingResp"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/providers/skynet.go": {
            "language": "Go",
            "purpose": "Defines the Skynet provider for handling proxy services in a blockchain context.",
            "key_types": [
              "skynetProvider",
              "SkynetProviderCreator",
              "decodeResult"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/providers/utils.go": {
            "language": "Go",
            "purpose": "Utility functions for handling NFT metadata attributes in a proxy service.",
            "key_types": [
              "extractMetadataAttributes",
              "loopFetcher",
              "transferDecodeResult"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/proxy/services/testdata/decoder": {
        "path": "internal/domains/proxy/services/testdata/decoder",
        "purpose": "This folder/module is responsible for storing JSON files that contain decoded data and ABI signatures for smart contract function calls in a blockchain context.",
        "languages": {
          "JSON": 4
        },
        "key_modules": [
          "decode_call_01_decoded.json",
          "decode_call_01_signature.json",
          "decode_call_02_decoded.json",
          "decode_call_02_signature.json"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing files by their purpose related to decoding smart contract interactions and signatures.",
        "file_summaries": {
          "internal/domains/proxy/services/testdata/decoder/decode_call_01_decoded.json": {
            "language": "JSON",
            "purpose": "This file contains decoded data for a smart contract function call, specifically for a token transfer.",
            "key_types": [
              "function",
              "params",
              "signature"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/proxy/services/testdata/decoder/decode_call_01_signature.json": {
            "language": "JSON",
            "purpose": "Defines the ABI and signatures for the Ethereum 'transfer' function.",
            "key_types": [
              "function: transfer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/proxy/services/testdata/decoder/decode_call_02_decoded.json": {
            "language": "JSON",
            "purpose": "Contains decoded data for a proposal vote function in a blockchain context.",
            "key_types": [
              "castProposalVoteForCurrentNetwork"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/services/testdata/decoder/decode_call_02_signature.json": {
            "language": "JSON",
            "purpose": "Defines the ABI and signature for the function to cast a proposal vote in a blockchain context.",
            "key_types": [
              "castProposalVoteForCurrentNetwork"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/proxy/tasks": {
        "path": "internal/domains/proxy/tasks",
        "purpose": "Responsible for managing and processing token-related tasks for a proxy service, including crawling and generating tokens with rate limiting.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "skynet_tokens.go",
          "token_tasks_generator.go",
          "tokens.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each file encapsulates specific functionalities related to token management and processing.",
        "file_summaries": {
          "internal/domains/proxy/tasks/skynet_tokens.go": {
            "language": "Go",
            "purpose": "Handles the crawling of Skynet tokens with rate limiting and task processing.",
            "key_types": [
              "SkynetTokenCrawlerTaskHandler",
              "NewSkynetTokenCrawlerTaskHandler",
              "ProcessTask"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/tasks/token_tasks_generator.go": {
            "language": "Go",
            "purpose": "Generates and manages token tasks for a proxy service using asynchronous processing.",
            "key_types": [
              "TokenTaskGeneratorTaskHandler",
              "NewTokenTaskGeneratorTaskHandler",
              "tokenTaskGeneratorTaskConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/proxy/tasks/tokens.go": {
            "language": "Go",
            "purpose": "Handles token crawling tasks for a proxy service, managing token data updates and rate limiting.",
            "key_types": [
              "TokenCrawlerTask",
              "TokenCrawlerTaskHandler",
              "NewTokenCrawlerTaskHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/quest/consumers": {
        "path": "internal/domains/quest/consumers",
        "purpose": "Responsible for handling consumer check-in events and tracking metrics in a wallet quest application.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "metrics.go",
          "ronincheckin.go"
        ],
        "dependencies": [
          "Kafka"
        ],
        "architecture": "The folder follows a modular architecture pattern, focusing on event-driven processing and metrics tracking.",
        "file_summaries": {
          "internal/domains/quest/consumers/metrics.go": {
            "language": "Go",
            "purpose": "Defines and initializes metrics for tracking consumer check-ins in a wallet quest application.",
            "key_types": [
              "metricCollectors",
              "initMetrics"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/domains/quest/consumers/ronincheckin.go": {
            "language": "Go",
            "purpose": "Handles check-in events for Ronin contracts using Kafka consumer messages.",
            "key_types": [
              "RoninCheckInHandler",
              "contractsTrackingMap",
              "createContractsTrackingMap"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/quest/handlers": {
        "path": "internal/domains/quest/handlers",
        "purpose": "Defines HTTP handlers for managing quests, events, rewards, and related operations in a web service.",
        "languages": {
          "Go": 8
        },
        "key_modules": [
          "events.go",
          "generics.go",
          "pools.go",
          "quest.go",
          "quest_action.go",
          "reward.go",
          "shop.go",
          "user.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing HTTP handlers by domain functionality related to quests and user interactions.",
        "file_summaries": {
          "internal/domains/quest/handlers/events.go": {
            "language": "Go",
            "purpose": "Defines event handling for ongoing and internal events in a web service.",
            "key_types": [
              "EventHandler",
              "InternalEventHandler",
              "NewEventHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/quest/handlers/generics.go": {
            "language": "Go",
            "purpose": "Defines HTTP handlers for managing sponsors and user quests in a web service.",
            "key_types": [
              "InternalGenericsHandler",
              "GenericsHandler",
              "NewInternalGenericsHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/quest/handlers/pools.go": {
            "language": "Go",
            "purpose": "Defines HTTP handlers for managing quest pools in a gaming application.",
            "key_types": [
              "PoolHandler",
              "InternalPoolHandler",
              "NewPoolHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/quest/handlers/quest.go": {
            "language": "Go",
            "purpose": "Defines HTTP handlers for managing quests in the application.",
            "key_types": [
              "InternalQuestHandler",
              "QuestHandler",
              "NewInternalQuestHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/quest/handlers/quest_action.go": {
            "language": "Go",
            "purpose": "Defines HTTP handlers for quest-related actions in a web service.",
            "key_types": [
              "InternalActionHandler",
              "ActionHandler",
              "Setup"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/quest/handlers/reward.go": {
            "language": "Go",
            "purpose": "Defines HTTP handlers for managing rewards and quests in the application.",
            "key_types": [
              "InternalRewardHandler",
              "QuestRewardHandler",
              "NewInternalRewardHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/quest/handlers/shop.go": {
            "language": "Go",
            "purpose": "Defines HTTP handlers for shop-related routes in a web application.",
            "key_types": [
              "InternalShopHandler",
              "ShopHandler",
              "NewInternalShopHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/quest/handlers/user.go": {
            "language": "Go",
            "purpose": "Handles user-related operations for quests, rewards, and events in the application.",
            "key_types": [
              "InternalUserHandler",
              "PublicUserHandler",
              "NewInternalUserHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/quest/tasks": {
        "path": "internal/domains/quest/tasks",
        "purpose": "Handles retry logic for failed shop purchase completions.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "shop_retry.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on specific tasks related to the quest domain, encapsulating functionality related to shop purchase retries.",
        "file_summaries": {
          "internal/domains/quest/tasks/shop_retry.go": {
            "language": "Go",
            "purpose": "Handles retry logic for failed shop purchase completions.",
            "key_types": [
              "ShopRetryTaskHandler",
              "FailedPurchaseCompletion",
              "shopRetryTaskConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/scheduler/handlers": {
        "path": "internal/domains/scheduler/handlers",
        "purpose": "Handles scheduling tasks using an asynchronous queue.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "scheduler.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on handling scheduling tasks through a dedicated handler file.",
        "file_summaries": {
          "internal/domains/scheduler/handlers/scheduler.go": {
            "language": "Go",
            "purpose": "Handles scheduling tasks using an asynchronous queue.",
            "key_types": [
              "scheduler",
              "NewSchedulerHandler",
              "sendTask"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/scheduler/handlers/dtos/requests": {
        "path": "internal/domains/scheduler/handlers/dtos/requests",
        "purpose": "Defines data transfer objects for scheduling tasks.",
        "languages": {
          "go": 1
        },
        "key_modules": [
          "scheduler.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on data transfer objects (DTOs) that facilitate communication between different parts of the application.",
        "file_summaries": {
          "internal/domains/scheduler/handlers/dtos/requests/scheduler.go": {
            "language": "go",
            "purpose": "Defines data transfer objects for scheduling tasks.",
            "key_types": [
              "SendTask"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/trusted-domain/models": {
        "path": "internal/domains/trusted-domain/models",
        "purpose": "Defines the TrustedDomain model and methods to assess domain trustworthiness.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "trusted_domain.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a domain-driven design pattern, focusing on the TrustedDomain entity and its related logic.",
        "file_summaries": {
          "internal/domains/trusted-domain/models/trusted_domain.go": {
            "language": "Go",
            "purpose": "Defines the TrustedDomain model and methods to assess domain trustworthiness.",
            "key_types": [
              "TrustedDomain",
              "IsMalicious",
              "IsTrusted"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/trusted-domain/repos": {
        "path": "internal/domains/trusted-domain/repos",
        "purpose": "Responsible for managing trusted domains in a database using GORM.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "trusted_domain.go",
          "trusted_domain_model.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a repository pattern, encapsulating database interactions for trusted domains.",
        "file_summaries": {
          "internal/domains/trusted-domain/repos/trusted_domain.go": {
            "language": "Go",
            "purpose": "Defines a repository for managing trusted domains in a database using GORM.",
            "key_types": [
              "TrustedDomainRepo",
              "trustedDomainRepo",
              "Find"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/trusted-domain/repos/trusted_domain_model.go": {
            "language": "Go",
            "purpose": "Defines the trustedDomain model and conversion functions for database interactions.",
            "key_types": [
              "trustedDomain",
              "fromDBTrustedDomain",
              "fromDBTrustedDomains"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/trusted-domain/services": {
        "path": "internal/domains/trusted-domain/services",
        "purpose": "Provides services related to matching URLs against trusted domains.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "trusted_domain.go",
          "trusted_domain_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture pattern, focusing on domain-specific services and their corresponding tests.",
        "file_summaries": {
          "internal/domains/trusted-domain/services/trusted_domain.go": {
            "language": "Go",
            "purpose": "Provides a service for matching URLs against trusted domains.",
            "key_types": [
              "TrustedDomainService",
              "trustedDomainService",
              "MatchURL"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/trusted-domain/services/trusted_domain_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the generateWildcardDomains function.",
            "key_types": [
              "Test_generateWildcardDomains"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/web3/categorize": {
        "path": "internal/domains/web3/categorize",
        "purpose": "Responsible for categorizing various types of transactions in a web3 context, including approvals, deposits, swaps, and NFTs.",
        "languages": {
          "Go": 7
        },
        "key_modules": [
          "approval.go",
          "categorize.go",
          "deposit.go",
          "helper.go",
          "mkp.go",
          "swap.go",
          "transfer.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each file handles specific categorization logic for different transaction types.",
        "file_summaries": {
          "internal/domains/web3/categorize/approval.go": {
            "language": "Go",
            "purpose": "Categorizes transaction approvals in a web3 context.",
            "key_types": [
              "Approval.Categorize"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/categorize/categorize.go": {
            "language": "Go",
            "purpose": "Categorizes transactions based on user input and transaction details.",
            "key_types": [
              "Input",
              "TransactionCategorize",
              "Categorize"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/categorize/deposit.go": {
            "language": "Go",
            "purpose": "Categorizes deposit transactions based on input signatures and transfer details.",
            "key_types": [
              "Deposit.Categorize"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/categorize/helper.go": {
            "language": "Go",
            "purpose": "This file provides helper functions for categorizing and managing balances of tokens and NFTs in a web3 context.",
            "key_types": [
              "balance",
              "countTokens",
              "computeBalance"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/categorize/mkp.go": {
            "language": "Go",
            "purpose": "Categorizes NFT transactions based on user balance and transfers.",
            "key_types": [
              "Marketplace",
              "Categorize"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/categorize/swap.go": {
            "language": "Go",
            "purpose": "Categorizes transactions related to swaps in a web3 context.",
            "key_types": [
              "Swap",
              "Categorize"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/categorize/transfer.go": {
            "language": "Go",
            "purpose": "Categorizes cryptocurrency transfer transactions based on user actions and balances.",
            "key_types": [
              "Transfer",
              "SelfTransfer",
              "Categorize"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/web3/handlers": {
        "path": "internal/domains/web3/handlers",
        "purpose": "Handles HTTP requests related to decoding Ethereum transactions and managing signatures in a web3 context.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "decode.go",
          "signature.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each file handles specific aspects of web3 functionality related to HTTP requests.",
        "file_summaries": {
          "internal/domains/web3/handlers/decode.go": {
            "language": "Go",
            "purpose": "Handles decoding of Ethereum transactions, calls, and logs via HTTP endpoints.",
            "key_types": [
              "decodeHandler",
              "decodeTx",
              "decodeCall"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/handlers/signature.go": {
            "language": "Go",
            "purpose": "Handles HTTP requests for managing signatures in a web3 context.",
            "key_types": [
              "signatureHandler",
              "NewSignatureHandler",
              "Setup"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/web3/handlers/dtos/requests": {
        "path": "internal/domains/web3/handlers/dtos/requests",
        "purpose": "Responsible for defining data transfer objects related to Ethereum request handling, including decoding requests and managing signatures.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "decode.go",
          "signature.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing related data transfer objects into separate files for clarity and maintainability.",
        "file_summaries": {
          "internal/domains/web3/handlers/dtos/requests/decode.go": {
            "language": "Go",
            "purpose": "Defines data transfer objects for decoding Ethereum-related requests.",
            "key_types": [
              "DecodeCall",
              "DecodeLog",
              "DecodeTx"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/handlers/dtos/requests/signature.go": {
            "language": "go",
            "purpose": "Defines request data transfer objects for handling signatures in a web3 context.",
            "key_types": [
              "GetSignatures",
              "GetSignatureCategories",
              "UpsertSignatures"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/domains/web3/models": {
        "path": "internal/domains/web3/models",
        "purpose": "Responsible for defining data structures and models related to blockchain transactions, signatures, and decoding parameters in a web3 context.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "decode.go",
          "signature.go",
          "transaction.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing related data models and structures into separate files for clarity and maintainability.",
        "file_summaries": {
          "internal/domains/web3/models/decode.go": {
            "language": "Go",
            "purpose": "Defines data structures for decoding blockchain transaction parameters and tokens.",
            "key_types": [
              "Token",
              "DecodedParam",
              "Decoded"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/models/signature.go": {
            "language": "Go",
            "purpose": "Defines data models for handling blockchain signatures and their associated categories.",
            "key_types": [
              "Signature",
              "Category",
              "TransactionCategory"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/models/transaction.go": {
            "language": "Go",
            "purpose": "Defines data models for transactions, transfers, and approvals in a web3 context.",
            "key_types": [
              "Transfer",
              "Approval",
              "SimpleTx"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/web3/repos": {
        "path": "internal/domains/web3/repos",
        "purpose": "Responsible for managing Ethereum signatures in a PostgreSQL database through repository interfaces and models.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "signature.go",
          "signature_model.go",
          "signature_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a repository pattern, encapsulating data access logic and providing a clear interface for database interactions.",
        "file_summaries": {
          "internal/domains/web3/repos/signature.go": {
            "language": "Go",
            "purpose": "Defines a repository interface and implementation for managing Ethereum signatures in a PostgreSQL database.",
            "key_types": [
              "SignatureRepo",
              "pgSignatureRepo",
              "NewPgSignatureRepo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/repos/signature_model.go": {
            "language": "Go",
            "purpose": "Defines the Signature model and conversion functions for database interactions in a web3 context.",
            "key_types": [
              "Signature",
              "fromDBSignatures",
              "fromSignature"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/repos/signature_test.go": {
            "language": "Go",
            "purpose": "Unit tests for CRUD operations on the PgSignatureRepo using a PostgreSQL container.",
            "key_types": [
              "TestPgSignatureRepo_CRUD"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/web3/services": {
        "path": "internal/domains/web3/services",
        "purpose": "Responsible for providing services related to Ethereum transactions, including decoding, normalizing parameters, managing digital signatures, and monitoring service performance.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "decoder.go",
          "decoder_normalizer.go",
          "decoder_test.go",
          "metrics.go",
          "signature.go"
        ],
        "dependencies": [
          "Prometheus"
        ],
        "architecture": "The folder follows a modular architecture pattern, where each file encapsulates specific functionalities related to Ethereum services, promoting separation of concerns and maintainability.",
        "file_summaries": {
          "internal/domains/web3/services/decoder.go": {
            "language": "Go",
            "purpose": "Provides a service for decoding Ethereum transactions, calls, and events.",
            "key_types": [
              "DecoderService",
              "decoderService",
              "NewDecoderService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/services/decoder_normalizer.go": {
            "language": "Go",
            "purpose": "Normalizes decoded parameters for Ethereum transactions.",
            "key_types": [
              "normalizeDecodedParams",
              "normalizeValue",
              "normalizeMap"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/services/decoder_test.go": {
            "language": "Go",
            "purpose": "Unit tests for decoding call signatures in the web3 service.",
            "key_types": [
              "decoderSignature",
              "decodeCallTestcase",
              "loadDecodeCallTestCases"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/services/metrics.go": {
            "language": "Go",
            "purpose": "This file defines metrics for monitoring service performance using Prometheus.",
            "key_types": [
              "observeServiceFn",
              "histogramVec",
              "counterVec"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/services/signature.go": {
            "language": "Go",
            "purpose": "Provides a service for managing digital signatures in a web3 context.",
            "key_types": [
              "SignatureService",
              "signatureService",
              "Upsert"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/domains/web3/tasks": {
        "path": "internal/domains/web3/tasks",
        "purpose": "Responsible for generating and handling tasks related to crawling ABI data from Ethereum contracts.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "abi_crawl_task_generator.go",
          "abi_crawler.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating functionality related to ABI data crawling into distinct files for task generation and processing.",
        "file_summaries": {
          "internal/domains/web3/tasks/abi_crawl_task_generator.go": {
            "language": "Go",
            "purpose": "Generates and enqueues tasks for crawling ABI data from contracts using an explorer client.",
            "key_types": [
              "ABICrawlTaskGeneratorTaskHandler",
              "NewABICrawlTaskGeneratorTaskHandler",
              "ProcessTask"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/domains/web3/tasks/abi_crawler.go": {
            "language": "Go",
            "purpose": "Handles tasks related to crawling ABI data from Ethereum contracts.",
            "key_types": [
              "ABICrawlerTaskHandler",
              "NewABICrawlerTaskHandler",
              "ProcessTask"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/enums": {
        "path": "internal/enums",
        "purpose": "Defines enumerations and utility functions for various device-related statuses and platforms.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "deviceplatform.go",
          "devicestatus.go",
          "enums.go",
          "pushnotification.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing related enumerations and utility functions into separate files for clarity and maintainability.",
        "file_summaries": {
          "internal/enums/deviceplatform.go": {
            "language": "Go",
            "purpose": "Defines an enumeration for different device platforms.",
            "key_types": [
              "DevicePlatform",
              "Value()",
              "Values()"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/enums/devicestatus.go": {
            "language": "go",
            "purpose": "Defines an enumeration for device statuses and provides utility methods for their representation.",
            "key_types": [
              "DeviceStatus",
              "Value()",
              "Values()"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/enums/enums.go": {
            "language": "Go",
            "purpose": "Provides utility functions for handling enums, including conversion and JSON marshaling/unmarshaling.",
            "key_types": [
              "StringToEnum",
              "UnmarshalJSON",
              "EnumFromString"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/enums/pushnotification.go": {
            "language": "Go",
            "purpose": "Defines enums for push notification providers and recipients.",
            "key_types": [
              "NotificationPushProvider",
              "PushRecipient",
              "RecipientFilterField"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/enums/bridge": {
        "path": "internal/enums/bridge",
        "purpose": "Defines enumerations related to trading types used in a trading system.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "trade_type.go",
          "trade_type_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating related enums and their tests for maintainability and clarity.",
        "file_summaries": {
          "internal/enums/bridge/trade_type.go": {
            "language": "Go",
            "purpose": "Defines an enumeration for trade types used in a trading system.",
            "key_types": [
              "TradeType",
              "TradeTypeFromStr",
              "IsValid"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/enums/bridge/trade_type_test.go": {
            "language": "Go",
            "purpose": "Unit tests for unmarshalling TradeType from JSON.",
            "key_types": [
              "TestTradeType_UnmarshalJSON"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/enums/quest_center": {
        "path": "internal/enums/quest_center",
        "purpose": "Defines various enums and types related to quest management in a gaming application.",
        "languages": {
          "Go": 11
        },
        "key_modules": [
          "action_v2.go",
          "event.go",
          "log_param.go",
          "op_action_v2.go",
          "quest_pool.go",
          "quest_status_v2.go",
          "reward.go",
          "user.go",
          "user_quest_v2.go",
          "user_reward_v2.go",
          "user_tier.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing enums and types related to quest functionality into separate files for maintainability and clarity.",
        "file_summaries": {
          "internal/enums/quest_center/action_v2.go": {
            "language": "Go",
            "purpose": "Defines quest action enums for a gaming application.",
            "key_types": [
              "QuestAction",
              "IsValid",
              "QuestActionFromStr"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/enums/quest_center/event.go": {
            "language": "Go",
            "purpose": "Defines an enumeration for event statuses in the quest center.",
            "key_types": [
              "EventStatus"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/enums/quest_center/log_param.go": {
            "language": "Go",
            "purpose": "Defines and manages log parameter types for quest-related functionality.",
            "key_types": [
              "LogParamType",
              "LogParamTypeFromStr",
              "IsValid"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/enums/quest_center/op_action_v2.go": {
            "language": "Go",
            "purpose": "Defines operation actions for quest management in an enum format.",
            "key_types": [
              "OpAction",
              "ActionFromString",
              "Scan"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/enums/quest_center/quest_pool.go": {
            "language": "Go",
            "purpose": "Defines quest pool tiers and provides utility functions for handling them.",
            "key_types": [
              "QuestPoolTier",
              "QuestPoolTierFromString",
              "IsValid"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/enums/quest_center/quest_status_v2.go": {
            "language": "Go",
            "purpose": "Defines quest status enums and a state machine for managing quest states.",
            "key_types": [
              "QuestStatusV2",
              "QuestStateMachine",
              "QuestStatusV2FromString"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/enums/quest_center/reward.go": {
            "language": "Go",
            "purpose": "Defines enums for reward distribution and resource types with associated methods.",
            "key_types": [
              "RewardDistribution",
              "ResourceType",
              "RewardDistributionFromStr"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/enums/quest_center/user.go": {
            "language": "Go",
            "purpose": "Defines user types for a quest center and provides utility functions for handling them.",
            "key_types": [
              "UserType",
              "UserTypeFromString",
              "IsValid"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/enums/quest_center/user_quest_v2.go": {
            "language": "Go",
            "purpose": "Defines user quest status enums and related functionalities for a quest system.",
            "key_types": [
              "UserQuestStatus",
              "UserQuestStatusFromStr",
              "UserQuestFilter"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/enums/quest_center/user_reward_v2.go": {
            "language": "Go",
            "purpose": "Defines user reward statuses and provides methods for handling them.",
            "key_types": [
              "UserRewardStatus",
              "UserRewardStatusFromStr",
              "MarshalJSON"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/enums/quest_center/user_tier.go": {
            "language": "Go",
            "purpose": "Defines user tiers for a quest system and provides methods for handling them.",
            "key_types": [
              "UserTier",
              "UserTierFromString",
              "IsValid"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/handlers": {
        "path": "internal/handlers",
        "purpose": "This folder is responsible for handling various operations related to quests, events, users, rewards, and sponsors within the application.",
        "languages": {
          "Go": 20
        },
        "key_modules": [
          "default.go",
          "errors.go",
          "event.go",
          "history.go",
          "quest.go",
          "quest_action.go",
          "quest_helper.go",
          "quest_pool.go",
          "quest_reward.go",
          "reward.go",
          "shop.go",
          "sponsor.go",
          "user.go",
          "user_event.go",
          "user_event_helper.go",
          "user_quest.go",
          "user_quest_helper.go",
          "user_reward.go",
          "user_reward_helper.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each file handles specific functionalities related to different aspects of the application, promoting separation of concerns and maintainability.",
        "file_summaries": {
          "internal/handlers/default.go": {
            "language": "Go",
            "purpose": "Defines a health check handler for an application using Echo framework.",
            "key_types": [
              "NewHealthCheck"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/handlers/errors.go": {
            "language": "Go",
            "purpose": "Defines error variables related to quest and participant operations in the application.",
            "key_types": [
              "ErrCannotBulkInsert",
              "ErrNoValidRecord",
              "ErrInternalServer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/handlers/event.go": {
            "language": "Go",
            "purpose": "Handles event-related operations such as creating, deleting, and listing events.",
            "key_types": [
              "EventCfg",
              "Event interface",
              "event struct"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/helpers.go": {
            "language": "Go",
            "purpose": "Provides error handling utilities for logging and wrapping errors.",
            "key_types": [
              "wrapError"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/handlers/history.go": {
            "language": "Go",
            "purpose": "Handles creation of history records for actions performed in the application.",
            "key_types": [
              "CreateHistoryRecord",
              "createHistoryV2",
              "createHistoryParams"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/quest.go": {
            "language": "Go",
            "purpose": "Handles quest-related operations and interactions in the application.",
            "key_types": [
              "Quest interface",
              "UpsertQuest",
              "ListQuests"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/quest_action.go": {
            "language": "Go",
            "purpose": "Handles quest-related actions and activities in the application.",
            "key_types": [
              "QuestAction interface",
              "CreateActivityGuidance",
              "UpdateActivityGuidance"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/quest_helper.go": {
            "language": "Go",
            "purpose": "Handles quest-related operations and validations for the application.",
            "key_types": [
              "wrapErr",
              "wrapNotFound",
              "validateActions"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/quest_pool.go": {
            "language": "Go",
            "purpose": "Handles quest pool operations including upserting, deleting, and listing quest pools.",
            "key_types": [
              "QuestPool interface",
              "questPool struct",
              "NewQuestPoolHandler function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/quest_reward.go": {
            "language": "Go",
            "purpose": "Handles quest reward retrieval and management.",
            "key_types": [
              "QuestReward interface",
              "questReward struct",
              "GetActives function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/reward.go": {
            "language": "Go",
            "purpose": "Handles reward-related operations for a quest system.",
            "key_types": [
              "Reward interface",
              "GetClaimRewardSig",
              "UpsertQuestRewards"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/shop.go": {
            "language": "Go",
            "purpose": "Defines the Shop interface and its methods for managing shop categories, tiers, items, and user inventory.",
            "key_types": [
              "Shop interface",
              "shop struct",
              "NewShopHandler function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/sponsor.go": {
            "language": "Go",
            "purpose": "Handles sponsor-related operations such as upserting, listing, and deleting sponsors.",
            "key_types": [
              "Sponsor interface",
              "sponsor struct",
              "NewSponsorHandler function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/user.go": {
            "language": "Go",
            "purpose": "Handles user-related operations, specifically finding users by their addresses.",
            "key_types": [
              "User interface",
              "user struct",
              "FindUsers function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/user_event.go": {
            "language": "Go",
            "purpose": "Handles user event-related operations such as verifying premium status and joining events.",
            "key_types": [
              "UserEvent interface",
              "userEvent struct",
              "NewUserEventHandler function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/user_event_helper.go": {
            "language": "Go",
            "purpose": "Handles user event data and interactions within the quest center service.",
            "key_types": [
              "userEvData",
              "analyticData",
              "joinEvData"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/user_quest.go": {
            "language": "Go",
            "purpose": "Handles user quest operations including taking quests and exporting audit results.",
            "key_types": [
              "UserQuest interface",
              "ExportAuditResult",
              "TakeQuest"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/user_quest_helper.go": {
            "language": "Go",
            "purpose": "Handles user quest-related functionalities including reward distribution and action verification.",
            "key_types": [
              "distributePoint",
              "findTargetAction",
              "isQuestAvailable"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/user_reward.go": {
            "language": "Go",
            "purpose": "Handles user reward functionalities including listing, rejecting, and distributing rewards.",
            "key_types": [
              "UserReward interface",
              "userReward struct",
              "NewUserRewardHandler function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/user_reward_helper.go": {
            "language": "Go",
            "purpose": "Handles user reward distribution and eligibility for quests.",
            "key_types": [
              "findEligibleUserRewards",
              "queueDistributeOrderV4",
              "getOnChainAmounts"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/handlers/cms": {
        "path": "internal/handlers/cms",
        "purpose": "Handles banner-related operations for a CMS, including creation, editing, and retrieval of banners.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "banner.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on specific functionalities related to the CMS, encapsulating related operations and types within dedicated files.",
        "file_summaries": {
          "internal/handlers/cms/banner.go": {
            "language": "Go",
            "purpose": "Handles banner-related operations for a CMS, including creation, editing, and retrieval of banners.",
            "key_types": [
              "BannerHandler",
              "bannerHandler",
              "NewBannerHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/handlers/discovery": {
        "path": "internal/handlers/discovery",
        "purpose": "Responsible for handling various operations related to discovery features such as announcements, events, banners, products, and tokens.",
        "languages": {
          "Go": 10
        },
        "key_modules": [
          "announcement.go",
          "event.go",
          "feature_banner.go",
          "generic.go",
          "helpers.go",
          "home_banner.go",
          "layout.go",
          "product.go",
          "product.helper.go",
          "tokens.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each file handles specific functionalities related to discovery, promoting separation of concerns and maintainability.",
        "file_summaries": {
          "internal/handlers/discovery/announcement.go": {
            "language": "Go",
            "purpose": "Handles announcement-related operations such as creating, deleting, and listing banners.",
            "key_types": [
              "Announcement",
              "announcement",
              "NewAnnouncementHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/discovery/event.go": {
            "language": "Go",
            "purpose": "Handles event-related operations for the discovery service.",
            "key_types": [
              "Event interface",
              "event struct",
              "CreateEventItem function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/discovery/feature_banner.go": {
            "language": "Go",
            "purpose": "Handles feature banner operations including creation, deletion, and retrieval by version.",
            "key_types": [
              "FeatureBanner interface",
              "featureBanner struct",
              "NewFeatureBannerHandler function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/discovery/generic.go": {
            "language": "Go",
            "purpose": "Handles discovery-related functionalities such as listing social platforms, studios, categories, and image uploads.",
            "key_types": [
              "Generic interface",
              "generic struct",
              "ProvideGenericHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/discovery/helpers.go": {
            "language": "Go",
            "purpose": "Provides helper functions for validating and checking duplicates in widget layouts for discovery handlers.",
            "key_types": [
              "isWidgetDuplicated",
              "isWidgetItemDuplicated",
              "validateWidgetLogic"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/discovery/home_banner.go": {
            "language": "Go",
            "purpose": "Handles operations related to home banners in the discovery module.",
            "key_types": [
              "HomeBanner interface",
              "homeBanner struct",
              "NewHomeBanner function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/discovery/layout.go": {
            "language": "Go",
            "purpose": "Handles discovery-related functionalities and validations for widgets in the application.",
            "key_types": [
              "ErrInvalidProductName",
              "BENTO_REQUIRED_ITEM_LEN",
              "discovery_services"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/discovery/product.go": {
            "language": "Go",
            "purpose": "Handles product-related operations for the discovery service.",
            "key_types": [
              "Product interface",
              "product struct",
              "NewProductHandler function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/discovery/product.helper.go": {
            "language": "Go",
            "purpose": "Handles mapping and copying of product and social platform data for discovery features.",
            "key_types": [
              "mapPlatformIDToSocial",
              "copyListDappResp",
              "copyGetProductByIDResp"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/handlers/discovery/tokens.go": {
            "language": "Go",
            "purpose": "Handles requests for trending tokens in the discovery domain.",
            "key_types": [
              "Tokens interface",
              "tokens struct",
              "NewTokensHandler function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras": {
        "path": "internal/infras",
        "purpose": "Responsible for implementing infrastructure components, specifically a Kafka batch consumer for processing messages.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "kafka_consumer.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on encapsulating infrastructure-related functionalities.",
        "file_summaries": {
          "internal/infras/kafka_consumer.go": {
            "language": "Go",
            "purpose": "Implements a Kafka batch consumer for processing messages in batches.",
            "key_types": [
              "KafkaBatchConsumer",
              "kafkaBatchConsumer",
              "NewKafkaBatchConsumer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/alchemy": {
        "path": "internal/infras/alchemy",
        "purpose": "This folder/module is responsible for interacting with the Alchemy API and managing blockchain-related data structures.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating API client functionality and data models related to blockchain interactions.",
        "file_summaries": {
          "internal/infras/alchemy/client.go": {
            "language": "Go",
            "purpose": "This file implements a client for interacting with the Alchemy API to fetch token balances and NFT collections.",
            "key_types": [
              "Config",
              "Client",
              "clientHTTP"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/alchemy/models.go": {
            "language": "Go",
            "purpose": "Defines data structures and types for managing token prices, balances, and metadata in a blockchain context.",
            "key_types": [
              "TokenPrice",
              "TokenMetadata",
              "TokenBalance"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/blockaid": {
        "path": "internal/infras/blockaid",
        "purpose": "This folder/module is responsible for providing configuration, client initialization, and data structures for interacting with the BlockAid API and blockchain asset validation.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "blockaid.go",
          "client.go",
          "models.go",
          "models_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating functionality related to the BlockAid API and blockchain interactions within distinct files, promoting separation of concerns.",
        "file_summaries": {
          "internal/infras/blockaid/blockaid.go": {
            "language": "Go",
            "purpose": "This file provides configuration and client initialization for interacting with the BlockAid API.",
            "key_types": [
              "Config",
              "NewBlockAidClient",
              "NewBlockAidSiteService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/blockaid/client.go": {
            "language": "Go",
            "purpose": "This file implements a client for interacting with a blockchain JSON-RPC API.",
            "key_types": [
              "Client interface",
              "NewClient function",
              "httpClient struct"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/blockaid/models.go": {
            "language": "Go",
            "purpose": "Defines data structures and types for handling blockchain asset validation and features.",
            "key_types": [
              "Feature",
              "Validation",
              "Params"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/blockaid/models_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the TokenID JSON unmarshalling functionality.",
            "key_types": [
              "TestTokenID_UnmarshalJSON"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/infras/coinbase": {
        "path": "internal/infras/coinbase",
        "purpose": "This folder/module is responsible for integrating with the Coinbase API, handling client interactions and data structures for token requests and responses.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating API client functionality and data models related to the Coinbase integration.",
        "file_summaries": {
          "internal/infras/coinbase/client.go": {
            "language": "Go",
            "purpose": "This file implements a client for interacting with the Coinbase API, including JWT generation and path retrieval.",
            "key_types": [
              "Config",
              "Client",
              "client"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/coinbase/models.go": {
            "language": "Go",
            "purpose": "Defines data structures for handling onramp token requests and responses in the Coinbase integration.",
            "key_types": [
              "Address",
              "OnrampTokenReq",
              "OnrampTokenResp"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/infras/coingecko": {
        "path": "internal/infras/coingecko",
        "purpose": "Defines a client for interacting with the CoinGecko API to fetch cryptocurrency data.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "client.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the CoinGecko API client functionality within a single file.",
        "file_summaries": {
          "internal/infras/coingecko/client.go": {
            "language": "Go",
            "purpose": "Defines a client for interacting with the CoinGecko API to fetch cryptocurrency data.",
            "key_types": [
              "Client interface",
              "Config struct",
              "NewClient function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/devicemanager": {
        "path": "internal/infras/devicemanager",
        "purpose": "This folder/module is responsible for managing device-related operations within a service.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating device management functionality through client and model definitions.",
        "file_summaries": {
          "internal/infras/devicemanager/client.go": {
            "language": "Go",
            "purpose": "This file implements an internal client for managing device-related operations in a service.",
            "key_types": [
              "Config",
              "InternalClient",
              "internalClientHTTP"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/devicemanager/models.go": {
            "language": "go",
            "purpose": "Defines models and structures for managing devices in the device manager service.",
            "key_types": [
              "Device",
              "ListDevicesRequest",
              "SliceResponse"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/exchangerate": {
        "path": "internal/infras/exchangerate",
        "purpose": "This folder/module is responsible for handling exchange rate data and interacting with external APIs to fetch token prices.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, separating concerns between API client implementation and data models.",
        "file_summaries": {
          "internal/infras/exchangerate/client.go": {
            "language": "Go",
            "purpose": "This file implements a client for fetching token prices from an external exchange rate API.",
            "key_types": [
              "Config",
              "Client",
              "clientHTTP"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/exchangerate/models.go": {
            "language": "go",
            "purpose": "Defines data structures for handling exchange rate prices.",
            "key_types": [
              "Price",
              "Response"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/infras/explorer": {
        "path": "internal/infras/explorer",
        "purpose": "This folder/module is responsible for interacting with a blockchain explorer API, managing data models, and handling contract information.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating functionality related to blockchain exploration and data handling in separate files.",
        "file_summaries": {
          "internal/infras/explorer/client.go": {
            "language": "Go",
            "purpose": "This file implements a client for interacting with a blockchain explorer API to list contracts and retrieve contract ABIs.",
            "key_types": [
              "Config",
              "Client",
              "client"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/explorer/models.go": {
            "language": "Go",
            "purpose": "Defines data models for handling responses and contract information in the explorer module.",
            "key_types": [
              "Response",
              "ListResult",
              "Contract"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/geckoterminal": {
        "path": "internal/infras/geckoterminal",
        "purpose": "Responsible for interacting with a decentralized exchange's pool data and handling trading pool information.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating client interactions and data models related to trading pools.",
        "file_summaries": {
          "internal/infras/geckoterminal/client.go": {
            "language": "Go",
            "purpose": "Defines a client for interacting with a decentralized exchange's pool data and OHLCV charts.",
            "key_types": [
              "Config",
              "Client",
              "clientHTTP"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/geckoterminal/models.go": {
            "language": "Go",
            "purpose": "Defines data models for handling trading pool information and time ranges in the geckoterminal package.",
            "key_types": [
              "TimeRange",
              "TrendingDimension",
              "PoolResp"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/getblock": {
        "path": "internal/infras/getblock",
        "purpose": "Responsible for interacting with a blockchain node to retrieve block information.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating functionality related to blockchain interactions in a dedicated package.",
        "file_summaries": {
          "internal/infras/getblock/client.go": {
            "language": "Go",
            "purpose": "Provides a client for executing RPC calls to a blockchain node.",
            "key_types": [
              "Client interface",
              "client struct",
              "NewGetBlockCli function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/getblock/models.go": {
            "language": "Go",
            "purpose": "Defines models for the getblock package.",
            "key_types": [
              "Block",
              "Transaction",
              "Header"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/geth": {
        "path": "internal/infras/geth",
        "purpose": "Implements a client for interacting with Ethereum smart contracts to retrieve user balances.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "client.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating functionality related to Ethereum client interactions.",
        "file_summaries": {
          "internal/infras/geth/client.go": {
            "language": "Go",
            "purpose": "Implements a client for interacting with Ethereum smart contracts to retrieve user balances.",
            "key_types": [
              "Client interface",
              "client struct",
              "GetBalanceOf function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/indexer": {
        "path": "internal/infras/indexer",
        "purpose": "This folder/module is responsible for implementing a GraphQL client and defining request structures for querying staked amounts.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating client functionality and data models related to GraphQL requests.",
        "file_summaries": {
          "internal/infras/indexer/client.go": {
            "language": "Go",
            "purpose": "This file implements a GraphQL client for fetching staked amounts of Ron from a specified endpoint.",
            "key_types": [
              "Config",
              "Client",
              "client"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/indexer/models.go": {
            "language": "Go",
            "purpose": "Defines GraphQL request structures for querying staked amounts by user address.",
            "key_types": [
              "GraphQLRequest",
              "StakedAmountByAddressRequest",
              "StakedAmountResponse"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/katana": {
        "path": "internal/infras/katana",
        "purpose": "This folder/module is responsible for implementing the Katana API client and handling token swap requests in a blockchain context.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "client.go",
          "client_test.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the client implementation and its related data models, with a focus on testability through unit tests.",
        "file_summaries": {
          "internal/infras/katana/client.go": {
            "language": "Go",
            "purpose": "This file implements a client for interacting with the Katana API, providing methods to fetch quotes and token information.",
            "key_types": [
              "Config",
              "Client",
              "clientHTTP"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/katana/client_test.go": {
            "language": "go",
            "purpose": "Unit tests for the Katana client functionality.",
            "key_types": [
              "TestKatanaClient",
              "NewClient",
              "GetQuoteRequest"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/katana/models.go": {
            "language": "Go",
            "purpose": "Defines data structures and methods for handling token swap requests in a blockchain context.",
            "key_types": [
              "GetQuoteRequest",
              "tokenAddress",
              "AsQueryParams"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/kyberswap": {
        "path": "internal/infras/kyberswap",
        "purpose": "Responsible for providing a client interface to interact with the KyberSwap API for token swaps and related functionalities.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "client.go",
          "client_test.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the client logic and models for the KyberSwap API, with separate files for implementation and testing.",
        "file_summaries": {
          "internal/infras/kyberswap/client.go": {
            "language": "Go",
            "purpose": "Defines a client for interacting with the KyberSwap API for token swaps and related functionalities.",
            "key_types": [
              "Config",
              "Client",
              "clientHTTP"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/kyberswap/client_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the KyberSwap client functionality.",
            "key_types": [
              "TestGetRoute",
              "NewClient",
              "SwapRoute"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/kyberswap/models.go": {
            "language": "Go",
            "purpose": "Defines models and request structures for interacting with the KyberSwap protocol.",
            "key_types": [
              "ChargeFeeBy",
              "ExtraFee",
              "GetRoutesRequest"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/moralis": {
        "path": "internal/infras/moralis",
        "purpose": "Responsible for defining the EVM client interface and data models for interacting with Moralis API endpoints and handling blockchain tokens.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating client interactions and data models related to the Moralis API.",
        "file_summaries": {
          "internal/infras/moralis/client.go": {
            "language": "Go",
            "purpose": "Defines the EVM client interface and configuration for interacting with Moralis API endpoints.",
            "key_types": [
              "evmPathConfig",
              "EvmCli",
              "GetFungibleBalance"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/moralis/models.go": {
            "language": "Go",
            "purpose": "Defines data models for handling fungible and NFT tokens in a blockchain context.",
            "key_types": [
              "RequestBase",
              "RequestPagination",
              "FungibleToken"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/moralis_solana": {
        "path": "internal/infras/moralis_solana",
        "purpose": "Responsible for providing a client implementation and data models for interacting with the Moralis Solana API.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating client logic and data models for the Moralis Solana API.",
        "file_summaries": {
          "internal/infras/moralis_solana/client.go": {
            "language": "Go",
            "purpose": "Client implementation for interacting with the Moralis Solana API to retrieve balances and NFT items.",
            "key_types": [
              "Client",
              "Config",
              "client"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/moralis_solana/models.go": {
            "language": "Go",
            "purpose": "Defines data models for interacting with the Moralis Solana API.",
            "key_types": [
              "ErrorMessage",
              "GetAllTokenBalance",
              "GetFungibleBalance"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/openai": {
        "path": "internal/infras/openai",
        "purpose": "This folder/module is responsible for implementing a client to interact with the OpenAI API, including handling requests and responses.",
        "languages": {
          "go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the OpenAI API client and its data models in separate files for better organization and maintainability.",
        "file_summaries": {
          "internal/infras/openai/client.go": {
            "language": "go",
            "purpose": "This file implements a client for interacting with the OpenAI API for chat completions.",
            "key_types": [
              "Client interface",
              "Config struct",
              "openAISvc struct"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/openai/models.go": {
            "language": "Go",
            "purpose": "Defines data structures for handling OpenAI API requests and responses.",
            "key_types": [
              "RequestBody",
              "ChatCompletionResponse",
              "Tool"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/pushnotification": {
        "path": "internal/infras/pushnotification",
        "purpose": "Responsible for handling push notifications, including defining models and producing notifications via Kafka.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "models.go",
          "producer.go"
        ],
        "dependencies": [
          "Kafka"
        ],
        "architecture": "The folder follows a modular architecture pattern, separating concerns between data models and notification production logic.",
        "file_summaries": {
          "internal/infras/pushnotification/models.go": {
            "language": "Go",
            "purpose": "Defines models for push notification requests and their components.",
            "key_types": [
              "PostNotificationRequest",
              "Payload",
              "Recipient"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/pushnotification/producer.go": {
            "language": "go",
            "purpose": "This file implements a Kafka producer for publishing push notifications.",
            "key_types": [
              "ProducerConfig",
              "Producer",
              "PublishNotification"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/relay": {
        "path": "internal/infras/relay",
        "purpose": "This folder/module is responsible for implementing a client for interacting with a relay service and defining data structures for handling relay operations and token transactions.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating client functionality and data models related to relay services.",
        "file_summaries": {
          "internal/infras/relay/client.go": {
            "language": "Go",
            "purpose": "This file implements a client for interacting with a relay service, providing methods to fetch chains, tokens, quotes, and fee balances.",
            "key_types": [
              "Config",
              "Client",
              "client"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/relay/models.go": {
            "language": "Go",
            "purpose": "Defines data structures for handling relay operations and token transactions.",
            "key_types": [
              "RelayError",
              "ChainListResponse",
              "GetQuoteParams"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/skynet": {
        "path": "internal/infras/skynet",
        "purpose": "Responsible for providing client interfaces and error handling for interacting with the Skynet service, particularly in the context of blockchain transactions.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "client.go",
          "errors.go",
          "models.go",
          "proxy_skynet.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating client interfaces, error handling, and data models related to Skynet services.",
        "file_summaries": {
          "internal/infras/skynet/client.go": {
            "language": "Go",
            "purpose": "Defines a client interface and implementation for interacting with the Skynet service.",
            "key_types": [
              "Client interface",
              "Config struct",
              "skynetSvc struct"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/skynet/errors.go": {
            "language": "go",
            "purpose": "Defines error variables for Skynet error handling.",
            "key_types": [
              "ErrHashNotFound",
              "ErrInternalServer",
              "ErrForbidden"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/infras/skynet/models.go": {
            "language": "Go",
            "purpose": "Defines data models and request/response structures for transaction searching in a blockchain context.",
            "key_types": [
              "SortItem",
              "AddressRequest",
              "SearchTransactionsRequest"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/skynet/proxy_skynet.go": {
            "language": "Go",
            "purpose": "Defines a proxy client interface for interacting with Skynet services related to blockchain data.",
            "key_types": [
              "SkynetProxyClient",
              "pathConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/tracking": {
        "path": "internal/infras/tracking",
        "purpose": "This folder/module is responsible for tracking notifications and events through HTTP requests.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating tracking functionality in separate files for client implementation and data models.",
        "file_summaries": {
          "internal/infras/tracking/client.go": {
            "language": "Go",
            "purpose": "This file implements a client for tracking notifications via HTTP requests.",
            "key_types": [
              "Config",
              "client",
              "TrackNotification"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/tracking/models.go": {
            "language": "go",
            "purpose": "Defines the TrackRequest struct for tracking events.",
            "key_types": [
              "TrackRequest"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/infras/turnstile": {
        "path": "internal/infras/turnstile",
        "purpose": "Responsible for implementing the client and models for verifying turnstile challenges.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating functionality related to turnstile verification in separate files.",
        "file_summaries": {
          "internal/infras/turnstile/client.go": {
            "language": "Go",
            "purpose": "Implements a client for verifying turnstile challenges.",
            "key_types": [
              "Config",
              "Client",
              "clientHTTP"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/turnstile/models.go": {
            "language": "Go",
            "purpose": "Defines models for handling turnstile verification requests and responses.",
            "key_types": [
              "VerificationRequest",
              "VerificationResponse",
              "turnstileErrorCode"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/walletmanager": {
        "path": "internal/infras/walletmanager",
        "purpose": "This folder/module is responsible for managing wallet preferences in a service.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating wallet management functionalities with clear separation of concerns between client interactions and data models.",
        "file_summaries": {
          "internal/infras/walletmanager/client.go": {
            "language": "Go",
            "purpose": "This file implements a client for managing wallet preferences in a service.",
            "key_types": [
              "Config",
              "Client",
              "clientHTTP"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/walletmanager/models.go": {
            "language": "go",
            "purpose": "Defines data models for managing user wallet preferences.",
            "key_types": [
              "Preference",
              "PreferencesRequest",
              "PreferencesResponse"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/infras/walletproxy": {
        "path": "internal/infras/walletproxy",
        "purpose": "This folder/module is responsible for implementing a client for interacting with a wallet proxy service and defining data models for handling wallet proxy requests and responses.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating client functionality and data models related to wallet proxy operations.",
        "file_summaries": {
          "internal/infras/walletproxy/client.go": {
            "language": "Go",
            "purpose": "This file implements a client for interacting with a wallet proxy service, providing methods to retrieve user balances, activities, NFT items, and token prices.",
            "key_types": [
              "Client interface",
              "Config struct",
              "clientHTTP struct"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/walletproxy/models.go": {
            "language": "Go",
            "purpose": "Defines data models for handling wallet proxy requests and responses related to fiat tokens and fungible balances.",
            "key_types": [
              "SingleFiatTokenReq",
              "TokenPriceReq",
              "FungibleBalance"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/waypoint": {
        "path": "internal/infras/waypoint",
        "purpose": "Responsible for managing waypoint profiles and points, including client interactions and data models.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating client interfaces and data models related to waypoint functionalities.",
        "file_summaries": {
          "internal/infras/waypoint/client.go": {
            "language": "Go",
            "purpose": "Defines a client interface and its implementation for interacting with waypoint profiles and points management.",
            "key_types": [
              "Client interface",
              "Config struct",
              "cli struct"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/infras/waypoint/models.go": {
            "language": "Go",
            "purpose": "Defines data models for waypoint-related functionalities including error handling, wallet management, and point system.",
            "key_types": [
              "WaypointErr",
              "Wallet",
              "AwardPointsRequest"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/infras/x": {
        "path": "internal/infras/x",
        "purpose": "Responsible for defining data models and services related to user functionalities on a social media platform.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "models.go",
          "x_svc.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture pattern, focusing on user-related functionalities and data modeling.",
        "file_summaries": {
          "internal/infras/x/models.go": {
            "language": "Go",
            "purpose": "Defines data models for API responses including listings, errors, and pagination.",
            "key_types": [
              "ListingResponse",
              "LikedPost",
              "APIError"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/infras/x/x_svc.go": {
            "language": "Go",
            "purpose": "Defines a service for interacting with user-related functionalities on a social media platform.",
            "key_types": [
              "XServiceConfig",
              "UserSession",
              "XService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/repositories": {
        "path": "internal/repositories",
        "purpose": "This folder/module is responsible for defining repository interfaces and implementations for managing various entities and operations in a database.",
        "languages": {
          "Go": 20
        },
        "key_modules": [
          "action.go",
          "activity_guidance.go",
          "check_in_wallet_log.go",
          "crawled_data.go",
          "definitions.go",
          "event.go",
          "game_played_logs.go",
          "helper.go",
          "point_tracker.go",
          "quest.go",
          "quest_pool.go",
          "reward.go",
          "role.go",
          "shop.go",
          "sponsor.go",
          "user.go",
          "user_event.go",
          "user_quest.go",
          "user_reward.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a repository pattern architecture, encapsulating database access logic and providing a clean interface for data operations.",
        "file_summaries": {
          "internal/repositories/action.go": {
            "language": "Go",
            "purpose": "This file defines a repository interface and implementation for managing quest actions in a database.",
            "key_types": [
              "Action interface",
              "action struct",
              "NewActionRepo function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/activity_guidance.go": {
            "language": "Go",
            "purpose": "This file defines a repository interface and implementation for managing activity guidance entities in a database.",
            "key_types": [
              "ActivityGuidanceRepository",
              "activityGuidanceRepository",
              "NewActivityGuidanceRepository"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/check_in_wallet_log.go": {
            "language": "Go",
            "purpose": "This file implements a repository for managing user check-in logs in a wallet service.",
            "key_types": [
              "CheckInLogRepository",
              "checkInLogRepo",
              "NewCheckInLogRepository"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/crawled_data.go": {
            "language": "Go",
            "purpose": "Defines the CrawledDataRepository interface for managing game registration and participant actions in a database.",
            "key_types": [
              "CrawledDataRepository",
              "GameRegistrationEntity",
              "GameMatchEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/definitions.go": {
            "language": "Go",
            "purpose": "Defines constants for database table names used in the repositories package.",
            "key_types": [],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/event.go": {
            "language": "Go",
            "purpose": "Defines an interface and implementation for event repository operations in a database.",
            "key_types": [
              "EventRepo",
              "NewEventRepo",
              "Upsert"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/game_played_logs.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing game played logs in a database using GORM.",
            "key_types": [
              "GamePlayedLogsRepository",
              "gamePlayedLogsRepository",
              "NewGamePlayedLogsRepository"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/helper.go": {
            "language": "Go",
            "purpose": "Provides helper functions for database operations using GORM, including cleanup of stale records and transaction management.",
            "key_types": [
              "cleanupStaledByKeys",
              "bindTx",
              "txFromContext"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/point_tracker.go": {
            "language": "Go",
            "purpose": "This file defines a repository for tracking point activities in a database using GORM.",
            "key_types": [
              "PointTrackerRepo",
              "pointTrackerRepo",
              "NewPointTrackerRepo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/quest.go": {
            "language": "Go",
            "purpose": "Repository implementation for managing quest-related data and operations.",
            "key_types": [
              "Quest interface",
              "quest struct",
              "NewQuestRepo function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/quest_pool.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing quest pools in a database using GORM.",
            "key_types": [
              "QuestPoolRepo interface",
              "poolRepo struct",
              "NewQuestPoolRepo function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/reward.go": {
            "language": "Go",
            "purpose": "This file defines the RewardRepo interface for managing reward-related data operations in a repository pattern.",
            "key_types": [
              "RewardRepo",
              "FindRewardInfoByID",
              "TopUpPool"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/role.go": {
            "language": "Go",
            "purpose": "Defines a repository for managing roles in a database using GORM.",
            "key_types": [
              "RoleRepository interface",
              "roleRepository struct",
              "NewRoleRepository function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/shop.go": {
            "language": "Go",
            "purpose": "Defines the ShopRepo interface for managing shop categories, items, tiers, and purchases.",
            "key_types": [
              "GetCategories",
              "CreateItem",
              "CreatePurchase"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/sponsor.go": {
            "language": "Go",
            "purpose": "Defines the SponsorRepo interface and its implementation for managing sponsor entities in a database.",
            "key_types": [
              "SponsorRepo interface",
              "sponsorRepo struct",
              "NewSponsorRepo function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/user.go": {
            "language": "Go",
            "purpose": "Defines a user repository interface and its implementation for database operations related to user entities.",
            "key_types": [
              "UserRepo interface",
              "userRepo struct",
              "NewUserRepo function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/user_event.go": {
            "language": "Go",
            "purpose": "Defines a repository interface and implementation for managing user event data in a database.",
            "key_types": [
              "UserEventRepo",
              "userEventRepo",
              "NewUserEventRepo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/user_quest.go": {
            "language": "Go",
            "purpose": "Defines the UserQuestRepo interface for managing user quests in a repository pattern.",
            "key_types": [
              "UserQuestRepo",
              "FindAuditResult",
              "CreateUserQuestInfo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/user_reward.go": {
            "language": "Go",
            "purpose": "Defines a repository for managing user rewards and related database operations.",
            "key_types": [
              "UserRewardRepo interface",
              "userRewardRepo struct",
              "NewUserRewardRepo function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/repositories/cms": {
        "path": "internal/repositories/cms",
        "purpose": "Responsible for managing CMS-related data repositories, specifically for banner data.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "banner.go"
        ],
        "dependencies": [
          "GORM"
        ],
        "architecture": "Repository pattern for data management in a CMS.",
        "file_summaries": {
          "internal/repositories/cms/banner.go": {
            "language": "Go",
            "purpose": "Defines a repository for managing banner data in a CMS using GORM.",
            "key_types": [
              "Banner",
              "BannerRepository",
              "bannerRepository"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/repositories/discovery": {
        "path": "internal/repositories/discovery",
        "purpose": "Responsible for managing various entities related to the discovery module, including announcements, collections, contacts, events, feature banners, home banners, layouts, products, and service items.",
        "languages": {
          "Go": 10
        },
        "key_modules": [
          "announcement.go",
          "collection.go",
          "contact.go",
          "event.go",
          "feature_banner.go",
          "generic.go",
          "home_banner.go",
          "layout.go",
          "product.go",
          "service_item.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a repository pattern, encapsulating data access logic for different entities within the discovery module.",
        "file_summaries": {
          "internal/repositories/discovery/announcement.go": {
            "language": "Go",
            "purpose": "Defines the Announcement repository interface and its implementation for managing announcements in the discovery module.",
            "key_types": [
              "Announcement interface",
              "announcement struct",
              "NewAnnouncementRepo function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/collection.go": {
            "language": "Go",
            "purpose": "Defines a repository interface and implementation for managing collections in a discovery service.",
            "key_types": [
              "Collection interface",
              "collection struct",
              "NewCollection function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/contact.go": {
            "language": "Go",
            "purpose": "Defines a repository for managing contact-related data in a discovery service.",
            "key_types": [
              "Contact interface",
              "contact struct",
              "NewContactRepo function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/event.go": {
            "language": "Go",
            "purpose": "Defines an interface and implementation for managing event-related database operations.",
            "key_types": [
              "Event interface",
              "event struct",
              "NewEventRepo function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/feature_banner.go": {
            "language": "Go",
            "purpose": "Defines the FeatureBanner repository interface and its implementation for managing feature banners and headlines in a database.",
            "key_types": [
              "FeatureBanner interface",
              "featureBanner struct",
              "NewFeatureBanner function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/generic.go": {
            "language": "Go",
            "purpose": "Defines a generic repository for managing social platforms and studios in a database.",
            "key_types": [
              "Generic interface",
              "generic struct",
              "NewGenericRepo function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/home_banner.go": {
            "language": "Go",
            "purpose": "Defines the HomeBanner repository interface and its implementation for managing home banners in a database.",
            "key_types": [
              "HomeBanner interface",
              "homeBanner struct",
              "NewHomeBanner function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/layout.go": {
            "language": "Go",
            "purpose": "Defines a repository for managing layout entities and their associated widgets in a discovery service.",
            "key_types": [
              "Layout interface",
              "layout struct",
              "NewLayoutRepo function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/product.go": {
            "language": "Go",
            "purpose": "Defines a product repository interface and its implementation for managing product data in a database.",
            "key_types": [
              "Product interface",
              "product struct",
              "NewProductRepo function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/service_item.go": {
            "language": "Go",
            "purpose": "Defines a repository for managing service items in a discovery context using GORM.",
            "key_types": [
              "ServiceItem interface",
              "serviceItem struct",
              "NewServiceItem function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/repositories/discovery/models": {
        "path": "internal/repositories/discovery/models",
        "purpose": "Defines data models for various entities used in the discovery repository.",
        "languages": {
          "Go": 11
        },
        "key_modules": [
          "announcement.go",
          "collections.go",
          "contact.go",
          "event.go",
          "feature_banner.go",
          "generics.go",
          "graph.go",
          "home_banner.go",
          "layout.go",
          "product.go",
          "service_item.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing data models related to discovery functionality into separate files for clarity and maintainability.",
        "file_summaries": {
          "internal/repositories/discovery/models/announcement.go": {
            "language": "Go",
            "purpose": "Defines data models for announcements in a discovery repository.",
            "key_types": [
              "AnounceEntity",
              "AnounceEntityWithStatus",
              "WidgetItemAnnouncement"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/discovery/models/collections.go": {
            "language": "Go",
            "purpose": "Defines data models for collections in a discovery repository using GORM.",
            "key_types": [
              "CollectionEntity",
              "CollectionEntityWithExtraInfo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/discovery/models/contact.go": {
            "language": "Go",
            "purpose": "Defines data models for contact entities in the discovery module.",
            "key_types": [
              "ContactEntity",
              "ContactWithExtraInfo",
              "WidgetItemContact"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/discovery/models/event.go": {
            "language": "Go",
            "purpose": "Defines event-related data models for discovery functionality.",
            "key_types": [
              "EventEntity",
              "WidgetItemEvent"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/models/feature_banner.go": {
            "language": "Go",
            "purpose": "Defines data models for feature banners and their headlines in a discovery module.",
            "key_types": [
              "FeatureBannerEntity",
              "FeatureHeadlineEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/discovery/models/generics.go": {
            "language": "Go",
            "purpose": "Defines data models for discovery-related entities in a repository.",
            "key_types": [
              "SocialPlatformEntity",
              "StudioEntity",
              "CollectionStatsItem"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/models/graph.go": {
            "language": "Go",
            "purpose": "Defines data models for Mavis sales responses in a discovery context.",
            "key_types": [
              "MavisSalesResponse",
              "MavisSale",
              "CollectionMetadata"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/models/home_banner.go": {
            "language": "Go",
            "purpose": "Defines data models for home banner widgets and entities in a discovery module.",
            "key_types": [
              "WidgetItemHomeBanner",
              "HomeBannerEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/discovery/models/layout.go": {
            "language": "Go",
            "purpose": "Defines data models for layout and widget entities in a discovery service.",
            "key_types": [
              "LayoutEntity",
              "LayoutWidgetEntity",
              "WidgetEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/models/product.go": {
            "language": "Go",
            "purpose": "Defines data models for product entities in the discovery module.",
            "key_types": [
              "ProductEntity",
              "ProductWithStudioInfo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/discovery/models/service_item.go": {
            "language": "Go",
            "purpose": "Defines data models for service entities and widget service items in a discovery context.",
            "key_types": [
              "ServiceEntity",
              "WidgetServiceItem"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/repositories/models": {
        "path": "internal/repositories/models",
        "purpose": "Defines data models and validation logic for various entities in a gaming application, including quests, rewards, user actions, and external services.",
        "languages": {
          "Go": 30
        },
        "key_modules": [
          "action.go",
          "activity_guidance.go",
          "campaign.go",
          "events.go",
          "external_services.go",
          "point_tracker.go",
          "quest.go",
          "quest_reward.go",
          "user.go",
          "user_quest.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing data models related to different aspects of the gaming application, facilitating maintainability and scalability.",
        "file_summaries": {
          "internal/repositories/models/action.go": {
            "language": "Go",
            "purpose": "Defines data models and validation logic for quest actions in a gaming application.",
            "key_types": [
              "QuestActionEntity",
              "ActivityExtra",
              "XAction"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/models/activity_guidance.go": {
            "language": "Go",
            "purpose": "Defines the ActivityGuidanceEntity model for database interactions.",
            "key_types": [
              "ActivityGuidanceEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/models/campaign.go": {
            "language": "Go",
            "purpose": "Defines data models for campaign and reward pool log entities.",
            "key_types": [
              "CampaignEntity",
              "RewardPoolLogEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/models/events.go": {
            "language": "Go",
            "purpose": "Defines data models for events and user interactions in a quest system.",
            "key_types": [
              "Event",
              "EventSponsor",
              "UserEvent"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/models/external_services.go": {
            "language": "Go",
            "purpose": "Defines data models for external services related to game registration and check-in logs.",
            "key_types": [
              "GameRegistrationEntity",
              "WalletCheckInLogEntity",
              "GameCheckInLogExternal"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/models/model.go": {
            "language": "Go",
            "purpose": "Defines error constants for data models.",
            "key_types": [],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/models/point_tracker.go": {
            "language": "Go",
            "purpose": "Defines the PointTrackerEntity model for tracking user points in a database.",
            "key_types": [
              "PointTrackerEntity",
              "TableName"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/models/pool.go": {
            "language": "Go",
            "purpose": "Defines data models for reward pools in a quest system.",
            "key_types": [
              "RewardPoolEntity",
              "PoolExtraInfo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/models/preference.go": {
            "language": "Go",
            "purpose": "Defines the Preference model and its associated filter for managing user preferences.",
            "key_types": [
              "Preference",
              "PreferenceFilter",
              "ToMap"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/models/quest.go": {
            "language": "Go",
            "purpose": "Defines data models for quests in a gaming application.",
            "key_types": [
              "QuestEntity",
              "WhitelistQuestParams",
              "QuestPlayers"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/models/quest_pool.go": {
            "language": "Go",
            "purpose": "Defines data models for quest pools in a gaming application.",
            "key_types": [
              "QuestPool",
              "PoolWithEventInfo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/models/quest_resolve.go": {
            "language": "go",
            "purpose": "Defines data models for logging history entities and associated log information.",
            "key_types": [
              "HistoryEntity",
              "LogInfo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/models/quest_reward.go": {
            "language": "Go",
            "purpose": "Defines data models for quest rewards in a gaming application.",
            "key_types": [
              "QuestRewardEntity",
              "FilterQuestReward"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/models/reward.go": {
            "language": "Go",
            "purpose": "Defines data models for reward and transaction entities in a reward system.",
            "key_types": [
              "RewardInfoEntity",
              "TopUpTxEntity",
              "CombineTxHashInfoDTO"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/models/reward_allocation.go": {
            "language": "Go",
            "purpose": "Defines the RewardAllocation model for database interactions using GORM.",
            "key_types": [
              "RewardAllocation"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/models/shop.go": {
            "language": "Go",
            "purpose": "Defines data models for shop items, categories, and tiers in an e-commerce context.",
            "key_types": [
              "ShopItem",
              "ShopItemTier",
              "ShopCategory"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/models/sponsor.go": {
            "language": "go",
            "purpose": "Defines the SponsorEntity model for database interactions using GORM.",
            "key_types": [
              "SponsorEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/models/user.go": {
            "language": "Go",
            "purpose": "Defines the UserEntity model for database interactions using GORM.",
            "key_types": [
              "UserEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/models/user_action.go": {
            "language": "Go",
            "purpose": "Defines the UserActionEntity model for user actions in a quest system.",
            "key_types": [
              "UserActionEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/repositories/models/user_quest.go": {
            "language": "Go",
            "purpose": "Defines data models for user quests and related entities in a quest management system.",
            "key_types": [
              "UserQuestEntity",
              "PQuestAuditResult",
              "QuestWhitelistEntity"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/models/user_reward.go": {
            "language": "Go",
            "purpose": "Defines data models for user rewards and reward pools in a quest system.",
            "key_types": [
              "UserRewardEntity",
              "RewardPoolExtra",
              "DistributeInfoV3"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/repositories/models/user_role.go": {
            "language": "Go",
            "purpose": "Defines user role models and their associated permissions for a database using GORM.",
            "key_types": [
              "RoleEntity",
              "RoleWithExtraInfo",
              "UserRole"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/repositories/preference": {
        "path": "internal/repositories/preference",
        "purpose": "This folder/module is responsible for managing user preferences in a database using GORM.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "preference.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a repository pattern, encapsulating the logic required to access data sources.",
        "file_summaries": {
          "internal/repositories/preference/preference.go": {
            "language": "Go",
            "purpose": "This file defines a repository for managing user preferences in a database using GORM.",
            "key_types": [
              "PreferenceRepo interface",
              "prefRepo struct",
              "GetList function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/services": {
        "path": "internal/services",
        "purpose": "Responsible for handling various services related to user wallets, game data, rewards, and task monitoring in a quest system.",
        "languages": {
          "Go": 7
        },
        "key_modules": [
          "check_in_wallet.go",
          "definitions.go",
          "game_data.go",
          "restful.go",
          "reward.go",
          "reward_distributor.go",
          "task_monitor.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing services into distinct files that handle specific functionalities related to quests and rewards.",
        "file_summaries": {
          "internal/services/check_in_wallet.go": {
            "language": "Go",
            "purpose": "Handles check-in functionality for user wallets in a quest system.",
            "key_types": [
              "CheckInWallet",
              "checkInWallet",
              "CheckInWalletStreak"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/definitions.go": {
            "language": "Go",
            "purpose": "Defines error constants related to quest management in a service.",
            "key_types": [
              "ErrCannotFindQuests",
              "ErrCannotFindQuestRewards",
              "ErrUserHasNotTakenQuest"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/services/game_data.go": {
            "language": "Go",
            "purpose": "Handles game data queries and operations for various projects in a gaming service.",
            "key_types": [
              "checkInQuery",
              "registerQuery",
              "findAtiaPrayQuery"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/restful.go": {
            "language": "Go",
            "purpose": "Defines a RESTful service with HTTP and metrics server integration.",
            "key_types": [
              "RestfulService",
              "restfulService",
              "RestfulConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/reward.go": {
            "language": "Go",
            "purpose": "Provides a service for managing reward signatures in a blockchain context.",
            "key_types": [
              "RewardService",
              "RewardConfig",
              "GetClaimSigs"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/reward_distributor.go": {
            "language": "Go",
            "purpose": "This file implements a reward distributor service using an asynchronous task queue.",
            "key_types": [
              "rewardDistributorService",
              "NewRewardDistributorService",
              "Start",
              "Stop"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/task_monitor.go": {
            "language": "Go",
            "purpose": "Implements a task monitoring service that manages an HTTP server.",
            "key_types": [
              "TaskMonitorService",
              "taskMonitor",
              "NewTaskMonitor"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/services/banners": {
        "path": "internal/services/banners",
        "purpose": "Provides a service for managing banners including creation, editing, retrieval, and listing by status.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "banner.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture pattern, encapsulating banner management functionalities within a dedicated service module.",
        "file_summaries": {
          "internal/services/banners/banner.go": {
            "language": "Go",
            "purpose": "Provides a service for managing banners including creation, editing, retrieval, and listing by status.",
            "key_types": [
              "Banner",
              "BannerService",
              "bannerService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/services/check-in-trackers": {
        "path": "internal/services/check-in-trackers",
        "purpose": "Provides services for tracking game check-in streaks and registration status, as well as functionality for checking in game events and registering game addresses.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "game_data.go",
          "game_data_provider.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture pattern, focusing on encapsulating game check-in functionalities within dedicated Go files.",
        "file_summaries": {
          "internal/services/check-in-trackers/game_data.go": {
            "language": "Go",
            "purpose": "Provides services for tracking game check-in streaks and registration status.",
            "key_types": [
              "CheckInStreak",
              "GameDataService",
              "gameDataService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/check-in-trackers/game_data_povider.go": {
            "language": "Go",
            "purpose": "Provides functionality for checking in game events and registering game addresses.",
            "key_types": [
              "CheckInEvent",
              "GameDataProvider",
              "gameDataProviderImpl"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/services/cron-jobs": {
        "path": "internal/services/cron-jobs",
        "purpose": "Responsible for managing and scheduling cron jobs for various tasks related to gaming services, including data crawling and monitoring.",
        "languages": {
          "Go": 10
        },
        "key_modules": [
          "config.go",
          "job.go",
          "metrics.go",
          "scheduler.go",
          "task.go",
          "task_collections.go",
          "task_games.go",
          "task_mkp.go",
          "task_mvh.go"
        ],
        "dependencies": [
          "gocron",
          "Prometheus"
        ],
        "architecture": "The folder follows a modular architecture pattern, where each file encapsulates specific functionalities related to cron job management, scheduling, and monitoring.",
        "file_summaries": {
          "internal/services/cron-jobs/config.go": {
            "language": "Go",
            "purpose": "Configuration definitions for cron jobs and related services.",
            "key_types": [
              "CronServiceConfig",
              "JobConfig",
              "DataProvidersConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/services/cron-jobs/job.go": {
            "language": "Go",
            "purpose": "Manages and registers scheduled tasks using the gocron library.",
            "key_types": [
              "TaskRegistry",
              "NewTaskRegistry",
              "RegisterTask"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/cron-jobs/metrics.go": {
            "language": "Go",
            "purpose": "Defines and registers Prometheus metrics for cron job monitoring.",
            "key_types": [
              "registerMetrics",
              "cronJobHistogramVec",
              "cronJobCounterVec"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/services/cron-jobs/scheduler.go": {
            "language": "Go",
            "purpose": "This file implements a cron job scheduler service with logging and monitoring capabilities.",
            "key_types": [
              "ProvideScheduler",
              "NewCronJobService",
              "loggingJobMonitor"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/cron-jobs/task.go": {
            "language": "Go",
            "purpose": "Defines cron job tasks for crawling quest data in a gaming service.",
            "key_types": [
              "CronTask",
              "CrawlTaskLogic",
              "SwanlakeCrawlerTask"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/cron-jobs/task_collections.go": {
            "language": "Go",
            "purpose": "Defines data structures and functionality for handling marketplace collection data in cron jobs.",
            "key_types": [
              "MarketplaceCollectionResult",
              "MarketplaceCollectionsRanking",
              "MarketplaceCollectionItem"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/cron-jobs/task_games.go": {
            "language": "Go",
            "purpose": "Defines a cron job task for crawling classic game played logs.",
            "key_types": [
              "ClassicGamePlayedCrawlerTaskLogic",
              "NewClassicGamePlayedCrawlerTaskLogic",
              "EligibleQuestActivities"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/cron-jobs/task_mkp.go": {
            "language": "Go",
            "purpose": "Defines a task for crawling purchase history of Axie NFTs from a marketplace.",
            "key_types": [
              "PurchaseAxieCrawlerTaskLogic",
              "NewPurchaseAxieCrawlerTaskLogic",
              "GetSwanlakeQuery"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/cron-jobs/task_mvh.go": {
            "language": "Go",
            "purpose": "Defines a task for crawling console games data from a specified API.",
            "key_types": [
              "ConsoleGamesCrawlerTask",
              "NewConsoleGamesCrawlerTask",
              "Run"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/services/discord": {
        "path": "internal/services/discord",
        "purpose": "Responsible for interacting with the Discord API, managing configurations, and defining data models related to Discord services.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "config.go",
          "discord_svc.go",
          "models.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating configuration, service logic, and data models related to Discord interactions.",
        "file_summaries": {
          "internal/services/discord/config.go": {
            "language": "Go",
            "purpose": "Defines configuration settings for Discord service interactions.",
            "key_types": [
              "Config"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/services/discord/discord_svc.go": {
            "language": "Go",
            "purpose": "Provides a service for interacting with Discord API to verify server membership and retrieve user information.",
            "key_types": [
              "DiscordService",
              "discordSvc",
              "UserSession"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/discord/models.go": {
            "language": "go",
            "purpose": "Defines data models for Discord invite information and error messages.",
            "key_types": [
              "InviteInfo",
              "ErrorMessage",
              "Error()"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "internal/services/discovery": {
        "path": "internal/services/discovery",
        "purpose": "Responsible for managing various services related to discovery functionalities, including announcements, collections, contacts, events, and banners.",
        "languages": {
          "Go": 13
        },
        "key_modules": [
          "announcement.go",
          "collection.go",
          "contact.go",
          "data.go",
          "event.go",
          "feature_banner.go",
          "generic.go",
          "helpers.go",
          "home_banner.go",
          "layout.go",
          "product.go",
          "service_item.go",
          "token.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, with each file defining a specific service or functionality related to the discovery module.",
        "file_summaries": {
          "internal/services/discovery/announcement.go": {
            "language": "Go",
            "purpose": "Defines the announcement service for managing banners and widget items.",
            "key_types": [
              "Announcement interface",
              "ProvideAnnouncementService",
              "error variables"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/discovery/collection.go": {
            "language": "Go",
            "purpose": "Defines the Collection service for managing and retrieving collection data.",
            "key_types": [
              "Collection interface",
              "collection struct",
              "NewCollection function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/discovery/contact.go": {
            "language": "Go",
            "purpose": "Provides a service for managing contact layouts and widget items in the discovery module.",
            "key_types": [
              "Contact interface",
              "contact struct",
              "NewContactService function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/discovery/data.go": {
            "language": "go",
            "purpose": "Provides a data service for fetching collection statistics from an external API.",
            "key_types": [
              "DataServiceCfg",
              "Data",
              "NewDataSvc"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/discovery/event.go": {
            "language": "Go",
            "purpose": "Defines the Event service interface and its implementation for managing discovery events.",
            "key_types": [
              "Event interface",
              "event struct",
              "RoninMarketCfg struct"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/discovery/feature_banner.go": {
            "language": "Go",
            "purpose": "Defines the FeatureBanner service interface and its implementation for managing feature banners in the discovery service.",
            "key_types": [
              "FeatureBanner interface",
              "featureBanner struct",
              "NewFeatureBanner function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/discovery/generic.go": {
            "language": "Go",
            "purpose": "Provides generic services for discovery functionalities including image handling and social platform management.",
            "key_types": [
              "NewGenericService",
              "ProvideCollect",
              "error handling"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/discovery/helpers.go": {
            "language": "Go",
            "purpose": "Provides helper functions for managing social platform contacts in the discovery service.",
            "key_types": [
              "extractSocialPlatformID",
              "combineCreateLayoutContactInfo",
              "getRMSaleEvents"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/discovery/home_banner.go": {
            "language": "Go",
            "purpose": "Defines the HomeBanner service interface and its implementation for managing home banners in the discovery module.",
            "key_types": [
              "HomeBanner interface",
              "homeBanner struct",
              "NewHomeBannerSvc function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/discovery/layout.go": {
            "language": "Go",
            "purpose": "Defines services for managing layouts and widgets in a discovery context.",
            "key_types": [
              "Layout interface",
              "NewLayoutService function",
              "Error variables"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/discovery/product.go": {
            "language": "Go",
            "purpose": "Defines the product service for managing dapps and products in the discovery module.",
            "key_types": [
              "Product interface",
              "ProvideProductService",
              "error variables"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/discovery/service_item.go": {
            "language": "Go",
            "purpose": "Defines the ServiceItem interface and its implementation for managing layout services and widget items.",
            "key_types": [
              "ServiceItem interface",
              "serviceItem struct",
              "NewServiceItem function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/discovery/token.go": {
            "language": "Go",
            "purpose": "Defines a service for managing trending tokens in a discovery context.",
            "key_types": [
              "TrendingToken interface",
              "trendingToken struct",
              "NewTrendingToken function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/services/quest-center": {
        "path": "internal/services/quest-center",
        "purpose": "Responsible for managing quests, user profiles, rewards, events, and shop services within a gaming context.",
        "languages": {
          "Go": 20
        },
        "key_modules": [
          "actions.go",
          "event.go",
          "point_tracker.go",
          "pools.go",
          "profile.go",
          "quest_helper.go",
          "quests.go",
          "rewards.go",
          "shop.go",
          "shop_helper.go",
          "sponsor.go",
          "user.go",
          "user_event.go",
          "user_quest.go",
          "user_reward.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing services related to quests and user interactions into separate files for maintainability and scalability.",
        "file_summaries": {
          "internal/services/quest-center/actions.go": {
            "language": "Go",
            "purpose": "Provides services for retrieving quest actions from a repository.",
            "key_types": [
              "ActionV2 interface",
              "actionSvcV2 struct",
              "GetQuestActions function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/event.go": {
            "language": "Go",
            "purpose": "Provides event management services including retrieval and caching of events.",
            "key_types": [
              "EventSvc interface",
              "eventSvc struct",
              "NewEventSvc function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/generics.go": {
            "language": "Go",
            "purpose": "Provides error handling utilities for the quest center services.",
            "key_types": [
              "wrapError"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/services/quest-center/point_tracker.go": {
            "language": "Go",
            "purpose": "Implements a service for tracking and creating point activities for users in a quest system.",
            "key_types": [
              "PointTrackerService",
              "pointTrackerService",
              "CreatePoints"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/pools.go": {
            "language": "Go",
            "purpose": "Provides services for managing quest pools in a gaming context.",
            "key_types": [
              "PoolSvc interface",
              "poolSvc struct",
              "NewPoolSvc function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/profile.go": {
            "language": "Go",
            "purpose": "Defines a service for managing user profiles and wallets in a quest center.",
            "key_types": [
              "ProfileService",
              "PublicProfile",
              "Wallet"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/quest_helper.go": {
            "language": "Go",
            "purpose": "Provides helper functions for managing quests, including finding sponsors, counting players, and retrieving rewards.",
            "key_types": [
              "findQuestSponsors",
              "countQuestPlayers",
              "findQuestRewards"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/quests.go": {
            "language": "Go",
            "purpose": "Defines services and data structures for managing quests in a quest center.",
            "key_types": [
              "QuestSvcV2 interface",
              "QuestRelatedInfo struct",
              "questSvcV2 struct"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/rewards.go": {
            "language": "Go",
            "purpose": "Provides services for managing quest rewards in a gaming application.",
            "key_types": [
              "RewardSvcV2 interface",
              "rewardSvcV2 struct",
              "GetQuestRewards function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/shop.go": {
            "language": "Go",
            "purpose": "This file implements the shop service for managing categories, tiers, and items in a quest center.",
            "key_types": [
              "ShopSvc interface",
              "CreateCategory",
              "CreateItem"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/shop_helper.go": {
            "language": "Go",
            "purpose": "Provides helper functions for managing shop tier caching and validating purchase requests in a quest center service.",
            "key_types": [
              "shopSvc",
              "validatePurchaseRequest",
              "validateTierAccess"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/shop_monitoring.go": {
            "language": "Go",
            "purpose": "Defines a structure for handling failed purchase completions in a shop monitoring system.",
            "key_types": [
              "FailedPurchaseCompletion"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/services/quest-center/sponsor.go": {
            "language": "Go",
            "purpose": "Provides services for managing sponsors in the quest center.",
            "key_types": [
              "SponsorSvcV2 interface",
              "sponsorSvc struct",
              "NewSponsorSvcV2 function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/user.go": {
            "language": "Go",
            "purpose": "Provides user management services for the quest center, including user creation and retrieval.",
            "key_types": [
              "User",
              "UserSvc",
              "userSvc"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/user_event.go": {
            "language": "Go",
            "purpose": "Provides services related to user events in the quest center, including premium user management.",
            "key_types": [
              "UserEventSvc",
              "userEventSvc",
              "UserOwnPremiumNFTByGeth"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/user_quest.go": {
            "language": "Go",
            "purpose": "Provides services for managing user quests in a quest center.",
            "key_types": [
              "UserQuestSvc",
              "userQuestSvc",
              "NewUserQuestSvc"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/user_quest_helper.go": {
            "language": "Go",
            "purpose": "Handles user quest functionalities including verification and creation of user quests.",
            "key_types": [
              "verifyTakeQuestStatus",
              "createUserQuest"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-center/user_reward.go": {
            "language": "Go",
            "purpose": "Manages the distribution of user rewards in the quest center service.",
            "key_types": [
              "UserRewardSvc",
              "userRewardSvc",
              "NewUserRewardSvc"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/services/quest-verifiers": {
        "path": "internal/services/quest-verifiers",
        "purpose": "Responsible for verifying various user actions and states related to quests in a gaming context.",
        "languages": {
          "Go": 14
        },
        "key_modules": [
          "atia_blessing_verifier.go",
          "buy_nft_verifier.go",
          "discord_verifier.go",
          "game_verifier.go",
          "helpers.go",
          "quest_verifiers.go",
          "staking.go",
          "staking_verifier.go",
          "verifier_http.go",
          "verifier_onchain.go",
          "verifier_pixel_fest.go",
          "wallet_checkin_verifier.go",
          "x_verifier.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, with each file handling specific verification tasks related to user quests, promoting separation of concerns.",
        "file_summaries": {
          "internal/services/quest-verifiers/atia_blessing_verifier.go": {
            "language": "Go",
            "purpose": "Verifies user quest streaks for the Atia blessing in a gaming context.",
            "key_types": [
              "verifyAtiaStreakProxy",
              "updateActivityAtiaState",
              "FindStreak"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-verifiers/buy_nft_verifier.go": {
            "language": "Go",
            "purpose": "Verifies NFT purchase actions for quests in a gaming context.",
            "key_types": [
              "verifyBuyAxieProxy",
              "findCollectionAddress",
              "findTotalPurchased"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-verifiers/discord_verifier.go": {
            "language": "Go",
            "purpose": "Handles verification of Discord user actions for quests.",
            "key_types": [
              "verifyJoinProxy",
              "findDiscordUserCache"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-verifiers/game_verifier.go": {
            "language": "Go",
            "purpose": "Verifies game registration status for users in a quest system.",
            "key_types": [
              "verifyRegisterProxy",
              "verifyNotRegisteredProxy",
              "verifyNotRegisteredPreQuest"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-verifiers/helpers.go": {
            "language": "Go",
            "purpose": "Provides helper functions for verifying quest-related activities and managing user check-in states.",
            "key_types": [
              "updateActivityState",
              "findCheckInInternal",
              "FindStreak"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-verifiers/quest_verifiers.go": {
            "language": "Go",
            "purpose": "Defines quest verification services and related data structures for handling user quests and rewards.",
            "key_types": [
              "QuestVerifier interface",
              "PDistributionInfo struct",
              "VerifyActionParams struct"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-verifiers/staking.go": {
            "language": "go",
            "purpose": "Provides a service to retrieve the amount of RON staked for a given address.",
            "key_types": [
              "StakingService",
              "stakingService",
              "GetRonStaked"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-verifiers/staking_verifier.go": {
            "language": "Go",
            "purpose": "Verifies staking actions for quests in a gaming service.",
            "key_types": [
              "unmarshalRonStackedCondition",
              "verifyRonStakedProxy",
              "verifyRonStaked"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-verifiers/verifier_http.go": {
            "language": "Go",
            "purpose": "Handles HTTP verification of user activities for quests.",
            "key_types": [
              "httpActionVerifyResponse",
              "unmarshalOffChainAction",
              "verifyViaHTTP"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-verifiers/verifier_onchain.go": {
            "language": "Go",
            "purpose": "Handles on-chain verification of quest-related actions and assets.",
            "key_types": [
              "VerificationState",
              "unmarshalOnChainAssetAction",
              "unmarshalOnChainActivityAction"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-verifiers/verifier_pixel_fest.go": {
            "language": "Go",
            "purpose": "Verifies user participation in the Pixel Fest quest and updates user action status accordingly.",
            "key_types": [
              "pixelFestVerifyResponse",
              "verifyPixelFest"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-verifiers/wallet_checkin_verifier.go": {
            "language": "go",
            "purpose": "Verifies wallet check-in actions for user quests.",
            "key_types": [
              "verifyWalletCheckInProxy"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/quest-verifiers/x_verifier.go": {
            "language": "Go",
            "purpose": "Handles verification logic for user actions related to quests in a gaming context.",
            "key_types": [
              "verifyLikeAndRepostX",
              "shouldCheck",
              "unmarshalActivityRef"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/services/reward-randomize": {
        "path": "internal/services/reward-randomize",
        "purpose": "This folder/module is responsible for implementing a reward point system that randomizes rewards based on defined probabilities and quest tiers.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "reward_point.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the reward point logic within a single Go file.",
        "file_summaries": {
          "internal/services/reward-randomize/reward_point.go": {
            "language": "Go",
            "purpose": "This file implements a reward point system that randomizes rewards based on defined probabilities and quest tiers.",
            "key_types": [
              "RewardPoint",
              "NewRewardPoint",
              "GetRandomReward"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/services/siwe": {
        "path": "internal/services/siwe",
        "purpose": "Handles the creation, validation, and error management of Sign-In with Ethereum (SIWE) messages.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "error.go",
          "message.go",
          "regex.go",
          "siwe.go",
          "utils.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, organizing related functionalities into separate files for error handling, message struct definition, regex parsing, and utility functions.",
        "file_summaries": {
          "internal/services/siwe/error.go": {
            "language": "Go",
            "purpose": "Defines error types related to SIWE (Sign-In with Ethereum) messages.",
            "key_types": [
              "ExpiredMessage",
              "InvalidMessage",
              "InvalidSignature"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/services/siwe/message.go": {
            "language": "Go",
            "purpose": "Defines a Message struct for handling SIWE (Sign-In with Ethereum) messages.",
            "key_types": [
              "Message",
              "GetStatement",
              "GetDomain"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/siwe/regex.go": {
            "language": "Go",
            "purpose": "Defines regular expressions for parsing SIWE (Sign-In with Ethereum) messages.",
            "key_types": [
              "SIWEMsg"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "internal/services/siwe/siwe.go": {
            "language": "Go",
            "purpose": "Handles the creation and validation of messages for Ethereum-based Sign-In with Ethereum (SIWE).",
            "key_types": [
              "InitMessage",
              "validateDomain",
              "validateURI"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "internal/services/siwe/utils.go": {
            "language": "Go",
            "purpose": "Utility functions for handling timestamps, hashing, and nonce generation in the SIWE context.",
            "key_types": [
              "parseTimestamp",
              "isEmpty",
              "GenerateNonce"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/services/slack-alerts": {
        "path": "internal/services/slack-alerts",
        "purpose": "Handles sending alerts to Slack based on quest events.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "quest.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture pattern, focusing on alerting functionalities related to quest events.",
        "file_summaries": {
          "internal/services/slack-alerts/quest.go": {
            "language": "Go",
            "purpose": "Handles sending alerts to Slack based on quest events.",
            "key_types": [
              "SlackAlertConfig",
              "QuestAlertService",
              "questAlertService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "internal/services/swanlake": {
        "path": "internal/services/swanlake",
        "purpose": "This folder/module is responsible for providing a service that interacts with a Clickhouse database through HTTP requests.",
        "languages": {
          "go": 1
        },
        "key_modules": [
          "service.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a service-oriented architecture pattern, focusing on encapsulating the logic for database interactions within a dedicated service.",
        "file_summaries": {
          "internal/services/swanlake/service.go": {
            "language": "go",
            "purpose": "This file defines a service for interacting with a Clickhouse database via HTTP requests.",
            "key_types": [
              "Config",
              "Service",
              "httpService"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "mocks/handlers": {
        "path": "mocks/handlers",
        "purpose": "This folder contains mock implementations of various interfaces for testing purposes.",
        "languages": {
          "Go": 8
        },
        "key_modules": [
          "quest.go",
          "quest_action.go",
          "quest_reward.go",
          "reward.go",
          "sponsor.go",
          "user.go",
          "user_quest.go",
          "user_reward.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each file corresponds to a specific interface and provides mock implementations for testing.",
        "file_summaries": {
          "mocks/handlers/quest.go": {
            "language": "Go",
            "purpose": "This file defines a mock implementation of the Quest interface for testing purposes.",
            "key_types": [
              "Quest",
              "Quest_Expecter",
              "GetQuestListingItem"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "mocks/handlers/quest_action.go": {
            "language": "Go",
            "purpose": "This file defines a mock implementation of the QuestAction interface for testing purposes.",
            "key_types": [
              "QuestAction",
              "ActivityGuidanceByID",
              "QuestAction_Expecter"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "mocks/handlers/quest_reward.go": {
            "language": "Go",
            "purpose": "This file defines a mock implementation for the QuestReward interface used in testing.",
            "key_types": [
              "QuestReward",
              "QuestReward_Expecter",
              "GetActives"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "mocks/handlers/reward.go": {
            "language": "Go",
            "purpose": "This file defines a mock implementation of the Reward interface for testing purposes.",
            "key_types": [
              "Reward",
              "Reward_Expecter",
              "DeleteRewardInfo"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "mocks/handlers/sponsor.go": {
            "language": "Go",
            "purpose": "This file defines a mock implementation of the Sponsor interface for testing purposes.",
            "key_types": [
              "Sponsor",
              "Sponsor_Expecter",
              "DeleteSponsor"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "mocks/handlers/user.go": {
            "language": "Go",
            "purpose": "This file provides a mock implementation of the User interface for testing purposes.",
            "key_types": [
              "User",
              "User_Expecter",
              "FindUsers"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "mocks/handlers/user_quest.go": {
            "language": "Go",
            "purpose": "This file provides a mock implementation for the UserQuest interface used in testing.",
            "key_types": [
              "UserQuest",
              "UserQuest_Expecter",
              "ExportAuditResult"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "mocks/handlers/user_reward.go": {
            "language": "Go",
            "purpose": "This file defines a mock implementation for the UserReward type used in testing.",
            "key_types": [
              "UserReward",
              "UserReward_Expecter",
              "DistributeRewardV4"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "mocks/infras": {
        "path": "mocks/infras",
        "purpose": "This folder contains mock implementations of various interfaces for testing purposes.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "kafka_batch_consumer.go",
          "skynet_client.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on providing mock implementations for testing without external dependencies.",
        "file_summaries": {
          "mocks/infras/kafka_batch_consumer.go": {
            "language": "Go",
            "purpose": "This file defines a mock implementation of a Kafka batch consumer for testing purposes.",
            "key_types": [
              "KafkaBatchConsumer",
              "Close",
              "Commit"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "mocks/infras/skynet_client.go": {
            "language": "Go",
            "purpose": "This file defines a mock implementation of the SkynetClient interface for testing purposes.",
            "key_types": [
              "SkynetClient",
              "GetAccountByAddress",
              "SkynetClient_Expecter"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "mocks/repositories": {
        "path": "mocks/repositories",
        "purpose": "This folder contains mock implementations of various repository interfaces for testing purposes.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "activity_guidance_repository.go",
          "check_in_log_repository.go",
          "crawled_data_repository.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, providing isolated mock implementations for different repository interfaces to facilitate unit testing.",
        "file_summaries": {
          "mocks/repositories/activity_guidance_repository.go": {
            "language": "Go",
            "purpose": "This file provides a mock implementation of the ActivityGuidanceRepository for testing purposes.",
            "key_types": [
              "ActivityGuidanceRepository",
              "Create",
              "ActivityGuidanceRepository_Expecter"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "mocks/repositories/check_in_log_repository.go": {
            "language": "Go",
            "purpose": "This file defines a mock implementation of the CheckInLogRepository interface for testing purposes.",
            "key_types": [
              "CheckInLogRepository",
              "CheckInLogRepository_Expecter",
              "CheckIn"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "mocks/repositories/crawled_data_repository.go": {
            "language": "Go",
            "purpose": "This file provides a mock implementation of the CrawledDataRepository for testing purposes.",
            "key_types": [
              "CrawledDataRepository",
              "BulkInsertCheckIn",
              "CrawledDataRepository_Expecter"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "mocks/services": {
        "path": "mocks/services",
        "purpose": "This folder contains mock implementations of various services for testing purposes.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "game_data_service.go",
          "id_generator.go",
          "quest_alert_service.go",
          "swanlake_service.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, providing isolated mock implementations of service interfaces for unit testing.",
        "file_summaries": {
          "mocks/services/game_data_service.go": {
            "language": "Go",
            "purpose": "This file provides a mock implementation of the GameDataService for testing purposes.",
            "key_types": [
              "GameDataService",
              "CountAxieBought",
              "GameDataService_Expecter"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "mocks/services/id_generator.go": {
            "language": "Go",
            "purpose": "This file provides a mock implementation of the IDGenerator interface for testing purposes.",
            "key_types": [
              "IDGenerator",
              "IDGenerator_Expecter",
              "NextID"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "mocks/services/quest_alert_service.go": {
            "language": "Go",
            "purpose": "This file provides a mock implementation of the QuestAlertService for testing purposes.",
            "key_types": [
              "QuestAlertService",
              "SendSlackAlert",
              "QuestAlertService_Expecter"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "mocks/services/swanlake_service.go": {
            "language": "Go",
            "purpose": "This file provides a mock implementation of the SwanlakeService for testing purposes.",
            "key_types": [
              "SwanlakeService",
              "SwanlakeService_Expecter",
              "ChQuack"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "mocks/services/check-in-trackers": {
        "path": "mocks/services/check-in-trackers",
        "purpose": "This folder/module is responsible for providing mock implementations of services related to check-in trackers for testing purposes.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "game_data_provider.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on encapsulating mock implementations for testing interfaces.",
        "file_summaries": {
          "mocks/services/check-in-trackers/game_data_provider.go": {
            "language": "Go",
            "purpose": "This file provides an autogenerated mock implementation of the GameDataProvider interface for testing purposes.",
            "key_types": [
              "GameDataProvider",
              "CheckInGameByTimeRange"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/async-queue": {
        "path": "pkg/async-queue",
        "purpose": "This folder/module is responsible for implementing an asynchronous task queue using Redis, including client configuration, metrics tracking, rate limiting, and server management.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "client.go",
          "metrics.go",
          "rate_limit.go",
          "server.go",
          "task.go"
        ],
        "dependencies": [
          "Redis",
          "Prometheus"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating different functionalities related to asynchronous task processing, with clear separation of concerns for client configuration, metrics, rate limiting, and server management.",
        "file_summaries": {
          "pkg/async-queue/client.go": {
            "language": "Go",
            "purpose": "This file provides configuration and client creation functions for the asynq task queue using Redis.",
            "key_types": [
              "ClientConfig",
              "ClientConfigV2",
              "NewClient",
              "NewClientV2"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/async-queue/metrics.go": {
            "language": "Go",
            "purpose": "Implements middleware for tracking task processing metrics using Prometheus.",
            "key_types": [
              "createMetricsMiddleware"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/async-queue/rate_limit.go": {
            "language": "Go",
            "purpose": "Implements rate limiting functionality for asynchronous task handling.",
            "key_types": [
              "RateLimitError",
              "IsRateLimitError",
              "HandlerWithLimit"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/async-queue/server.go": {
            "language": "Go",
            "purpose": "Defines an asynchronous queue server and monitor using the asynq library.",
            "key_types": [
              "ServerConfig",
              "NewAsyncQueueServer",
              "NewAsyncQueueMonitor"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/async-queue/task.go": {
            "language": "Go",
            "purpose": "Defines an interface for handling asynchronous tasks in a queue.",
            "key_types": [
              "TaskHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "pkg/cache": {
        "path": "pkg/cache",
        "purpose": "Responsible for implementing caching mechanisms and metrics for a cache system, including serialization and Redis integration.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "cache.go",
          "metrics.go",
          "redis.go",
          "cache_test.go",
          "redis_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating caching logic, metrics, and testing in separate files for maintainability and clarity.",
        "file_summaries": {
          "pkg/cache/cache.go": {
            "language": "Go",
            "purpose": "Defines caching interfaces and JSON codec for serialization in a cache system.",
            "key_types": [
              "Codec",
              "Instance",
              "CodecJson"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/cache/cache_test.go": {
            "language": "Go",
            "purpose": "Unit tests for cache serialization and deserialization functionality.",
            "key_types": [
              "testCodec",
              "TestUnmarshal"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/cache/metrics.go": {
            "language": "Go",
            "purpose": "Defines metrics for cache operations in a wallet service.",
            "key_types": [
              "requestsTotal",
              "requestsDuration"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/cache/redis.go": {
            "language": "Go",
            "purpose": "Implements a Redis cache instance with methods to resolve and store values.",
            "key_types": [
              "redisInstance",
              "NewRedisInstance",
              "Resolve"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/cache/redis_test.go": {
            "language": "Go",
            "purpose": "Unit tests for Redis cache implementation using a test framework.",
            "key_types": [
              "TestRedisCache",
              "TestRedisCacheBatch",
              "Resolve"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/configs": {
        "path": "pkg/configs",
        "purpose": "This folder/module is responsible for managing configuration files, including loading, parsing, and handling sensitive data within those configurations.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "configs.go",
          "func_print.go",
          "func_print_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on separation of concerns by having distinct files for configuration loading and data handling, along with corresponding unit tests.",
        "file_summaries": {
          "pkg/configs/configs.go": {
            "language": "Go",
            "purpose": "This file provides a function to load and parse configuration files into a specified struct type.",
            "key_types": [
              "NewConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/configs/func_print.go": {
            "language": "Go",
            "purpose": "This file contains functions for hiding sensitive data in structs and slices.",
            "key_types": [
              "isSecretField",
              "hideSecret",
              "hideSensitiveDataInSlice"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/configs/func_print_test.go": {
            "language": "Go",
            "purpose": "Unit tests for hiding sensitive data in maps and slices.",
            "key_types": [
              "TestHideSecretInMap",
              "TestHideSecretInSlice"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/crypto": {
        "path": "pkg/crypto",
        "purpose": "Handles loading and parsing of PKCS#12 and .p8 certificates for TLS and ECDSA keys.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "key.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on cryptographic functionalities related to certificate and key management.",
        "file_summaries": {
          "pkg/crypto/key.go": {
            "language": "Go",
            "purpose": "Handles loading and parsing of PKCS#12 and .p8 certificates for TLS and ECDSA keys.",
            "key_types": [
              "CertFromP12Bytes",
              "KeyFromP8Bytes"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/crypto/encrypt": {
        "path": "pkg/crypto/encrypt",
        "purpose": "This folder/module is responsible for providing functions for AES encryption and decryption using CBC mode.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "encrypt.go",
          "encrypt_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating encryption functionality and its corresponding tests.",
        "file_summaries": {
          "pkg/crypto/encrypt/encrypt.go": {
            "language": "Go",
            "purpose": "This file provides functions for AES encryption and decryption using CBC mode.",
            "key_types": [
              "Encrypt",
              "Decrypt",
              "PKCS5Padding"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/crypto/encrypt/encrypt_test.go": {
            "language": "Go",
            "purpose": "This file contains tests for the encryption and decryption functionality.",
            "key_types": [
              "Test"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "pkg/crypto/hmac": {
        "path": "pkg/crypto/hmac",
        "purpose": "Responsible for HMAC (Hash-based Message Authentication Code) functionalities including signing, validation, and configuration.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "config.go",
          "funcs.go",
          "funcs_test.go",
          "hmac.go",
          "init.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating HMAC-related functionalities and configurations in separate files for better organization and maintainability.",
        "file_summaries": {
          "pkg/crypto/hmac/config.go": {
            "language": "Go",
            "purpose": "Defines a configuration structure for HMAC server settings.",
            "key_types": [
              "Config"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/crypto/hmac/funcs.go": {
            "language": "Go",
            "purpose": "Provides HMAC signing functions and utilities for generating and parsing authorization headers.",
            "key_types": [
              "SHA256",
              "SHA512",
              "Sign"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/crypto/hmac/funcs_test.go": {
            "language": "Go",
            "purpose": "Unit tests for HMAC signing functionality.",
            "key_types": [
              "TestSign"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/crypto/hmac/hmac.go": {
            "language": "Go",
            "purpose": "Implements HMAC signature validation with clock skew allowance.",
            "key_types": [
              "HMAC",
              "New",
              "ValidateSignature"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/crypto/hmac/init.go": {
            "language": "Go",
            "purpose": "Initializes a singleton instance of the HMAC structure with a configuration.",
            "key_types": [
              "init",
              "InitInstance"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "pkg/docker": {
        "path": "pkg/docker",
        "purpose": "This folder is responsible for managing various containerized services (Kafka, PostgreSQL, Redis) using Docker for testing purposes.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "helper.go",
          "kafka.go",
          "postgres.go",
          "redis.go"
        ],
        "dependencies": [
          "Testcontainers"
        ],
        "architecture": "The folder follows a modular architecture pattern, where each file encapsulates the logic for managing a specific type of container, promoting separation of concerns and reusability.",
        "file_summaries": {
          "pkg/docker/helper.go": {
            "language": "Go",
            "purpose": "Provides a function to find a free TCP port on localhost.",
            "key_types": [
              "getFreePort"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/docker/kafka.go": {
            "language": "Go",
            "purpose": "This file provides functionality to manage a Kafka container using Testcontainers.",
            "key_types": [
              "Kafka",
              "NewKafka",
              "Start",
              "Stop"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/docker/postgres.go": {
            "language": "Go",
            "purpose": "Manages a PostgreSQL database container for testing purposes using Docker.",
            "key_types": [
              "Postgres",
              "NewPostgres",
              "Start"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/docker/redis.go": {
            "language": "Go",
            "purpose": "This file manages a Redis container using Testcontainers for integration testing.",
            "key_types": [
              "Redis",
              "NewRedis",
              "Start"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/errors": {
        "path": "pkg/errors",
        "purpose": "Defines custom error types and standardizes error handling for HTTP responses.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "errors.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on error handling as a distinct component of the application.",
        "file_summaries": {
          "pkg/errors/errors.go": {
            "language": "Go",
            "purpose": "Defines custom error types and standardizes error handling for HTTP responses.",
            "key_types": [
              "Error struct",
              "Error() method",
              "ErrNotFound constant"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "pkg/helper": {
        "path": "pkg/helper",
        "purpose": "Provides various utility functions and configurations to assist with common tasks in a Go application, including data manipulation, token generation, and handling of different data types.",
        "languages": {
          "Go": 30
        },
        "key_modules": [
          "asyncq.go",
          "big.go",
          "binder.go",
          "bytes.go",
          "copy.go",
          "file.go",
          "hmac_token.go",
          "map.go",
          "mapstruct.go",
          "mapstruct_hook.go",
          "number.go",
          "operations.go",
          "pagination.go",
          "pointer.go",
          "push_token.go",
          "ronin.go",
          "slice.go",
          "strings.go",
          "sync.go",
          "time.go",
          "tls.go",
          "type.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each file encapsulates specific functionalities related to data handling, utility functions, and configurations, promoting separation of concerns and reusability.",
        "file_summaries": {
          "pkg/helper/asyncq.go": {
            "language": "Go",
            "purpose": "Configures and returns Redis connection options for the asynq library.",
            "key_types": [
              "NewAsyncQConnectConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/helper/big.go": {
            "language": "Go",
            "purpose": "Provides utility functions for handling big integers and numeric types in PostgreSQL.",
            "key_types": [
              "strToBig",
              "BigToNumeric",
              "PlusNumeric"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/binder.go": {
            "language": "go",
            "purpose": "Provides custom binding functionality for Echo framework with header support.",
            "key_types": [
              "BindFunc",
              "Bind",
              "NewBindWithHeaders"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/bytes.go": {
            "language": "Go",
            "purpose": "This file provides helper functions for handling file uploads and processing CSV data in an Echo web framework context.",
            "key_types": [
              "OpenRequestFile",
              "ParseFileToRecords",
              "EmbedBytesToResponse"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/copy.go": {
            "language": "Go",
            "purpose": "This file provides type converters for various data types using the copier library.",
            "key_types": [
              "BigIntToStrCvt",
              "NumToStrCvt",
              "StringToPgTextCvt"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/file.go": {
            "language": "Go",
            "purpose": "Extracts user addresses from a 2D slice of records with validation.",
            "key_types": [
              "ExtractUserAddresses"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/hmac_token.go": {
            "language": "Go",
            "purpose": "Generates HMAC access tokens for HTTP requests.",
            "key_types": [
              "GenerateHMACAccessToken"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/map.go": {
            "language": "Go",
            "purpose": "Provides utility functions for manipulating maps and extracting values.",
            "key_types": [
              "MapToKeys",
              "MapValOrNil",
              "MergeMap"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/mapstruct.go": {
            "language": "Go",
            "purpose": "Decodes a map into a struct and validates it using the validator package.",
            "key_types": [
              "DecodeStructAndValidate"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/mapstruct_hook.go": {
            "language": "Go",
            "purpose": "Provides helper functions for binding struct fields to environment variables and converting string representations of byte sizes.",
            "key_types": [
              "StringToByteSizeHookFunc",
              "BindStructPathsToEnvs",
              "extractMapstructurePaths"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/mapstruct_test.go": {
            "language": "go",
            "purpose": "Unit tests for decoding a struct and validating its fields using mapstructure.",
            "key_types": [
              "TestDecodeStructAndValidate"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/helper/number.go": {
            "language": "Go",
            "purpose": "Provides utility functions for parsing numbers and converting hexadecimal strings to big integers.",
            "key_types": [
              "ParseInt64",
              "ParseFloat64",
              "HexToBig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/helper/operations.go": {
            "language": "Go",
            "purpose": "Provides a generic ternary function for conditional value selection.",
            "key_types": [
              "Ternary"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/helper/pagination.go": {
            "language": "Go",
            "purpose": "Provides pagination utilities for calculating offsets and limits for paginated data.",
            "key_types": [
              "CalOffsetLimit",
              "FallbackPage",
              "FallbackPageSize"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/pointer.go": {
            "language": "Go",
            "purpose": "Provides utility functions for working with pointers in a generic way.",
            "key_types": [
              "NewPointer",
              "UnwrapOrDefault"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/helper/push_token.go": {
            "language": "Go",
            "purpose": "This file provides functions to hide sensitive tokens by obscuring their representation.",
            "key_types": [
              "HideToken",
              "HideTokens"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/helper/ronin.go": {
            "language": "Go",
            "purpose": "Provides utility functions for Ethereum address normalization and signature verification.",
            "key_types": [
              "NormalizeAddress",
              "HashMessage",
              "IsValidSignature"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/slice.go": {
            "language": "Go",
            "purpose": "Provides utility functions for manipulating slices and collections.",
            "key_types": [
              "Filter",
              "IndexOf",
              "SliceToMap"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/slice_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the SliceChunk function to validate chunking behavior of slices.",
            "key_types": [
              "TestSliceChunk",
              "args",
              "testCase"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/strings.go": {
            "language": "Go",
            "purpose": "Provides utility functions for string manipulation and fallback value handling.",
            "key_types": [
              "EllipticalTruncate",
              "FallbackNilString",
              "Capitalize"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/sync.go": {
            "language": "Go",
            "purpose": "Provides utility functions for concurrent processing and aggregation of slices.",
            "key_types": [
              "SliceRoutine",
              "Routine",
              "AggResult"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/time.go": {
            "language": "Go",
            "purpose": "Provides utility functions for handling time-related operations.",
            "key_types": [
              "NewCurrentTime",
              "NewCurrentEpoch",
              "NewZeroTime"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/helper/tls.go": {
            "language": "Go",
            "purpose": "This file provides a function to create a TLS configuration from provided certificate, key, and CA certificate.",
            "key_types": [
              "ConvertToTLSConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/helper/type.go": {
            "language": "Go",
            "purpose": "Defines a generic Set data structure for managing unique items.",
            "key_types": [
              "Set[T]",
              "NewSet[T]",
              "Add",
              "Remove",
              "Items"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/http": {
        "path": "pkg/http",
        "purpose": "Responsible for handling HTTP client configurations, server setup, routing, middleware, and performance metrics in a web application.",
        "languages": {
          "Go": 7
        },
        "key_modules": [
          "client.go",
          "client_params.go",
          "handler.go",
          "metrics.go",
          "middlewares.go",
          "server.go",
          "tracer.go"
        ],
        "dependencies": [
          "Echo framework",
          "Resty library",
          "Prometheus"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing files by functionality related to HTTP operations, including client, server, and middleware components.",
        "file_summaries": {
          "pkg/http/client.go": {
            "language": "Go",
            "purpose": "Defines HTTP client configuration and error handling for making HTTP requests.",
            "key_types": [
              "RequestError",
              "AuthConfig",
              "ClientConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/http/client_params.go": {
            "language": "Go",
            "purpose": "Defines parameters and authentication methods for HTTP requests using the Resty library.",
            "key_types": [
              "RequestParam",
              "WithQueryParams",
              "WithAuthToken"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/http/handler.go": {
            "language": "Go",
            "purpose": "Defines HTTP handlers and routing setup for a web application using Echo framework.",
            "key_types": [
              "Handler",
              "GroupHandlers",
              "healthHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/http/metrics.go": {
            "language": "Go",
            "purpose": "This file provides metrics for HTTP client performance using Prometheus.",
            "key_types": [
              "MetricsHistogramOpt",
              "MetricsAfterNextOpt",
              "gaugeVec"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/http/middlewares.go": {
            "language": "Go",
            "purpose": "Defines middleware for handling errors in HTTP requests using Echo framework.",
            "key_types": [
              "GlobalErrorHandler",
              "ErrorHandler",
              "GormRecordNotFoundHandler"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/http/server.go": {
            "language": "Go",
            "purpose": "Defines an HTTP server with middleware support and health check functionality.",
            "key_types": [
              "ServerConfig",
              "Server",
              "NewServer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/http/tracer.go": {
            "language": "Go",
            "purpose": "This file implements tracing for HTTP connections to monitor their lifecycle and performance metrics.",
            "key_types": [
              "TracingConn",
              "TracingDialer",
              "TracingRoundTripper"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/id-generator": {
        "path": "pkg/id-generator",
        "purpose": "Generates unique IDs using the Sonyflake algorithm.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "sonyflake.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating the ID generation logic in a single file with a clear purpose.",
        "file_summaries": {
          "pkg/id-generator/sonyflake.go": {
            "language": "Go",
            "purpose": "Generates unique IDs using the Sonyflake algorithm.",
            "key_types": [
              "IDGeneratorConfig",
              "IDGenerator",
              "NewIDGenerator"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/loggers": {
        "path": "pkg/loggers",
        "purpose": "Responsible for configuring and initializing various logging mechanisms, including Sentry and Zap, for error tracking and logging levels.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "sentry.go",
          "zap.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating logging configurations and initializations in separate files for maintainability and clarity.",
        "file_summaries": {
          "pkg/loggers/sentry.go": {
            "language": "Go",
            "purpose": "Configures and initializes a Sentry logger for error tracking.",
            "key_types": [
              "SentryConfig",
              "NewSentryLogger",
              "validate"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/loggers/zap.go": {
            "language": "Go",
            "purpose": "This file configures and creates a Zap logger with custom encoding for logging levels.",
            "key_types": [
              "NewZapLogger",
              "MustNewLogger",
              "LoggerConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/metrics": {
        "path": "pkg/metrics",
        "purpose": "This folder/module is responsible for collecting, managing, and pushing metrics for monitoring services using Prometheus.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "metric.go",
          "ops.go",
          "pusher.go",
          "registry.go",
          "server.go"
        ],
        "dependencies": [
          "Prometheus"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating different aspects of metrics handling such as collection, observation, pushing, and server management.",
        "file_summaries": {
          "pkg/metrics/metric.go": {
            "language": "Go",
            "purpose": "This file provides metrics collection utilities using Prometheus for monitoring services.",
            "key_types": [
              "NewHistogram",
              "NewCounter",
              "New"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/metrics/ops.go": {
            "language": "Go",
            "purpose": "This file provides functions to observe and measure the execution time of operations using Prometheus metrics.",
            "key_types": [
              "ObserveT",
              "ObserveTE",
              "ObserveTuple2"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/metrics/pusher.go": {
            "language": "Go",
            "purpose": "Implements a metrics pusher that sends data to a Prometheus push gateway.",
            "key_types": [
              "PusherConfig",
              "Pusher",
              "NewPusher"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/metrics/registry.go": {
            "language": "Go",
            "purpose": "Manages Prometheus metric collectors with caching and registration functionality.",
            "key_types": [
              "cachedRegistry",
              "GetOrRegisterCollector",
              "CollectorCreator"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/metrics/server.go": {
            "language": "Go",
            "purpose": "This file implements a metrics server using Prometheus for monitoring HTTP server metrics.",
            "key_types": [
              "Server",
              "prometheusHandler",
              "NewServer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/middlewares": {
        "path": "pkg/middlewares",
        "purpose": "Defines middleware configurations and functions for an Echo web server.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "echo.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating middleware functionalities specific to the Echo web framework.",
        "file_summaries": {
          "pkg/middlewares/echo.go": {
            "language": "Go",
            "purpose": "Defines middleware configurations and functions for an Echo web server.",
            "key_types": [
              "EchoLoggerConfig",
              "EchoPrometheusConfig",
              "NewEchoMiddleware"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/redis": {
        "path": "pkg/redis",
        "purpose": "This folder/module is responsible for providing a Redis client and instance implementation for connecting to and interacting with a Redis database.",
        "languages": {
          "Go": 2
        },
        "key_modules": [
          "client.go",
          "instance.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating Redis client and instance functionalities in separate files for better organization and maintainability.",
        "file_summaries": {
          "pkg/redis/client.go": {
            "language": "Go",
            "purpose": "Defines a Redis client configuration and creation logic for connecting to a Redis database.",
            "key_types": [
              "Redis",
              "MakeRedisClient",
              "createClient"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/redis/instance.go": {
            "language": "Go",
            "purpose": "This file provides a Redis instance implementation for setting and getting key-value pairs.",
            "key_types": [
              "RedisInstance",
              "NewRedisInstance",
              "redisInstance"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/sarama-kafka": {
        "path": "pkg/sarama-kafka",
        "purpose": "This folder/module is responsible for configuring and implementing Kafka client functionalities using the Sarama library, including producers and consumers.",
        "languages": {
          "Go": 6
        },
        "key_modules": [
          "client.go",
          "config.go",
          "consumer.go",
          "consumer_test.go",
          "metrics.go",
          "producer.go"
        ],
        "dependencies": [
          "Sarama",
          "Prometheus"
        ],
        "architecture": "The folder follows a modular architecture pattern, organizing files by functionality related to Kafka client operations, including configuration, production, consumption, and metrics.",
        "file_summaries": {
          "pkg/sarama-kafka/client.go": {
            "language": "Go",
            "purpose": "Configures Sarama Kafka client settings based on provided configuration.",
            "key_types": [
              "saramaConfig",
              "setBrokerConfig",
              "setConsumerConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/sarama-kafka/config.go": {
            "language": "Go",
            "purpose": "Configuration management for Kafka producer and consumer settings.",
            "key_types": [
              "Config",
              "Offset",
              "Producer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/sarama-kafka/consumer.go": {
            "language": "Go",
            "purpose": "Implements a Kafka consumer using the Sarama library for message processing.",
            "key_types": [
              "Consumer",
              "MessageHandler",
              "NewConsumer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/sarama-kafka/consumer_test.go": {
            "language": "Go",
            "purpose": "Unit tests for Kafka consumer functionality using Sarama.",
            "key_types": [
              "testMsg",
              "testHandler",
              "TestProduceAndConsume"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/sarama-kafka/metrics.go": {
            "language": "Go",
            "purpose": "This file defines metrics for Kafka consumer performance using Prometheus.",
            "key_types": [
              "consumerMetrics",
              "initConsumerMetrics"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/sarama-kafka/producer.go": {
            "language": "Go",
            "purpose": "Creates a new synchronous Kafka producer using the Sarama library.",
            "key_types": [
              "NewKafkaProducer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "pkg/storages": {
        "path": "pkg/storages",
        "purpose": "This folder/module is responsible for managing database connections and configurations, specifically for PostgreSQL.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "postgre_sql.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on database storage solutions with a clear separation of configuration and initialization logic.",
        "file_summaries": {
          "pkg/storages/postgre_sql.go": {
            "language": "Go",
            "purpose": "This file provides a configuration and initialization function for connecting to a PostgreSQL database using GORM.",
            "key_types": [
              "PostgresConfig",
              "NewPostgreSQL"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/types": {
        "path": "pkg/types",
        "purpose": "Defines various types and utilities for handling specific data representations and validations.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "string-enums.go",
          "wrapped-address.go",
          "wrapped-big.go",
          "wrapped-string.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating type definitions and related functionalities in separate files for clarity and maintainability.",
        "file_summaries": {
          "pkg/types/string-enums.go": {
            "language": "Go",
            "purpose": "Defines a StringEnum interface for types that represent string enumerations.",
            "key_types": [
              "StringEnum"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/types/wrapped-address.go": {
            "language": "Go",
            "purpose": "Defines a wrapped address type for Ethereum and Solana with validation and serialization methods.",
            "key_types": [
              "WAddress",
              "IsValidSolanaAddress",
              "WAddressFromStr"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/types/wrapped-big.go": {
            "language": "Go",
            "purpose": "Defines a BigInt type for handling large integers with various base conversions.",
            "key_types": [
              "BigInt",
              "BigIntFromStr",
              "WrapBigInt"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/types/wrapped-string.go": {
            "language": "Go",
            "purpose": "Defines a NonEmptyStr type that ensures a string is non-empty and provides JSON marshaling/unmarshaling.",
            "key_types": [
              "NonEmptyStr",
              "NewNonEmptyStr",
              "Value"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "pkg/validation": {
        "path": "pkg/validation",
        "purpose": "This folder/module is responsible for providing validation functionality for data structures, including custom error handling and validation logic.",
        "languages": {
          "Go": 3
        },
        "key_modules": [
          "error.go",
          "validate.go",
          "validator.go"
        ],
        "dependencies": [
          "validator package"
        ],
        "architecture": "The folder follows a modular architecture pattern, encapsulating validation logic, error handling, and custom validation types in separate files for maintainability and clarity.",
        "file_summaries": {
          "pkg/validation/error.go": {
            "language": "Go",
            "purpose": "Defines custom error types for validation errors.",
            "key_types": [
              "Error",
              "Errors",
              "Error()"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/validation/validate.go": {
            "language": "Go",
            "purpose": "This file provides validation functionality for struct data using the validator package.",
            "key_types": [
              "InitValidate",
              "RegisterCustomValidation",
              "ValidateStruct"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/validation/validator.go": {
            "language": "Go",
            "purpose": "Provides custom validation logic and messages for data structures using the validator package.",
            "key_types": [
              "Validator interface",
              "customValidator struct",
              "New function"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "pkg/worker": {
        "path": "pkg/worker",
        "purpose": "Responsible for managing a pool of workers to process jobs concurrently.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "config.go",
          "dispatcher.go",
          "job.go",
          "worker.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, encapsulating worker management and job execution functionalities.",
        "file_summaries": {
          "pkg/worker/config.go": {
            "language": "Go",
            "purpose": "Defines the configuration structure for the worker package.",
            "key_types": [
              "Config"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/worker/dispatcher.go": {
            "language": "Go",
            "purpose": "Manages a pool of workers to process jobs concurrently.",
            "key_types": [
              "Dispatcher",
              "NewDispatcher",
              "Run"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "pkg/worker/job.go": {
            "language": "Go",
            "purpose": "Defines a Job struct that holds a function to execute.",
            "key_types": [
              "Job"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "pkg/worker/worker.go": {
            "language": "Go",
            "purpose": "Defines a Worker struct that manages job execution in a worker pool.",
            "key_types": [
              "Worker",
              "NewWorker",
              "Start",
              "Stop"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "root": {
        "path": "root",
        "purpose": "This folder/module is responsible for the configuration and documentation of the Ronin Wallet microservices ecosystem.",
        "languages": {
          "Go": 1,
          "Markdown": 2,
          "YAML": 4,
          "bash": 1
        },
        "key_modules": [
          ".golangci.yaml",
          ".mockery.yaml",
          "README.md",
          "SECURITY.md",
          "config.go",
          "docker-compose.yml",
          "entrypoint.sh"
        ],
        "dependencies": [
          "GolangCI-Lint",
          "Mockery",
          "Docker",
          "PostgreSQL",
          "Redis",
          "Kafka"
        ],
        "architecture": "The folder follows a microservices architecture pattern, utilizing Docker for containerization and configuration files for service management.",
        "file_summaries": {
          ".golangci.yaml": {
            "language": "YAML",
            "purpose": "Configuration file for GolangCI-Lint to manage linting rules and settings for Go projects.",
            "key_types": [
              "linters-settings",
              "rules",
              "checks"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          ".mockery.yaml": {
            "language": "YAML",
            "purpose": "Configuration file for Mockery, a mocking framework for PHP.",
            "key_types": [
              "with-expecter",
              "case"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "README.md": {
            "language": "Markdown",
            "purpose": "Documentation for the Ronin Wallet microservices ecosystem.",
            "key_types": [
              "User Layer",
              "Admin Layer",
              "Core Services Layer"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "SECURITY.md": {
            "language": "Markdown",
            "purpose": "Documents the security policy and vulnerability reporting process for the project.",
            "key_types": [],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "config.go": {
            "language": "Go",
            "purpose": "Defines the main configuration structure for the application.",
            "key_types": [
              "Config",
              "ApplicationConfig",
              "ServerConfig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "docker-compose.yml": {
            "language": "YAML",
            "purpose": "Defines a multi-container Docker application with PostgreSQL, Redis, Kafka, and a Kafka console.",
            "key_types": [
              "services",
              "environment variables",
              "ports"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "entrypoint.sh": {
            "language": "bash",
            "purpose": "This script checks for required environment variables and executes a binary with a specified configuration.",
            "key_types": [
              "environment variable check",
              "binary execution"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "sql_migrations": {
        "path": "sql_migrations",
        "purpose": "This folder is responsible for managing database schema changes through SQL migration scripts.",
        "languages": {
          "SQL": 59
        },
        "key_modules": [
          "00001_init_schema.sql",
          "00002_reward_schema_adaptation.sql",
          "00003_reward_pool_modification.sql",
          "00004_reward_pool_related.sql",
          "00005_integrate_discord_x_verification.sql",
          "00006_update_reward_pool_status.sql",
          "00007_reward_pool_top_up_record.sql",
          "00008_claim_reward.sql",
          "00009_create_table_guidance.sql",
          "00010_view_audit_role.sql"
        ],
        "dependencies": [],
        "architecture": "The folder follows a sequential migration pattern where each file represents a specific change to the database schema, allowing for version control and rollback capabilities.",
        "file_summaries": {
          "sql_migrations/00001_init_schema.sql": {
            "language": "SQL",
            "purpose": "Initial schema setup for database with custom types and collation.",
            "key_types": [
              "ENUM types for status, frequency, reward_claim_status"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00002_reward_schema_adaptation.sql": {
            "language": "SQL",
            "purpose": "This file defines and modifies database schemas related to reward pools and campaigns.",
            "key_types": [
              "ENUM types",
              "ALTER TABLE statements",
              "CREATE TABLE statements"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00003_reward_pool_modification.sql": {
            "language": "SQL",
            "purpose": "Modifies the 'actions' table to update and standardize activity types using an ENUM type.",
            "key_types": [
              "CREATE TYPE",
              "ALTER TABLE",
              "UPDATE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00004_reward_pool_related.sql": {
            "language": "SQL",
            "purpose": "This file contains migration scripts to modify the reward_fund_sources table and update the reward_pool_status type.",
            "key_types": [
              "ALTER TYPE",
              "ALTER TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00005_integrate_discord_x_verification.sql": {
            "language": "SQL",
            "purpose": "Creates tables to manage verification actions for Discord and Twitter users in quests.",
            "key_types": [
              "CREATE TABLE participant_discord_actions",
              "CREATE TABLE participant_twitter_actions",
              "DROP TABLE participant_discord_actions"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00006_update_reward_pool_status.sql": {
            "language": "SQL",
            "purpose": "Updates the reward pool status and modifies the reward_pools and roles tables.",
            "key_types": [
              "ALTER TYPE",
              "ALTER TABLE",
              "UPDATE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00007_reward_pool_top_up_record.sql": {
            "language": "SQL",
            "purpose": "Defines a migration for creating and dropping a table related to reward pool top-up transactions.",
            "key_types": [
              "CREATE TABLE",
              "ALTER TABLE",
              "DROP TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00008_claim_reward.sql": {
            "language": "SQL",
            "purpose": "This file defines database migrations for managing participant rewards and related statuses.",
            "key_types": [
              "CREATE TYPE",
              "CREATE TABLE",
              "ALTER TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00009_create_table_guidance.sql": {
            "language": "SQL",
            "purpose": "Creates a new table for activities guidance and updates permissions for roles.",
            "key_types": [
              "INSERT",
              "UPDATE",
              "CREATE TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00010_view_audit_role.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to update database schema and permissions related to audit roles and participant rewards.",
            "key_types": [
              "ALTER TYPE",
              "UPDATE",
              "ALTER TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00011_safely_use_enum.sql": {
            "language": "SQL",
            "purpose": "This file defines a migration to add and remove permissions in a database.",
            "key_types": [
              "INSERT INTO permissions",
              "UPDATE roles"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00012_add_quest_id_to_quest_history_logs.sql": {
            "language": "SQL",
            "purpose": "Adds a quest_id column to the quest_history_logs table.",
            "key_types": [
              "ALTER TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00013_unregister_activity.sql": {
            "language": "SQL",
            "purpose": "Defines a database migration for adding match types and results, and creating a game match history logs table.",
            "key_types": [
              "ENUM match_types",
              "ENUM match_results",
              "TABLE game_match_history_logs"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00014_update_action_enum.sql": {
            "language": "SQL",
            "purpose": "Updates the permission_action enum and inserts new permissions into the permissions table.",
            "key_types": [
              "ALTER TYPE",
              "INSERT INTO",
              "UPDATE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00015_constraint_reward_address.sql": {
            "language": "SQL",
            "purpose": "This file defines a database migration that adds a unique constraint and modifies enum types.",
            "key_types": [
              "ALTER TABLE",
              "ALTER TYPE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00016_game_match.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to modify the game_match_history_logs and reward_pools tables.",
            "key_types": [
              "ALTER TABLE",
              "PRIMARY KEY",
              "RENAME COLUMN"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00017_user_reward_amount.sql": {
            "language": "SQL",
            "purpose": "This file contains migration scripts to modify the participant_rewards table by altering columns related to reward amounts.",
            "key_types": [
              "ALTER TABLE",
              "DROP COLUMN",
              "ADD COLUMN"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00018_complete_quest_time.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to update the database schema for quest completion tracking.",
            "key_types": [
              "ALTER TABLE",
              "CREATE TYPE",
              "UPDATE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00019_sponsor_api.sql": {
            "language": "SQL",
            "purpose": "This file manages database migrations for adding and removing sponsor-related permissions.",
            "key_types": [
              "ALTER TYPE",
              "INSERT INTO",
              "UPDATE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00020_remove_distribution_permission.sql": {
            "language": "SQL",
            "purpose": "Removes and restores a specific permission from the roles table for the 'quest_master' role.",
            "key_types": [
              "UPDATE",
              "SELECT"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00021_numeric_columns.sql": {
            "language": "SQL",
            "purpose": "Migrates numeric columns in quest_rewards and reward_pools tables to a new numeric format.",
            "key_types": [
              "ALTER TABLE",
              "UPDATE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00022_migration_name_.sql": {
            "language": "SQL",
            "purpose": "Defines a database migration with up and down SQL queries.",
            "key_types": [],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00023_manual_update_distribution.sql": {
            "language": "SQL",
            "purpose": "This file defines a database migration to add a new permission and update roles accordingly.",
            "key_types": [
              "ALTER TYPE",
              "INSERT INTO",
              "UPDATE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00024_remove_granting_flow.sql": {
            "language": "SQL",
            "purpose": "This file manages the migration of database schema changes related to reward pools and participant reward pools.",
            "key_types": [
              "DROP TABLE",
              "ALTER TABLE",
              "CREATE TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00025_internal_release.sql": {
            "language": "SQL",
            "purpose": "Defines a migration for creating and dropping the quest_whitelists table and updating quest_infos.",
            "key_types": [
              "CREATE TABLE",
              "UPDATE",
              "DROP TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00026_first_come_first_serve.sql": {
            "language": "SQL",
            "purpose": "This file contains database migration scripts for modifying tables and types related to quest rewards and permissions.",
            "key_types": [
              "resource_amount_type",
              "participant_reward_status",
              "permission_action"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00027_verify_new_activities.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to modify database schema and types related to activities and logs.",
            "key_types": [
              "ALTER TABLE",
              "CREATE TABLE",
              "CREATE TYPE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00028_adjust_purchase_history.sql": {
            "language": "SQL",
            "purpose": "Adjusts the schema of the purchase_history_logs table by modifying primary keys and adding a new column.",
            "key_types": [
              "ALTER TABLE",
              "PRIMARY KEY",
              "CONSTRAINT"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00029_quest_data_game_and_checkin.sql": {
            "language": "SQL",
            "purpose": "Creates and drops the game_played_logs table for tracking game play data.",
            "key_types": [
              "CREATE TABLE",
              "DROP TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00030_distribute_permission.sql": {
            "language": "SQL",
            "purpose": "This file contains migration scripts to add and remove a permission ID for the 'quest_master' role.",
            "key_types": [
              "UPDATE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00031_discovery_center.sql": {
            "language": "SQL",
            "purpose": "Defines enum types and creates tables for a discovery center feature in a database.",
            "key_types": [
              "discovery_layouts",
              "discovery_widgets",
              "discovery_widget_items"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00032_quest_table_indexes.sql": {
            "language": "SQL",
            "purpose": "Defines SQL migrations for creating and dropping indexes on specific tables.",
            "key_types": [
              "CREATE INDEX",
              "DROP INDEX"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00033_quest_master_view_roles.sql": {
            "language": "SQL",
            "purpose": "This file defines a migration to update role permissions for 'quest_master'.",
            "key_types": [
              "UPDATE",
              "SELECT"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00034_fullpage_widget.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to update the database schema and manage data for widgets and social platforms.",
            "key_types": [
              "ALTER TABLE",
              "INSERT INTO",
              "ALTER TYPE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00035_prod_schema_patch.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to update the production database schema and seed initial data.",
            "key_types": [
              "ALTER TABLE",
              "INSERT INTO",
              "CREATE TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00036_add_studios.sql": {
            "language": "SQL",
            "purpose": "This file adds multiple studio entries to the discovery_studios table in the database.",
            "key_types": [
              "INSERT INTO"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00037_category_values.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration commands to update the discovery_categories table by truncating it, adding a new column, and inserting category values.",
            "key_types": [
              "TRUNCATE",
              "ALTER TABLE",
              "INSERT INTO"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00038_community_gaming.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to insert data into discovery_studios and discovery_categories tables.",
            "key_types": [
              "INSERT INTO discovery_studios",
              "INSERT INTO discovery_categories"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00039_studios_auto_increase.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to create a sequence and reassign IDs for the discovery_studios table.",
            "key_types": [
              "CREATE SEQUENCE",
              "UPDATE",
              "ALTER TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00040_widget_trending_token.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to modify database types and tables for widget functionality.",
            "key_types": [
              "ALTER TYPE",
              "ALTER TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00041_discovery_calendar_event.sql": {
            "language": "SQL",
            "purpose": "Defines a new table for discovery event items and modifies existing types for event categorization.",
            "key_types": [
              "discovery_event_items",
              "event_type",
              "widget_item_type"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00042_quest_drop_reward_constraints.sql": {
            "language": "SQL",
            "purpose": "This file modifies the database schema by dropping specific constraints and adding new columns to the reward_infos table.",
            "key_types": [
              "ALTER TYPE",
              "ALTER TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00043_quest_user_reward_index.sql": {
            "language": "SQL",
            "purpose": "Creates indexes on the participant_rewards table for optimizing query performance.",
            "key_types": [
              "CREATE INDEX"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00044_quest_ron_stacked_activity.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration commands to modify the 'activity_type' and 'platforms' enums by adding new values.",
            "key_types": [
              "ALTER TYPE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00045_discovery_home_banner.sql": {
            "language": "SQL",
            "purpose": "This file defines database migrations for creating tables related to discovery home banners and action logs.",
            "key_types": [
              "discovery_home_banner_items",
              "discovery_action_logs",
              "widget_item_type"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00046_discovery_feature_introduction.sql": {
            "language": "SQL",
            "purpose": "Creates tables and indexes for managing discovery feature banners and associated data.",
            "key_types": [
              "discovery_feature_banners",
              "discovery_banner_headlines",
              "discovery_action_logs"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00047_user_activity_index.sql": {
            "language": "SQL",
            "purpose": "Creates indexes for optimizing queries on participant_quests and participant_actions tables.",
            "key_types": [
              "CREATE INDEX"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00048_quest_center_v2.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to modify the database schema for quest-related tables.",
            "key_types": [
              "ALTER TABLE",
              "CREATE INDEX",
              "UPDATE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00049_quest_on_offchain_activity.sql": {
            "language": "SQL",
            "purpose": "This file defines a migration to alter activity types and platforms in the database.",
            "key_types": [
              "ALTER TYPE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00050_new_widget.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration commands to modify the schema of discovery_widget_items and discovery_widgets tables.",
            "key_types": [
              "ALTER TABLE",
              "ALTER TYPE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00051_discovery_auth_v2.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to update the schema of discovery-related tables by modifying columns.",
            "key_types": [
              "ALTER TABLE",
              "UPDATE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00052_profile_as_precondition.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to add and remove a column in the quest_infos table.",
            "key_types": [
              "ALTER TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00053_ronin_fest.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to modify database schema and create new tables for a quest and event management system.",
            "key_types": [
              "ALTER TABLE",
              "CREATE TABLE",
              "SELECT"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00054_add_reward_performance_indexes.sql": {
            "language": "SQL",
            "purpose": "This file adds and removes indexes to optimize database queries related to rewards and quests.",
            "key_types": [
              "CREATE INDEX",
              "DROP INDEX",
              "ALTER TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00055_pool_reward_amount.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration commands to modify the quest_rewards and quest_pools tables.",
            "key_types": [
              "ALTER TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00056_point_tracker.sql": {
            "language": "SQL",
            "purpose": "Creates and drops the point_trackers table for tracking user points in a rewards system.",
            "key_types": [
              "CREATE TABLE",
              "DROP TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/00057_ronin_fest_event_update.sql": {
            "language": "SQL",
            "purpose": "This file contains SQL migration scripts to update the events table and create related tables for event sponsorships and user interactions.",
            "key_types": [
              "events",
              "event_sponsors",
              "user_events"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00058_shop_schema_complete.sql": {
            "language": "SQL",
            "purpose": "Defines the complete schema for a shop including item types, categories, tiers, and items.",
            "key_types": [
              "shop_item_type",
              "shop_categories",
              "shop_item_tiers",
              "shop_items"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/00059_allow_temp_premium_users.sql": {
            "language": "SQL",
            "purpose": "Creates a temporary table for premium users with unique constraints and an index.",
            "key_types": [
              "CREATE TABLE",
              "CREATE INDEX"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "sql_migrations/devices": {
        "path": "sql_migrations/devices",
        "purpose": "Responsible for managing database migrations related to device management, including table creation and indexing.",
        "languages": {
          "SQL": 2
        },
        "key_modules": [
          "20221114150000_init.sql",
          "20230405150000_add_device_id_index.sql"
        ],
        "dependencies": [],
        "architecture": "The folder follows a migration-based architecture pattern, where SQL scripts are used to manage database schema changes over time.",
        "file_summaries": {
          "sql_migrations/devices/20221114150000_init.sql": {
            "language": "SQL",
            "purpose": "Initializes the devices table and related types for device management in a database.",
            "key_types": [
              "CREATE TABLE devices",
              "CREATE TYPE device_status",
              "CREATE TYPE device_platform"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/devices/20230405150000_add_device_id_index.sql": {
            "language": "SQL",
            "purpose": "Creates and drops an index on the 'devices' table for the 'id' column.",
            "key_types": [
              "CREATE INDEX",
              "DROP INDEX"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "sql_migrations/manager-v3": {
        "path": "sql_migrations/manager-v3",
        "purpose": "Responsible for managing SQL migrations for version 3 of the application, including initial setup and notification schema.",
        "languages": {
          "SQL": 2
        },
        "key_modules": [
          "00001_init.sql",
          "00002_noti.sql"
        ],
        "dependencies": [],
        "architecture": "The folder follows a sequential migration pattern where each SQL file represents a specific migration step in the database schema evolution.",
        "file_summaries": {
          "sql_migrations/manager-v3/00001_init.sql": {
            "language": "SQL",
            "purpose": "Initial database schema setup for version management and updates.",
            "key_types": [
              "v3_versions",
              "v3_mandatory_updates",
              "v3_histories"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/manager-v3/00002_noti.sql": {
            "language": "SQL",
            "purpose": "Defines database schema for notifications and their whitelists in version 3.",
            "key_types": [
              "v3_notifications",
              "v3_notification_whitelists",
              "indexes"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "sql_migrations/proxy": {
        "path": "sql_migrations/proxy",
        "purpose": "Responsible for managing database migrations related to tokens, contract signatures, and associated categories for a proxy service.",
        "languages": {
          "SQL": 6
        },
        "key_modules": [
          "00001_tokens.sql",
          "00002_contract_abi.sql",
          "00003_signature_category.sql",
          "00004_dapp_sites.sql",
          "00005_signature_category_txkind.sql",
          "00006_refactor_signature_category.sql"
        ],
        "dependencies": [],
        "architecture": "The folder follows a sequential migration pattern where each file represents a specific migration step for the database schema.",
        "file_summaries": {
          "sql_migrations/proxy/00001_tokens.sql": {
            "language": "SQL",
            "purpose": "Defines database schema for tokens and their platforms with migration support.",
            "key_types": [
              "CREATE TABLE tokens",
              "CREATE TABLE token_platforms",
              "DROP TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "sql_migrations/proxy/00002_contract_abi.sql": {
            "language": "SQL",
            "purpose": "Defines a migration for creating and dropping a table for storing Solidity contract signatures.",
            "key_types": [
              "CREATE TABLE",
              "DROP TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/proxy/00003_signature_category.sql": {
            "language": "SQL",
            "purpose": "Creates and drops the signature_categories table for managing signature categories in the database.",
            "key_types": [
              "CREATE TABLE",
              "DROP TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/proxy/00004_dapp_sites.sql": {
            "language": "SQL",
            "purpose": "Defines a migration script to create and drop the dapp_sites table.",
            "key_types": [
              "CREATE TABLE",
              "DROP TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/proxy/00005_signature_category_txkind.sql": {
            "language": "SQL",
            "purpose": "This file contains migration scripts to add and remove columns in the signature_categories table.",
            "key_types": [
              "ALTER TABLE",
              "SELECT"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "sql_migrations/proxy/00006_refactor_signature_category.sql": {
            "language": "SQL",
            "purpose": "This file contains migration scripts to add and remove a 'category' column in the 'solidity_signatures' table.",
            "key_types": [
              "ALTER TABLE"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "tests": {
        "path": "tests",
        "purpose": "This folder contains unit tests for various functionalities of the application, ensuring that individual components work as expected.",
        "languages": {
          "go": 8
        },
        "key_modules": [
          "batch_sig_test.go",
          "hash_to_addres_test.go",
          "http_parse_test.go",
          "http_template_test.go",
          "quest_test.go",
          "siwe_test.go",
          "slack_alert_test.go",
          "utils.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each test file corresponds to a specific functionality or component of the application, promoting separation of concerns and maintainability.",
        "file_summaries": {
          "tests/batch_sig_test.go": {
            "language": "go",
            "purpose": "Unit test for the GetClaimRewardSig function in the RewardHandler.",
            "key_types": [
              "Test_GetBatchSig"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/hash_to_addres_test.go": {
            "language": "go",
            "purpose": "Unit test for converting a hash to an Ethereum address.",
            "key_types": [
              "TestHashToAddress"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "tests/http_parse_test.go": {
            "language": "go",
            "purpose": "This file contains unit tests for parsing URLs and verifying their hostnames.",
            "key_types": [
              "Test_Parse_URL"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "tests/http_template_test.go": {
            "language": "go",
            "purpose": "Tests the parsing and execution of an HTML template for HTTP responses.",
            "key_types": [
              "Test_HttpTemplateParseText_NoError"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          },
          "tests/quest_test.go": {
            "language": "go",
            "purpose": "Unit tests for streak calculation in wallet check-in logs.",
            "key_types": [
              "TestFindStreak_ShouldNot_BreakStreak",
              "TestFindStreak_Should_BreakStreak"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/siwe_test.go": {
            "language": "go",
            "purpose": "Unit tests for verifying the signature and recovery of Ethereum messages.",
            "key_types": [
              "Test_Siwe",
              "Test_Siwe2"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/slack_alert_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the Slack alert service functionality.",
            "key_types": [
              "Test_SendAlertSlack"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/utils.go": {
            "language": "Go",
            "purpose": "Defines a no-operation logger for testing purposes.",
            "key_types": [
              "SugaredLogger"
            ],
            "functions": null,
            "imports": null,
            "complexity": "low"
          }
        }
      },
      "tests/handlers": {
        "path": "tests/handlers",
        "purpose": "This folder is responsible for unit testing various handler functions related to activities, quests, rewards, and user roles in the ronin-wallet-services project.",
        "languages": {
          "Go": 6
        },
        "key_modules": [
          "activity_test.go",
          "helpers_test.go",
          "participant_quest_test.go",
          "quest_test.go",
          "reward_test.go",
          "user_role_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each test file corresponds to a specific handler functionality, ensuring separation of concerns and maintainability.",
        "file_summaries": {
          "tests/handlers/activity_test.go": {
            "language": "Go",
            "purpose": "Unit tests for activity handler functions in the ronin-wallet-services project.",
            "key_types": [
              "TestTryModifyQuest",
              "TestGenerateID",
              "TestBulkInsert"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/handlers/helpers_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the QuestStateMachine transitions in the handlers package.",
            "key_types": [
              "TestStateMachine_On_Submit",
              "TestStateMachine_On_CopywriterApprove",
              "TestStateMachine_On_CopywriterReject"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/handlers/participant_quest_test.go": {
            "language": "Go",
            "purpose": "Unit tests for participant quest handler functionalities.",
            "key_types": [
              "PQuestHandlerTestKit",
              "testing.T",
              "mock_services.IDGenerator"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/handlers/quest_test.go": {
            "language": "Go",
            "purpose": "Unit tests for quest-related handler functions in the application.",
            "key_types": [
              "TestFindQuests",
              "TestUpdateQuest",
              "TestCreateQuestRewards"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/handlers/reward_test.go": {
            "language": "Go",
            "purpose": "Unit tests for reward handling functionalities in the handlers package.",
            "key_types": [
              "TestRewardHandler",
              "TestFindRewardInfoByID",
              "TestBulkInsert"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/handlers/user_role_test.go": {
            "language": "Go",
            "purpose": "Unit tests for user role handler functions in the application.",
            "key_types": [
              "TestCreateRole_ShouldNot_ReturnError",
              "TestCreateRole_Should_ReturnError"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "tests/repositories": {
        "path": "tests/repositories",
        "purpose": "This folder contains unit tests for various repository implementations within the application, ensuring the correctness of data handling and operations.",
        "languages": {
          "Go": 4
        },
        "key_modules": [
          "crawled_data_test.go",
          "game_played_logs_test.go",
          "purchase_history_logs_test.go",
          "quest_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, where each test file corresponds to a specific repository, promoting separation of concerns and ease of maintenance.",
        "file_summaries": {
          "tests/repositories/crawled_data_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the CrawledDataRepository in the repositories package.",
            "key_types": [
              "TestFindTotalGameMatch"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/repositories/game_played_logs_test.go": {
            "language": "go",
            "purpose": "Unit tests for the GamePlayedLogs repository, validating upsert and cleanup functionality.",
            "key_types": [
              "TestGamePlayedUpsertAndCleanup"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/repositories/purchase_history_logs_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the PurchaseHistoryLogsRepository's UpsertBatch method.",
            "key_types": [
              "TestPurchaseHistoryUpsert"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/repositories/quest_test.go": {
            "language": "go",
            "purpose": "Unit tests for the QuestRepository in the repositories package.",
            "key_types": [
              "TestQuestRepo_FindByActivityTypes"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "tests/services": {
        "path": "tests/services",
        "purpose": "This folder is responsible for containing unit tests for various service functionalities within the application.",
        "languages": {
          "Go": 6
        },
        "key_modules": [
          "atia_blessing_test.go",
          "check_in_game_test.go",
          "check_in_wallet_test.go",
          "distribute_reward_test.go",
          "offchain_action_test.go",
          "ron_staked_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on unit testing individual service components to ensure functionality and reliability.",
        "file_summaries": {
          "tests/services/atia_blessing_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the Atia blessing service functionality.",
            "key_types": [
              "Test_PullPrayHistoryFromData_ShouldReturnCorrectStreak"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/services/check_in_game_test.go": {
            "language": "Go",
            "purpose": "Contains unit tests for the check-in game service functionality.",
            "key_types": [
              "TestCheckInGame",
              "TestCheckInGameWithInvalidData",
              "TestCheckInGameEdgeCases"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/services/check_in_wallet_test.go": {
            "language": "Go",
            "purpose": "Unit test for the CheckInWalletService's CheckInStreak method.",
            "key_types": [
              "Test_ChecKInStreak"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/services/distribute_reward_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the reward distribution service in the Ronin wallet application.",
            "key_types": [
              "Test_DistributeReward"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/services/offchain_action_test.go": {
            "language": "Go",
            "purpose": "Unit tests for off-chain action functionality in the services package.",
            "key_types": [
              "Test_OffChainAction_Once_ShouldReturnQuestComplete"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/services/ron_staked_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the staking service related to quest completion in the Ronin wallet services.",
            "key_types": [
              "Test_StakedRon_ShouldReturnQuestComplete"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "tests/services/check-in-trackers": {
        "path": "tests/services/check-in-trackers",
        "purpose": "Unit tests for the check-in streak functionality in the game data service.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "game_data_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a test-driven development approach, focusing on unit tests to validate the functionality of the check-in streak feature.",
        "file_summaries": {
          "tests/services/check-in-trackers/game_data_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the check-in streak functionality in the game data service.",
            "key_types": [
              "Test_CheckInStreak_CurrentEqualMaxStreak",
              "Test_CheckInStreak_BreakStreakCurrentLessThanMaxStreak"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "tests/services/cron-jobs": {
        "path": "tests/services/cron-jobs",
        "purpose": "This folder is responsible for containing unit tests for various cron job tasks related to gaming services.",
        "languages": {
          "Go": 5
        },
        "key_modules": [
          "axie_crawler_task_test.go",
          "classic_game_played_task_test.go",
          "console_games_crawler_task_test.go",
          "origins_game_played_task_test.go",
          "summer_axie_crawler_task_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a modular architecture pattern, focusing on unit testing individual components of the cron jobs service.",
        "file_summaries": {
          "tests/services/cron-jobs/axie_crawler_task_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the Axie crawler task in the cron jobs service.",
            "key_types": [
              "TestPurchaseAxieCrawlerTask"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/services/cron-jobs/classic_game_played_task_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the classic game played task in the cron jobs service.",
            "key_types": [
              "TestClassicGamePlayedCrawlerTask"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/services/cron-jobs/console_games_crawler_task_test.go": {
            "language": "Go",
            "purpose": "Unit test for the ConsoleGamesCrawlerTask in the cron_jobs package.",
            "key_types": [
              "TestConsoleGamesCrawlerTask",
              "idGen",
              "NewConsoleGamesCrawlerTask"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/services/cron-jobs/origins_game_played_task_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the origins game played cron job functionality.",
            "key_types": [
              "TestOriginsGamePlayedCrawlerTask"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          },
          "tests/services/cron-jobs/summer_axie_crawler_task_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the Summer Axie Crawler task in the cron jobs service.",
            "key_types": [
              "TestPurchaseSummerAxieCrawlerTask"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      },
      "tests/services/swanlake": {
        "path": "tests/services/swanlake",
        "purpose": "Unit tests for the swanlake service's ChQuack function.",
        "languages": {
          "Go": 1
        },
        "key_modules": [
          "service_test.go"
        ],
        "dependencies": [],
        "architecture": "The folder follows a testing architecture pattern, focusing on unit tests for specific service functions.",
        "file_summaries": {
          "tests/services/swanlake/service_test.go": {
            "language": "Go",
            "purpose": "Unit tests for the swanlake service's ChQuack function.",
            "key_types": [
              "TestChQuack"
            ],
            "functions": null,
            "imports": null,
            "complexity": "medium"
          }
        }
      }
    }
  }
}